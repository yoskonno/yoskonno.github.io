{"componentChunkName":"component---src-templates-post-js","path":"/2020/02/26/provision-elastic-beanstalk-environment-by-terraform/","result":{"data":{"wordpressPost":{"id":"262ecf24-c6e7-5d60-afb5-7dba5ccdde63","title":"Elastic Beanstalk 環境を Terraform で構築する","excerpt":"<p>AWS Elastic Beanstalk （以下 EB）は、スケール可能なウェブアプリの環境を簡単に構築・運用できるサービスです。 AWS コンソールからポチポチクリックしたりするくらいで、ELB・EC2・セキュリティ [&hellip;]</p>\n","slug":"provision-elastic-beanstalk-environment-by-terraform","content":"\n<p>AWS Elastic Beanstalk （以下 EB）は、スケール可能なウェブアプリの環境を簡単に構築・運用できるサービスです。</p>\n\n\n\n<p>AWS コンソールからポチポチクリックしたりするくらいで、ELB・EC2・セキュリティグループ・CloudFormation stackなどなど、ウェブアプリ実行に必要なリソースが作成されます。</p>\n\n\n\n<p>ただ、今回は、AWS コンソールからではなく Terraform を使って、Elastic Beanstalk  上での Rails 環境を構築してみます。</p>\n\n\n\n<h2>背景</h2>\n\n\n\n<p>環境構築の際の設定内容を記録しておきたいというのが一番の動機です。</p>\n\n\n\n<ul><li>AWS コンソールでの設定画面をスクリーンショットで保存する</li><li>AWS コンソールを使わずに、EB CLI を使ったシェルスクリプトで環境構築する</li></ul>\n\n\n\n<p>というのも選択肢としてはあり得ますが、他のプロジェクトで Terraform を使う事が多いため、今回は Terraform を使って設定ファイルをソース管理することにしました。</p>\n\n\n\n<h2>全体の流れ</h2>\n\n\n\n<p>前述の通り、EB を使って環境構築をすると、色んなリソースを勝手に作ってくれます。従って、</p>\n\n\n\n<ol><li>Terraform で、EB が作ってくれる以外のリソース（VPC など）を作成</li><li>その後に、EB の application と environment を Terraform で作成</li></ol>\n\n\n\n<p>という流れになります。</p>\n\n\n\n<h2>具体的な手順</h2>\n\n\n\n<h3>（EB によって作成されない）各種リソース作成</h3>\n\n\n\n<p>以下のリソースを Terraform で作成しました。特に難しいところも無いと思いますし、ネット上にも色々と情報がありますので、詳細は省略します。</p>\n\n\n\n<ul><li>ネットワーク関連<ul><li>VPC</li><li>サブネット</li><li>インターネットGW</li><li>NAT GW 、及びそれに割り当てる Elastic IP</li><li>ルーティングテーブル、及びサブネットとの関連付け</li></ul></li><li>アプリで使用するもの、その他<ul><li>S3 バケット</li><li>RDS</li><li>セキュリティグループ</li></ul></li></ul>\n\n\n\n<p>その他、以下は手動で作成しました。</p>\n\n\n\n<ul><li>SSL 証明書（AWS Certificate Manager で作成）</li></ul>\n\n\n\n<h3>EB の service role を作成</h3>\n\n\n\n<p>EB が他のサービスを呼び出す時などに、service role というロールが使われます。AWS コンソールなどから EB の application を作成する際に、特に指定しない場合は <code>aws-elasticbeanstalk-service-role</code> という名前のロールが自動生成されます。詳細は以下のページを参照して下さい。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts-roles-service.html\">Elastic Beanstalk service role &#8211; AWS Elastic Beanstalk</a></p>\n\n\n\n<p>ただ、後述の Terraform の application を作成する手順では、service role が必須項目のため、事前に作成する必要があります。</p>\n\n\n\n<p>一番簡単なのは、適当に EB のアプリケーションを作成（して後から削除）する方法です。</p>\n\n\n\n<h3>EB の application と environment を作成</h3>\n\n\n\n<p>次に、EB の application と environment も Terraform で作成するのですが、若干分かりにくいところがあったので、いくつか補足します。</p>\n\n\n\n<p>application は以下の通り作成します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nresource &quot;aws_elastic_beanstalk_application&quot; &quot;great-app&quot; {\n  name        = &quot;GreatApp&quot;\n  description = &quot;The Great App&quot;\n\n  appversion_lifecycle {\n    delete_source_from_s3 = true\n    max_age_in_days       = 0\n    max_count             = 200\n    # 事前に作成した service role を指定します。\n    # nnnn のところは、AWS のアカウント ID を入れて下さい。\n    service_role          = &quot;arn:aws:iam::nnnnnnnnnnnn:role/aws-elasticbeanstalk-service-role&quot;\n  }\n}\n</pre>\n\n\n<p>次に environment を作成します。注意すべき点などは、設定ファイル中のコメントに記載するか、後ほど説明します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nresource &quot;aws_elastic_beanstalk_environment&quot; &quot;eb-env-great-app&quot; {\n  # Terraform の workspace 機能を使って、production, staging といった環境を作成します。\n  name                = &quot;GreatApp-${terraform.workspace}&quot;\n  application         = aws_elastic_beanstalk_application.great-app.name\n  # 後ほど説明します。\n  solution_stack_name = &quot;64bit Amazon Linux 2018.03 v2.11.1 running Ruby 2.6 (Puma)&quot;\n\n  cname_prefix = &quot;great-app-${terraform.workspace}&quot;\n\n  # 以下、&quot;setting&quot; で必要な値を設定します\n  setting {\n    namespace = &quot;aws:ec2:vpc&quot;\n    name      = &quot;VPCId&quot;\n    # &quot;（EB によって作成されない）各種リソース作成&quot; の項で作成したリソースを指定します。\n    value     = aws_vpc.vpc-great-app.id\n  }\n\n  # 以下、&quot;setting&quot; のブロックが並ぶ\n}\n</pre>\n\n\n<p><code>solution_stack_name</code> に何を指定すれば良いかは、多分 AWS のサイトを見ないと分からないと思います。Ruby on Rails の場合は、以下のページにある表の一番左の列の太字じゃ無い方が solution stack name です。</p>\n\n\n\n<p><a href=\"https://docs.amazonaws.cn/en_us/elasticbeanstalk/latest/platforms/platform-history-ruby.html\">Ruby Platform History &#8211; AWS Elastic Beanstalk</a></p>\n\n\n\n<p>また、<code>setting</code> のブロックに、environment の設定項目を記載していくのですが、<code>namespace</code> と <code>name</code> に何を指定すれば良いかは、以下のページに記載があります。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html\">General options for all environments &#8211; AWS Elastic Beanstalk</a></p>\n\n\n\n<p>大量の設定項目があるので、デフォルト値で良いものは指定しない方が楽です。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>Elastic Beanstalk を使うと web アプリの環境が簡単に構築できますが、Terraform と併用することで、さらに簡単に構築でき、Infrastructure as Code も実現できます。</p>\n\n\n\n<p>人によっては、 EB によって自動的に作成されるリソースなどが沢山あるのが気持ち悪いと思うかもしれませんが、個人的には PaaS ってそんなものだと割り切っているので特に気になりませんでした。</p>\n","dateObject":"2020-02-26T01:39:00.000Z","date":"February 26, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Elastic Beanstalk","slug":"elastic-beanstalk"},{"name":"Terraform","slug":"terraform"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/02/terraform-eb.png?fit=1024%2C511&ssl=1","height":511,"width":1024},"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/02/terraform-eb.png?fit=768%2C384&ssl=1","height":384,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/02/terraform-eb.png"},"wordpress_id":1351}},"pageContext":{"id":"262ecf24-c6e7-5d60-afb5-7dba5ccdde63","nextPath":"/2020/02/21/check-parquet-on-local-using-parquet-tools/","nextTitle":"parquet-toolsでApache Parquet形式のファイルをローカルでお手軽に確認する","prevPath":"/2020/03/03/leaking-middleware-connection-in-aws-lambda-with-java/","prevTitle":"AWS LambdaのJavaランタイムでミドルウェアのコネクションのリークでハマった件"}}}