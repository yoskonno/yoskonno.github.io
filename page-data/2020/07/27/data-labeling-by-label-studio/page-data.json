{"componentChunkName":"component---src-templates-post-js","path":"/2020/07/27/data-labeling-by-label-studio/","result":{"data":{"wordpressPost":{"id":"3f6933d6-cbe9-56ac-9ae8-67b8c147ad06","title":"Label Studio で教師データ作成","excerpt":"<p>機械学習にとってはデータが重要です。本記事では、機械学習の教師データを作成するときに使える Label Studio というオープンソースのツールについて紹介します。 最初に、Label Studio 自体の説明を、その [&hellip;]</p>\n","slug":"data-labeling-by-label-studio","content":"\n<p>機械学習にとってはデータが重要です。本記事では、機械学習の教師データを作成するときに使える Label Studio というオープンソースのツールについて紹介します。</p>\n\n\n\n<p>最初に、Label Studio 自体の説明を、その後、具体例としてテキストの分類をやってみます。</p>\n\n\n\n<h2>Label Studio とは</h2>\n\n\n\n<h3>Swiss army knife?</h3>\n\n\n\n<p>GitHub の README（以下のリンク）によれば、「Label Studio は、データのラベリング・アノテーションのためのスイス製アーミーナイフ」（適当な訳）だそうです。要は、データのラベル・アノテーションタスクに使える万能ツールだそうです。</p>\n\n\n\n<p><a rel=\"noreferrer noopener\" href=\"https://github.com/heartexlabs/label-studio#use-cases\" target=\"_blank\">heartexlabs/label-studio: Label Studio is a multi-type data labeling and annotation tool with standardized output format</a></p>\n\n\n\n<p>以下の英文ブログポストに、簡単な使い方などが紹介されています。</p>\n\n\n\n<p><a href=\"https://towardsdatascience.com/introducing-label-studio-a-swiss-army-knife-of-data-labeling-140c1be92881#3907-fd502dc24c8d\">Introducing Label Studio, a swiss army knife of data labeling | by Nikolai Liubimov | Towards Data Science</a></p>\n\n\n\n<h3>Label Studio で対応しているタスク</h3>\n\n\n\n<p>README の <a rel=\"noreferrer noopener\" href=\"https://github.com/heartexlabs/label-studio#use-cases\" target=\"_blank\">Use Cases の項</a>に大体書いてあります、以下のような機械学習タスクのデータ作成に使えるようです。</p>\n\n\n\n<ul><li>画像<ul><li>分類</li><li>物体検知</li><li>セグメンテーション</li><li>姿勢推定</li></ul></li><li>テキスト<ul><li>分類</li><li>要約</li><li>HTML Tagging</li></ul></li><li>音声<ul><li>分類</li><li>発話者認識</li><li>感情認識</li><li>文字起こし</li></ul></li><li>動画<ul><li>分類</li></ul></li><li>比較<ul><li>対となってるデータのどちらが良いか</li><li>ソート</li></ul></li></ul>\n\n\n\n<p>まぁ、一般的なものは殆ど網羅されていると思います。</p>\n\n\n\n<h3>主な機能</h3>\n\n\n\n<ul><li>入力ファイル形式は、JSON, CSV, TSV 及び、RAR と ZIP アーカイブ</li><li>それらの入力データに対して、画面上でラベル付けができる</li><li>入出力のデータ形式など、細かく設定可能</li><li>単にファイルを入出力するだけで無く、機械学習フレームワークと</li></ul>\n\n\n\n<h2>大まかな流れ</h2>\n\n\n\n<h3>単体で使う場合</h3>\n\n\n\n<p>Label Studio を単体で使う場合の流れは以下の通りです。</p>\n\n\n\n<ol><li>入出力データの形式を定義する</li><li>Label Studio を起動する</li><li>入力データを読み込ませる</li><li>画面上でラベル付けする</li><li>ラベル付けした結果を出力する</li></ol>\n\n\n\n<p>上述の通り、データ形式は JSON, CSV, TSV など、基本的なものには対応しています。</p>\n\n\n\n<h3>機械学習フレームワークと連携する場合</h3>\n\n\n\n<p>Label Studio は単体で使うだけで無く、&#8221;ML backend server&#8221; というのを立ち上げて、それと接続することが出来ます。それにより、以下のような場合に使えると書いてあります。</p>\n\n\n\n<ul><li>Pre-labeling: 人間が正確なラベリングをする前の、大雑把なラベル付けを行う（例えば、画像のセグメンテーションなど）</li><li>Auto labeling: 学習済みモデルを使い、自動的にラベル付けを行う</li><li>オンライン学習: ラベル結果を随時 ML backend server に渡して、再学習をする</li><li>能動学習: （詳しくは分かりません）</li><li>予測サービス: 学習済みモデルを使った API サーバーのようなもの？</li></ul>\n\n\n\n<p>（上のリストのコロン以後の文は私のコメントです。）</p>\n\n\n\n<p>実際に使えるのは最初の3つかなと思いました。API サーバーを作るのであれば、違う技術を選択すると思います。</p>\n\n\n\n<p>また、NLP ライブラリの Transformers というのがあるのですが、それと接続するための label-studio-transformers というのがあるのですが、それについては別の機会に書こうと思います。</p>\n\n\n\n<p><a href=\"https://github.com/heartexlabs/label-studio-transformers\" target=\"_blank\" rel=\"noreferrer noopener\">heartexlabs/label-studio-transformers: Label data using HuggingFace&#8217;s transformers and automatically get a prediction service</a></p>\n\n\n\n<h2>インストール、起動方法</h2>\n\n\n\n<h3>インストール</h3>\n\n\n\n<p>Label Studio は、ブラウザ経由で操作するサーバー型のソフトウェアです。インストールといっても大したことはなく、以下のいずれかの方法で行います。</p>\n\n\n\n<ul><li><code>pip install label-studio</code></li><li><code>docker run .... heartexlabs/label-studio:latest ... </code></li><li><code>docker-compose up</code></li><li>git clone して、python コマンドで直接実行</li></ul>\n\n\n\n<p>一番簡単なのは、docker run か docker-compose up だと思いますが、好みの方法で行って下さい。</p>\n\n\n\n<h3>プロジェクトファイルの初期化</h3>\n\n\n\n<p>Label Studio を起動する際には「プロジェクトファイル」が必要です。初回の起動の際には、初期化のためのオプションをつけて、プロジェクトファイルを初期化します。</p>\n\n\n\n<p>上述の通り、Label Studio の起動方法は何通りかあり、それによって初期化のオプションは異なりますが、以下、pip でインストールした場合の例を載せます。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nlabel-studio init /path/to/my_project --template=text_classification\n</pre>\n\n\n<p><code>--template=</code> の後には、プロジェクトファイルのテンプレートを指定します。指定できるテンプレートは、恐らく以下のディレクトリの中にあるものです。</p>\n\n\n\n<p><a href=\"https://github.com/heartexlabs/label-studio/tree/master/label_studio/examples\" target=\"_blank\" rel=\"noreferrer noopener\">label-studio/label_studio/examples at master · heartexlabs/label-studio</a></p>\n\n\n\n<p>ちなみに、何も指定しないと、空のファイルが作成されます。</p>\n\n\n\n<h2>実際の使い方の例（テキスト分類）</h2>\n\n\n\n<h3>入出力データの形式の定義</h3>\n\n\n\n<p>まずはどのようなデータがあって、それをどう分類するのか、といった定義をします。具体的には、プロジェクトディレクトリの中にある <code>config.xml</code> というファイルを修正します。</p>\n\n\n\n<p>私の場合は、テキストの分類をしたいので、以下のように修正しました。</p>\n\n\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!-- {&quot;title&quot;: &quot;Text classification&quot;, &quot;category&quot;: &quot;text&quot;, &quot;complexity&quot;: &quot;basic&quot;, &quot;order&quot;: &quot;!&quot;} --&gt;\n&lt;View&gt;\n  &lt;Text name=&quot;text&quot; value=&quot;$body&quot;/&gt;\n  &lt;Choices name=&quot;category&quot; toName=&quot;text&quot; choice=&quot;single&quot;&gt;\n    &lt;Choice value=&quot;Category1&quot;/&gt;\n    &lt;Choice value=&quot;Category2&quot;/&gt;\n    &lt;Choice value=&quot;Category3&quot;/&gt;\n    &lt;Choice value=&quot;Category4&quot;/&gt;\n  &lt;/Choices&gt;\n&lt;/View&gt;\n</pre>\n\n\n<p>ここで、<code>&lt;Text&gt;</code> というタグの中に <code>$body</code> という文字列があると思いますが、これは入力データの中の <code>body</code> という値を画面に表示することを意味します。</p>\n\n\n\n<p>次の <code>&lt;Choices&gt;</code> タグで、さきほどのテキストが Category1 〜 Category4 のどのカテゴリーに当てはまるのか、その選択肢を表示します。</p>\n\n\n\n<h3>起動</h3>\n\n\n\n<p>次に Label Studio を起動します。起動方法は、インストール方法によって異なりますが、pip でインストールした場合には以下のように起動します。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nlabel-studio start /path/to/my_project\n</pre>\n\n\n<p>起動後は、ブラウザで <code>http://ホスト名:8080/</code> にアクセスします。ポート番号は設定やコマンドラインオプションで変更可能です。</p>\n\n\n\n<p>なお、ブラウザでアクセスしても画面がなかなか出てこない場合があります。それの対処法についてはページの後ろの方に記載したので、同じ現象が出ている人は参考にして頂ければ幸いです。</p>\n\n\n\n<h3>入力データを読み込ませる</h3>\n\n\n\n<p>次に、データを Label Studio に読み込ませます。今回は、JSON ファイルを読み込ませることにします。画面上部のメニューから「Import」を選択して、その後、JSON ファイルを選択します。</p>\n\n\n\n<p>上述の <code>config.xml</code> で、入力ファイルの中の <code>$body</code> という値を表示し、それに対してラベル付けをしていくように設定しましたが、入力ファイルの JSON には <code>body</code> という要素が含まれている必要があります。</p>\n\n\n\n<p>上述の Label Studio のブログ記事には以下のような説明画像があります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-file-formats.jpeg?resize=1024%2C630&#038;ssl=1\" alt=\"\" class=\"wp-image-1589\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-file-formats.jpeg?resize=1024%2C630&amp;ssl=1 1024w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-file-formats.jpeg?resize=300%2C185&amp;ssl=1 300w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-file-formats.jpeg?resize=768%2C472&amp;ssl=1 768w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-file-formats.jpeg?w=1200&amp;ssl=1 1200w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" data-recalc-dims=\"1\" /><figcaption>Label Studio のブログ記事より引用</figcaption></figure>\n\n\n\n<p>これに倣うと、入力データは以下のような形式である必要があります。</p>\n\n\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n{\n  body: &quot;このテキストを分類します&quot;,\n  id: 1,\n  some_other_field: &quot;foo&quot;\n}\n</pre>\n\n\n<p>ただ、実際には、ラベル付けすべきデータが1件だけというのはあり得ないので、以下のような配列形式になっている必要があります。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n[\n  {\n    body: &quot;このテキストを分類します&quot;,\n    id: 1,\n    some_other_field: &quot;foo&quot;\n  },\n  {\n    body: &quot;このテキストも分類して欲しいです&quot;,\n    id: 2,\n    some_other_field: &quot;bar&quot;\n  },\n]\n</pre>\n\n\n<h3>画面上でラベル付けする</h3>\n\n\n\n<p>ここまで出来たら、後は画面上でポチポチラベル付けをしていくだけです。今回の例であれば、分類対象のテキストの下に選択肢が表示されるので、どれか1つを押して「Submit」します。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-text-classification.png?resize=1024%2C480&#038;ssl=1\" alt=\"\" class=\"wp-image-1588\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-text-classification.png?resize=1024%2C480&amp;ssl=1 1024w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-text-classification.png?resize=300%2C141&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-text-classification.png?resize=768%2C360&amp;ssl=1 768w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/label-studio-text-classification.png?w=1437&amp;ssl=1 1437w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>ラベル付けした結果を出力する</h3>\n\n\n\n<p>ラベル付けが終わったら、画面上部のメニューから「Export」を選択し、任意の形式で出力できます。特に難しいところはないので、詳細は省きます。</p>\n\n\n\n<p>以上、Label Studio の一通りの使い方を説明しました。</p>\n\n\n\n<h2>その他</h2>\n\n\n\n<h3>関連ソフトウェア</h3>\n\n\n\n<p>今回紹介したのは Label Studio 本体ですが、関連するソフトウェアとして以下のものがあります。</p>\n\n\n\n<ul><li><a rel=\"noreferrer noopener\" href=\"https://github.com/heartexlabs/label-studio-frontend\" target=\"_blank\">label-studio-frontend</a> : 自前のアプリケーションに組み込んで使う事の出来る Label Studio のフロントエンドらしい</li><li><a href=\"https://github.com/heartexlabs/label-studio-converter\">label-studio-converter</a> : 他の機械学習ライブラリに合わせて出力形式を変換するコンバーターとのこと</li><li><a href=\"https://github.com/heartexlabs/label-studio-transformers\">label-studio-transformers</a> : 前述の通り、NLP ライブラリの Transformers と接続するためのライブラリ。ラベル付け → Transformers のトレーニング → 学習済みモデルのデプロイ → 予測、という流れを簡単に実現できるっぽい</li></ul>\n\n\n\n<p>Transformers 単体は、弊社の <a href=\"https://stg-engineering-wp.mobalab.net/author/miyamoto/\">miyamonz</a> が色々いじっていたので、私も触ってみようと思います。</p>\n\n\n\n<h3>画面のロードに異様に時間がかかる場合の対処法</h3>\n\n\n\n<p>Label Studio を起動してブラウザでアクセスしても、画面がなかなか表示されない場合があります。弊社内でも複数人が経験しています。</p>\n\n\n\n<p>原因としては、内部で使用している Flask （web サーバー）に同梱の WSGI サーバーである Werkzeug が（デフォルトでは）シングルスレッドで動作しているためのようです。</p>\n\n\n\n<p>それに対して PR を作成し、手元の環境では問題は解決していますので、同じ問題で困っている人がいれば、こちらの修正を試してみて下さい。</p>\n\n\n\n<p><a href=\"https://github.com/heartexlabs/label-studio/pull/351/commits/7ef383d509506324ed4c8bab484ddc12f9d3307f\">Use gevent&#8217;s WSGIServer instead of plain Flask by k4200 · Pull Request #351 · heartexlabs/label-studio</a></p>\n\n\n\n<p>（2020/7/26現在、PR は10日間くらい放置されているので、このままマージされない可能性が高そうです。）</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>Label Studio は、画像・テキスト・音声など、さまざまなデータのラベル付けタスクに使用できるウェブアプリケーションです。今回はテキストの分類タスクを例に、インストール・設定・実際の利用まで説明しました。</p>\n\n\n\n<p>NLP ライブラリである Transformers と連携も出来るようなので、今後はそちらも試してみようと思います。</p>\n","dateObject":"2020-07-27T03:40:00.000Z","date":"July 27, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Label Studio","slug":"label-studio"},{"name":"機械学習","slug":"%e6%a9%9f%e6%a2%b0%e5%ad%a6%e7%bf%92"},{"name":"自然言語処理","slug":"%e8%87%aa%e7%84%b6%e8%a8%80%e8%aa%9e%e5%87%a6%e7%90%86"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/memo-2331062_1280.jpg?fit=1024%2C362&ssl=1","height":362,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/memo-2331062_1280.jpg?fit=768%2C271&ssl=1","height":271,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/memo-2331062_1280.jpg"},"wordpress_id":1569}},"pageContext":{"id":"3f6933d6-cbe9-56ac-9ae8-67b8c147ad06","nextPath":"/2020/07/21/execute-typescript-with-ts-node/","nextTitle":"TypeScriptを手軽に実行できるPlayground環境の作り方","prevPath":"/2020/08/17/lazy-collection-in-scala/","prevTitle":"Scalaのコレクションで遅延処理を行う"}}}