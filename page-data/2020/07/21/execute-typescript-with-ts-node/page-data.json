{"componentChunkName":"component---src-templates-post-js","path":"/2020/07/21/execute-typescript-with-ts-node/","result":{"data":{"wordpressPost":{"id":"67122f6d-9198-55f8-904b-d70082379948","title":"TypeScriptを手軽に実行できるPlayground環境の作り方","excerpt":"<p>みなさんこんにちは。小ネタですが、typescriptのコードを軽く試してみるときにこちらのプレイグラウンドなどを使っていたのですが、出力がぱっとできなかったりオンラインということで試したコードを保存することができなかっ [&hellip;]</p>\n","slug":"execute-typescript-with-ts-node","content":"\n<p>みなさんこんにちは。小ネタですが、typescriptのコードを軽く試してみるときに<a href=\"https://www.typescriptlang.org/play/\">こちらのプレイグラウンド</a>などを使っていたのですが、出力がぱっとできなかったりオンラインということで試したコードを保存することができなかったり、npmのパッケージをインポートして試すのには使えなかったりなどと、何か別のいい方法はないかと思っていたのですが、ts-nodeというパッケージを使えば気軽にローカルでtypescriptをトランスパイルなしで実行することができました。</p>\n\n\n\n<p>ローカルでvscodeを使って補完機能を利用した上で簡単に実行でき、過去に試したコードもファイルとして残せるのでオンラインに比べてずいぶんと使いやすくなりました。方法をまとめましたのでみなさんの参考になれば幸いです。</p>\n\n\n\n<h2><strong>ts-nodeの使い方</strong></h2>\n\n\n\n<p>このts-nodeというnpmのパッケージを使えば、typescriptをトランスパイルする必要もなく、ローカルのnode環境で簡単に実行できます。</p>\n\n\n\n<p>まずはインストール方法ですが、ドキュメントにある通りにts-nodeをtypescriptとともに<code>-g</code>をつけてグローバルにインストールします。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g typescript\nnpm install -g ts-node</code></pre>\n\n\n\n<p>これで、以下のコマンドをコンソールで入力するだけで.tsファイルを実行することができます。また、ファイルの拡張子の.tsは省略することもできます。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ts-node ファイル名.ts</code></pre>\n\n\n\n<p>グローバルにインストールしたくない場合は、以下のコマンドでインストールすることになります。(ちなみに-Dは&#8211;save-devと同じです)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -D typescript\nnpm install -D ts-node</code></pre>\n\n\n\n<p>この場合はtypescriptの実行は以下のコマンドのように若干長くなりますので、コマンドが少々短くなってファイルのディレクトリに関係なく実行できるようになるグローバルインストールが個人的におすすめです。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npx ts-node ファイル名.ts</code></pre>\n\n\n\n<h2><strong>パッケージを試す方法</strong></h2>\n\n\n\n<p>パッケージをインストールするには、実行したいtypescriptのファイルの場所でまずはpackage.jsonを作成します。（-yはinitするときの色々な質問を省略して全部yesにするというオプションで、さくっと作成するために追加しています）</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm init -y</code></pre>\n\n\n\n<p>これでpackage.jsonが作成されたので、試したいパッケージを自由にインストールしてみてください。ここではサンプルとしてmoment.jsをインストールしてみます。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install moment</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>// ファイル名：moment-test.ts\n\nimport * as moment from 'moment'\nimport { Moment } from 'moment'\n\nconst currentMoment: Moment = moment()\n\nconst currentHour: Number = currentMoment.hours()\nconst currentTime: String = currentMoment.format('HH:mm')\n\nconsole.log(currentHour)\nconsole.log(currentTime)</code></pre>\n\n\n\n<p>パッケージを試すだけのコードですが、以下のコマンドを実行すればコンソールに結果が出力されます。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ts-node moment-test</code></pre>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>ts-nodeというパッケージを利用するというだけなのですが、かなり手軽にTypescriptを実行することができました。個人的にはVScodeを使ってコードを書いて補完機能を利用してパッケージのソースを参照しながら実行できることが嬉しかったので、これからはこの方法で気軽にローカルで試していきたいと思います。</p>\n","dateObject":"2020-07-21T08:00:00.000Z","date":"July 21, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Node.js","slug":"node-js"},{"name":"Typescript","slug":"typescript"}],"author":{"name":"Konno","slug":"konno"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/ts-node.jpg?fit=768%2C576&ssl=1","height":576,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/07/ts-node.jpg"},"wordpress_id":1573}},"pageContext":{"id":"67122f6d-9198-55f8-904b-d70082379948","nextPath":"/2020/06/24/using-original-domain-with-netlify/","nextTitle":"netlifyで独自ドメインを利用するときのリダイレクト設定","prevPath":"/2020/07/27/data-labeling-by-label-studio/","prevTitle":"Label Studio で教師データ作成"}}}