{"componentChunkName":"component---src-templates-post-js","path":"/2020/05/12/rails-app-in-docker-on-azure-app-service/","result":{"data":{"wordpressPost":{"id":"7c68d7de-6afb-5c57-ac4f-d746a9c7822a","title":"Azure App Service + Docker で Rails アプリを動かす","excerpt":"<p>概要 会社でも個人でも AWS を使う事が多いのですが、今回、個人的なサイト作成で、勉強も兼ねて Azure App Service を使って Rails のアプリを作成してみました。 構成は以下の通りシンプルなものです [&hellip;]</p>\n","slug":"rails-app-in-docker-on-azure-app-service","content":"\n<h2>概要</h2>\n\n\n\n<p>会社でも個人でも AWS を使う事が多いのですが、今回、個人的なサイト作成で、勉強も兼ねて Azure App Service を使って Rails のアプリを作成してみました。</p>\n\n\n\n<p>構成は以下の通りシンプルなものです。</p>\n\n\n\n<ul><li>本番環境<ul><li>Azure App Service<ul><li>Custom Docker image</li></ul></li><li>Azure Database for PostgreSQL</li><li>Azure Container Registry に、本番用コンテナを保存</li></ul></li><li>ローカル開発環境<ul><li>Docker Compose</li><li>コンテナは Web (Rails), DB, Webpacker の3つ</li></ul></li><li>その他<ul><li>Terraform で本番環境を構築</li><li>Rails 6.0.2</li></ul></li></ul>\n\n\n\n<p>同じような構成の情報がそこまで多くなかったので、本記事を書くことにしました。参考になれば幸いです。</p>\n\n\n\n<h2> その他の選択肢</h2>\n\n\n\n<p>今回の構成に関する説明の前に、その他にどのような選択肢があるかについて簡単に記載します。本構成の設定方法などをすぐに知りたい方は、飛ばしてもらって構いません。</p>\n\n\n\n<h3>Ruby のランタイムを使用する</h3>\n\n\n\n<p>今回は、Dockerfile を使って Docker イメージを作成し、それを Azure App Service で動かしています。Ruby アプリを動かす別の方法として、Ruby のランタイムを使用して、ソースを Azure 上に push するという方法もあります。Heroku みたいなものと思ってもらえれば良いと思います。以下の Microsoft のページを読めば、概略が分かります。</p>\n\n\n\n<p><a href=\"https://docs.microsoft.com/en-us/azure/app-service/containers/quickstart-ruby\" target=\"_blank\" rel=\"noreferrer noopener\">Quickstart: Create a Linux Ruby app &#8211; Azure App Service | Microsoft Docs</a></p>\n\n\n\n<p>今回、Ruby ランタイムを使用しなかった理由としては、Docker Compose を使ってローカル開発環境を構築していたので、Dockerfile をそのまま使おうと思ったというのがあります。</p>\n\n\n\n<h3>本番でも Docker Compose を使用する</h3>\n\n\n\n<p>今回は、Dockerfile で定義した単一のコンテナを Azure App Service にデプロイしていますが、（2020/5/10現在 preview 機能ですが）Docker Compose を使って複数コンテナをデプロイすることも出来ます。そうすれば、ローカルと本番を全く同じ構成にすることが出来ます。</p>\n\n\n\n<p>ただ、今回の構成は Web + DB という単純なもので、DB には Azure のマネージドサービスである Azure Database for PostgreSQL を使用したかったため、単一のコンテナをデプロイする方法を選びました。</p>\n\n\n\n<p>Multi-container のデプロイ方法は、以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://docs.microsoft.com/en-us/azure/app-service/containers/quickstart-multi-container\" target=\"_blank\" rel=\"noreferrer noopener\">Quickstart: Create a multi-container app &#8211; Azure App Service | Microsoft Docs</a></p>\n\n\n\n<h3>Resource Manager を使って環境構築する</h3>\n\n\n\n<p>今回はインフラ構築に使い慣れた Terraform を使いましたが、Azure では Resource Manager というものでインフラ構築が出来るようです。</p>\n\n\n\n<p>ただ、以下の2つの理由で、今回は Terraform を使う事にしました。</p>\n\n\n\n<p>1つ目は、ちょっと検索したところ、以下のような記事を見つけたことです。</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a rel=\"noreferrer noopener\" href=\"https://docs.microsoft.com/en-us/azure/azure-resource-manager/\" target=\"_blank\">Azure Resource Manager — ARM</a> uses json format. ARM files tend to be quite verbose and therefore long.</p><cite>https://medium.com/@kari.marttila/how-to-create-infrastructure-as-code-for-aws-and-azure-ab0a5ddecc06</cite></blockquote>\n\n\n\n<p>2つ目は、今回、本格的に Azure App Service を使うのが初めてだったため、複数の新しい技術を同時に覚えたくなかったことです。</p>\n\n\n\n<h2>インフラの構築</h2>\n\n\n\n<h3>構成</h3>\n\n\n\n<p>Azure App Service でアプリを構築する場合、まずは App Service plan というのを作成し、その配下に App Service を作成することになります。</p>\n\n\n\n<p>また、今回は全てのリソースを同一のリソースグループに入れましたので、構成としては以下のような形になります。</p>\n\n\n\n<ul><li>リソースグループ<ul><li>App Service plan<ul><li>App Service (Webアプリ)</li></ul></li><li>Azure Database for PostgreSQL (DB)</li><li>Azure Container Registry (ビルドした Docker コンテナを保存)</li></ul></li></ul>\n\n\n\n<p>なお、今回は、VNet は使用していません。VNet を使おうとすると、Azure Database for PostgreSQL や App Service plan で高いプランにする必要があるというのが主な理由です。</p>\n\n\n\n<h3>Terraform</h3>\n\n\n\n<p>App Service の設定項目は沢山あり、個人的には把握するまでに時間がかかったので、設定内容を全部載せておきます。また、分かりにくい点は、コード中にコメントを入れておきます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nresource &quot;azurerm_app_service_plan&quot; &quot;main&quot; {\n  name                = &quot;${var.app_name}-app-service-plan&quot;\n  # リソースグループの定義は省略\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  # Windows か Linux かは、App Service plan 毎に決める\n  kind                = &quot;Linux&quot;\n  reserved            = true\n\n  # See: https://azure.microsoft.com/en-us/pricing/details/app-service/linux/\n  sku {\n    tier = &quot;Basic&quot;\n    size = &quot;B1&quot;\n  }\n}\n\nresource &quot;azurerm_app_service&quot; &quot;web&quot; {\n  name                = &quot;${var.app_name}-app-service&quot;\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  app_service_plan_id = azurerm_app_service_plan.main.id\n\n  site_config {\n    # \n    linux_fx_version  = &quot;DOCKER|foo.azurecr.io/foo:latest&quot;\n    always_on        = &quot;true&quot;\n  }\n\n  app_settings = {\n    # https://github.com/Azure/azure-rest-api-specs/issues/1698\n    WEBSITES_ENABLE_APP_SERVICE_STORAGE = false\n\n    # ここが間違っていると、イメージを Docker Hub からダウンロードしようとするので要注意\n    DOCKER_REGISTRY_SERVER_URL      = &quot;https://foo.azurecr.io&quot;\n    DOCKER_REGISTRY_SERVER_USERNAME = &quot;foo&quot;\n    DOCKER_REGISTRY_SERVER_PASSWORD = var.acr_password\n\n    WEBSITES_PORT     = 3000\n\n    DATABASE_HOST     = azurerm_postgresql_server.main.fqdn\n    DATABASE_PORT     = 5432\n    DATABASE_USER     = &quot;${azurerm_postgresql_server.main.administrator_login}@${azurerm_postgresql_server.main.fqdn}&quot;\n    DATABASE_PASSWORD = var.postgresql_administrator_password\n\n    RAILS_MASTER_KEY  = var.rails_master_key\n    RAILS_ENV         = var.rails_env\n    # nginx などは立てず、 Rails で静的ファイルも返すようにする\n    RAILS_SERVE_STATIC_FILES = true\n\n    SENDGRID_API_KEY  = var.sendgrid_api_key\n  }\n\n  connection_string {\n    name  = &quot;Database&quot;\n    type  = &quot;PostgreSQL&quot;\n    # 一応設定してみたが、どこで使われているのか不明。設定は不要かも。\n    value = &quot;host=${azurerm_postgresql_server.main.fqdn}; dbname=${azurerm_postgresql_database.foo.name} user=postgres@${azurerm_postgresql_server.main.fqdn} password=${var.postgresql_webuser_password} port=5432 sslmode=require&quot;\n  }\n}\n</pre>\n\n\n<h2>コンテナの設定</h2>\n\n\n\n<h3>参考となる情報</h3>\n\n\n\n<p>Rails アプリを Docker で動かす方法は、Docker 公式サイトの以下のサンプルが（Docker Compose を使って DB も一緒に立ち上げていますが）参考になると思います。</p>\n\n\n\n<p><a href=\"https://docs.docker.com/compose/rails/\" target=\"_blank\" rel=\"noreferrer noopener\">Quickstart: Compose and Rails | Docker Documentation</a></p>\n\n\n\n<p>また、カスタムの Docker イメージで App Service を立ち上げる方法は、Django の例ではありますが、以下のチュートリアルが参考になると思います。</p>\n\n\n\n<p><a href=\"https://docs.microsoft.com/en-us/azure/app-service/containers/tutorial-custom-docker-image\" target=\"_blank\" rel=\"noreferrer noopener\">Tutorial: Build and run a custom image &#8211; Azure App Service | Microsoft Docs</a></p>\n\n\n\n<h3>Dockerfile</h3>\n\n\n\n<p>参考情報の内容を理解している前提で、Dockerfile の内容を説明します。まずは、Dockerfile をそのまま載せます。（実際に使っているものと少し異なりますが。）</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nFROM ruby:2.7\nRUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y postgresql-client vim &amp;amp;&amp;amp; \\\n    apt-get install -y apt-transport-https &amp;amp;&amp;amp; \\\n    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &amp;amp;&amp;amp; \\\n    echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | tee /etc/apt/sources.list.d/yarn.list &amp;amp;&amp;amp; \\\n    apt-get update -qq &amp;amp;&amp;amp; apt-get install -y yarn &amp;amp;&amp;amp; \\\n    curl -sL https://deb.nodesource.com/setup_12.x | bash - &amp;amp;&amp;amp; \\\n    apt-get install -y nodejs\n\n# Install SSH server\n# https://docs.microsoft.com/en-us/azure/app-service/containers/tutorial-custom-docker-image#enable-ssh-connections\nENV SSH_PASSWD &quot;root:Docker!&quot;\nRUN apt-get update \\\n        &amp;amp;&amp;amp; apt-get install -y --no-install-recommends dialog \\\n        &amp;amp;&amp;amp; apt-get update \\\n  &amp;amp;&amp;amp; apt-get install -y --no-install-recommends openssh-server \\\n  &amp;amp;&amp;amp; echo &quot;$SSH_PASSWD&quot; | chpasswd\nCOPY sshd_config /etc/ssh/\n\nRUN mkdir /myapp\nWORKDIR /myapp\n\nCOPY Gemfile /myapp/Gemfile\nCOPY Gemfile.lock /myapp/Gemfile.lock\nCOPY yarn.lock /myapp/yarn.lock\n\nRUN bundle install\nRUN yarn install\n\nCOPY . /myapp\n\n# Add a script to be executed every time the container starts.\nCOPY entrypoint.sh /usr/bin/\nRUN chmod +x /usr/bin/entrypoint.sh\nENTRYPOINT [&quot;entrypoint.sh&quot;]\nEXPOSE 3000 2222\n\n# Start the main process.\nCMD [&quot;rails&quot;, &quot;server&quot;, &quot;-b&quot;, &quot;0.0.0.0&quot;]\n</pre>\n\n\n<p>重要なポイントとしては2つです。</p>\n\n\n\n<ul><li>SSH サーバーを 2222 番ポートで、立ち上げる</li><li>root のパスワードを <code>Docker!</code> に設定する</li></ul>\n\n\n\n<p>ポートは必ず 2222 で、パスワードも必ず <code>Docker!</code> にしないと、コンテナ内に SSH で入ることが出来ず、トラブルシューティングが困難になります。</p>\n\n\n\n<h3>entrypoint.sh</h3>\n\n\n\n<p>entrypoint.sh は、Docker 公式サイトのサンプルのものにいくつかの行を付け加えて使用しています。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n#!/bin/bash\nset -e\n\n# SSH サーバーがポート 2222 で立ち上がる\nservice ssh start\n\n# Remove a potentially pre-existing server.pid for Rails.\nrm -f /myapp/tmp/pids/server.pid\n\n# 起動時にマイグレーションを実行する\nif [[ $RAILS_ENV = 'production' ]]; then\n  rails db:migrate\nfi\n\n# Then exec the container's main process (what's set as CMD in the Dockerfile).\nexec &quot;$@&quot;\n</pre>\n\n\n<h2>デプロイ</h2>\n\n\n\n<p>デプロイの手順は以下の通りです。</p>\n\n\n\n<ol><li>Azure Container Registry にログインする（初回のみ）</li><li>Docker コンテナをビルドする</li><li>Azure Container Registry に push する</li><li>App Service を再起動する（その際に、最新のコンテナを pull してくる）</li></ol>\n\n\n\n<p>コマンドとしては以下の通りです。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ndocker login foo.azurecr.io\ndocker build -t foo.azurecr.io/foo .\ndocker push foo.azurecr.io/foo:latest\n</pre>\n\n\n<p>その後、Azure Portal 上で、アプリの再起動を行います。</p>\n\n\n\n<h2>トラブルシューティング</h2>\n\n\n\n<p>Azure App Service でのトラブルシューティングの基本は、コンテナに SSH で入って、ログファイルなどを確認することです。そのためにも、前述の通り Dockerfile 内で sshd を起動しておくことが重要です。</p>\n\n\n\n<h3>Kudu (Advanced Tools)</h3>\n\n\n\n<p>コンテナへの SSH での接続は、Azure Portal から行うのが簡単です。左側のメニューで下の方に行き、SSH を選べば良いのですが、その1つ下の「Advanced Tools」から説明します。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i0.wp.com/engineering.mobalab.net/wp-content/uploads/2020/05/azure-portal-app-service-1.png?fit=853%2C1024&amp;ssl=1\" alt=\"\" class=\"wp-image-1461\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-portal-app-service-1.png?w=1190&amp;ssl=1 1190w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-portal-app-service-1.png?resize=250%2C300&amp;ssl=1 250w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-portal-app-service-1.png?resize=853%2C1024&amp;ssl=1 853w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-portal-app-service-1.png?resize=768%2C922&amp;ssl=1 768w\" sizes=\"(max-width: 1190px) 100vw, 1190px\" /></figure>\n\n\n\n<p>Advance Tools から Go のリンクで開くと、以下のような画面が出てきます。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i1.wp.com/engineering.mobalab.net/wp-content/uploads/2020/05/azure-kudu.png?fit=1024%2C913&amp;ssl=1\" alt=\"\" class=\"wp-image-1462\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-kudu.png?w=1290&amp;ssl=1 1290w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-kudu.png?resize=300%2C267&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-kudu.png?resize=1024%2C913&amp;ssl=1 1024w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/azure-kudu.png?resize=768%2C685&amp;ssl=1 768w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /><figcaption>Kudu</figcaption></figure>\n\n\n\n<p>ここで動いているのは Kudu というみたいです。</p>\n\n\n\n<p>上の方のリンクに「Bash」と「SSH」がありますが、</p>\n\n\n\n<ul><li>Bash: Docker コンテナが動いているホスト OS の bash に入る</li><li>SSH: Docker コンテナ内で動いている sshd に接続する</li></ul>\n\n\n\n<p>という違いがあります。「Bash」の方で、Ruby のプロセスや Rails のログを確認しようとしても出来ないので要注意です。</p>\n\n\n\n<p>また、AWS の Elastic Beanstalk であれば、ホストは単なる SSH ですので、 <code>eb ssh</code> コマンドなどでホスト OS にログインした上で、 <code>docker exec</code> などでコンテナ内に入れるのですが、Azure App Service の場合、上述の「Bash」でホストに入ったとしても、そもそも docker コマンドがありませんし、コンテナに入ることは出来ません。</p>\n\n\n\n<h3>SSH</h3>\n\n\n\n<p>Kudu の画面上部にある「SSH」リンクをクリックすると、ブラウザ上でコンテナ内の SSH サーバーに接続出来ます。SSH で接続した後は、特別なことはないので、ログファイルを確認したりしてください。</p>\n\n\n\n<p>なお、Rails のプロセスはプロセスID 1で起動していますので、コンテナ内から再起動は出来ません。</p>\n\n\n\n<h3>Bash</h3>\n\n\n\n<p>一度コンテナが起動してしまえば「Bash」で出来ることは大してないのですが、コンテナが起動しない場合などに <code>/home/LogFiles</code> 配下のログで原因を調べることが出来ます。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>Azure App Service で Ruby on Rails の web アプリを動かす方法は、Ruby ランタイムを使う方法もありますが、今回はカスタムの Docker イメージを使う方法を選択しました。Docker コンテナをビルドして Azure Container Registry に push し、それを起動するという方法です。</p>\n\n\n\n<p>一度分かってしまえばそこまで難しくないのですが、細かい部分まで解説したドキュメントがなかったり、似たような構成で動かしている人が少なかったため、それなりに苦労しました。</p>\n\n\n\n<p>Azure は、業務システム系の案件で何度か触ったことがあり、メリットもある程度は分かっていますが、ウェブアプリに関しては AWS に比べると細かいところに手が届かないと思う点がいくつかありました。今後の改善に期待します。</p>\n","dateObject":"2020-05-12T02:04:00.000Z","date":"May 12, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Azure","slug":"azure"},{"name":"Azure App Service","slug":"azure-app-service"},{"name":"Ruby on Rails","slug":"ruby-on-rails"},{"name":"Terraform","slug":"terraform"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/docker-azure-app-service.png?fit=1024%2C683&ssl=1","height":683,"width":1024},"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/docker-azure-app-service.png?fit=768%2C512&ssl=1","height":512,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/05/docker-azure-app-service.png"},"wordpress_id":1452}},"pageContext":{"id":"7c68d7de-6afb-5c57-ac4f-d746a9c7822a","nextPath":"/2020/04/20/vagrant環境でrailsのリモートデバッグ（ブレークポイン/","nextTitle":"Vagrant環境でRailsのリモートデバッグ（ブレークポイント使用可能）","prevPath":"/2020/05/14/create-kinesis-consumer-using-kcl-in-scala/","prevTitle":"Scala + Kinesis Client LibraryでKinesisコンシューマーアプリケーションを作る"}}}