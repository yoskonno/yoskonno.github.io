{"componentChunkName":"component---src-templates-post-js","path":"/2020/03/11/export-github-repositories/","result":{"data":{"wordpressPost":{"id":"66fa2533-fa3e-54b0-9ed6-be7da6fa368f","title":"GitHub レポジトリをエクスポートする","excerpt":"<p>やりたいこと GitHub レポジトリの以下のデータをエクスポートしたい。 コード等（Git レポジトリ） Wiki issues, PRs, それらに対するコメント issues, PRs への添付ファイル 背景 現在 [&hellip;]</p>\n","slug":"export-github-repositories","content":"\n<h2>やりたいこと</h2>\n\n\n\n<p>GitHub レポジトリの以下のデータをエクスポートしたい。</p>\n\n\n\n<ol><li>コード等（Git レポジトリ）</li><li>Wiki</li><li>issues, PRs, それらに対するコメント</li><li>issues, PRs への添付ファイル</li></ol>\n\n\n\n<h2>背景</h2>\n\n\n\n<p>現在、GitHub の旧プランを使っています。旧プランはレポジトリ数によって金額が変わるので、終了したプロジェクトのものなど、使ってないレポジトリはエクスポートした上で削除したいです。（ちなみに、GitHub の現行のプランは、ユーザー数による課金なのでレポジトリ数は関係ありません。）</p>\n\n\n\n<p>上述の1, 2は、通常の Git レポジトリなので、<code>git clone</code> して保存しておけば良いのですが、それ以外は別の方法が必要です。</p>\n\n\n\n<h2>やったこと概要</h2>\n\n\n\n<p>GitHub の Migrations API というものを使用しました。ドキュメントは以下のものを参照しました。</p>\n\n\n\n<ul><li><a href=\"https://help.github.com/ja/enterprise/2.20/admin/migrations/exporting-the-githubcom-organizations-repositories\">GitHub.comのOrganizationのリポジトリのエクスポート &#8211; GitHub ヘルプ</a></li><li><a href=\"https://developer.github.com/v3/migrations/orgs/#response\">Organization migrations | GitHub Developer Guide</a></li></ul>\n\n\n\n<p>基本的にはこの手順通りですが、少し補足しつつ記載します。</p>\n\n\n\n<h2>詳細手順</h2>\n\n\n\n<h3>Personal Access Token の取得</h3>\n\n\n\n<p>以下のページより、個人用のアクセストークンを生成します。</p>\n\n\n\n<p><a href=\"https://github.com/settings/tokens\">Personal Access Tokens</a></p>\n\n\n\n<p>必要な権限は</p>\n\n\n\n<ul><li>admin:org</li><li>repo</li></ul>\n\n\n\n<p>です。</p>\n\n\n\n<p>以降、シェル上で作業をするので、取得したアクセストークンは変数に設定しておきます。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nGITHUB_ACCESS_TOKEN=nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\n</pre>\n\n\n<h3>エクスポート処理の開始</h3>\n\n\n\n<p>以下の通り、Migrations API のエンドポイントに POST リクエストを送ることで、エクスポート処理が開始されます。その際に、<code>lock_repositories</code> を true にして、レポジトリをロックすることが推奨されてます。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ncurl -H &quot;Authorization: token $GITHUB_ACCESS_TOKEN&quot; -X POST \\\n-H &quot;Accept: application/vnd.github.wyandotte-preview+json&quot; \\\n-d'{&quot;lock_repositories&quot;:true,&quot;repositories&quot;:[&quot;orgname/repo1&quot;, &quot;orgname/repo2&quot;]}' \\\nhttps://api.github.com/orgs/:orgname/migrations\n</pre>\n\n\n<p>結果は以下のような JSON が帰ってきますので、id を控えておきます。以下の例であれば 79 です。レポジトリID （1296269）ではないので注意して下さい。</p>\n\n\n\n<p><a href=\"https://developer.github.com/v3/migrations/orgs/#response\">https://developer.github.com/v3/migrations/orgs/#response</a></p>\n\n\n\n<h3>ステータスの確認</h3>\n\n\n\n<p>エクスポート処理は時間がかかるので、以下のコマンドで終了したか確認して下さい。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ncurl -H &quot;Authorization: token $GITHUB_ACCESS_TOKEN&quot; \\\n-H &quot;Accept: application/vnd.github.wyandotte-preview+json&quot; \\\nhttps://api.github.com/orgs/:orgname/migrations/:id\n</pre>\n\n\n<p>ステータスが <code>exported</code> になるまで待ちます。</p>\n\n\n\n<p>パラメータの <code>:id</code> のところは、先ほどの例で言えば 79 です。</p>\n\n\n\n<h3>ダウンロード</h3>\n\n\n\n<p>以下のコマンドでダウンロードします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ncurl -H &quot;Accept: application/vnd.github.wyandotte-preview+json&quot; \\\n-u username:$GITHUB_ACCESS_TOKEN \\\n-L -o migration_archive.tar.gz \\\nhttps://api.github.com/orgs/:orgname/migrations/:id/archive\n</pre>\n\n\n<p><code>username</code> のところは自分の GitHub ユーザー名、<code>:id</code> は、今回の例では 79 です。</p>\n\n\n\n<h3>アーカイブの削除</h3>\n\n\n\n<p>アーカイブは7日後に自動的に削除されますが、気になる人は手動で削除します。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ncurl -H &quot;Authorization: token $GITHUB_ACCESS_TOKEN&quot; -X DELETE \\\n-H &quot;Accept: application/vnd.github.wyandotte-preview+json&quot; \\\nhttps://api.github.com/orgs/:orgname/migrations/:id/archive\n</pre>\n\n\n<h3>ロックの解除、レポジトリの削除</h3>\n\n\n\n<p>無事エクスポートデータをダウンロード出来たら、一応データの中身を軽く確認した後、レポジトリのロックを解除して、その後にレポジトリを削除します。</p>\n\n\n\n<p>ロックの解除は以下の通りです。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ncurl -H &quot;Authorization: token $GITHUB_ACCESS_TOKEN&quot; -X DELETE \\\n-H &quot;Accept: application/vnd.github.wyandotte-preview+json&quot; \\\nhttps://api.github.com/orgs/:orgname/migrations/:id/repos/:reponame/lock\n</pre>\n\n\n<p>その後、画面からレポジトリを削除します。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>Migrations API は、本来は GitHub から GitHub Enterprise への移行用に用意されているようですが、レポジトリのアーカイブ・バックアップのために使う事ができます。</p>\n\n\n\n<p>今回は、Personal Access Token の取得方法から同 API を使ったレポジトリのバックアップ方法を説明しました。</p>\n\n\n\n<p>ちなみに、調べてみませんが、これを Bitbucket とかにインポートするツールとかもあるのかもしれません。</p>\n","dateObject":"2020-03-10T23:48:00.000Z","date":"March 10, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"GitHub","slug":"github"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/03/muslumstock180802121.jpg"},"wordpress_id":1377}},"pageContext":{"id":"66fa2533-fa3e-54b0-9ed6-be7da6fa368f","nextPath":"/2020/03/03/leaking-middleware-connection-in-aws-lambda-with-java/","nextTitle":"AWS LambdaのJavaランタイムでミドルウェアのコネクションのリークでハマった件","prevPath":"/2020/03/12/display-japanese-text-properly-in-english-windows/","prevTitle":"英語環境 Windows で日本語の文字化けを防ぐ"}}}