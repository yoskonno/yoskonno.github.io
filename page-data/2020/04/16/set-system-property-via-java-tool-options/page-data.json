{"componentChunkName":"component---src-templates-post-js","path":"/2020/04/16/set-system-property-via-java-tool-options/","result":{"data":{"wordpressPost":{"id":"3f6bade2-7c93-5268-8680-eb60dd0cb0e9","title":"JAVA_TOOL_OPTIONS環境変数でAWS Lambda関数のシステムプロパティを設定する","excerpt":"<p>最近AWS Lambdaをよく使う事があり、色々知見が溜まってきました。今回はAWS Lambdaに直接関係がないトピックですが、JavaアプリケーションをLambdaで動かす時にシステムプロパティの値を変更したくなり、 [&hellip;]</p>\n","slug":"set-system-property-via-java-tool-options","content":"\n<p>最近AWS Lambdaをよく使う事があり、色々知見が溜まってきました。<br>今回はAWS Lambdaに直接関係がないトピックですが、JavaアプリケーションをLambdaで動かす時にシステムプロパティの値を変更したくなり、調べた結果 <code>JAVA_TOOL_OPTIONS</code> 環境変数で設定が可能と言う事を知ったのでメモしておきます。</p>\n\n\n\n<h2 id=\"本来はJavaの-Dオプションでアプリ実行時にシステムプロパティを指定できる\"><a href=\"https://hackmd.io/kVbN4CJzSzKr8onQGg_ftA?view#%E6%9C%AC%E6%9D%A5%E3%81%AFJava%E3%81%AE-D%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A7%E3%82%A2%E3%83%97%E3%83%AA%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%A7%E3%81%8D%E3%82%8B\"></a>本来はJavaの-Dオプションでアプリ実行時にシステムプロパティを指定できる</h2>\n\n\n\n<p>Javaアプリケーションは&nbsp;<code>java</code>&nbsp;プロセス立ち上げ時に、&nbsp;<code>-D</code>&nbsp;オプションを使う事で、コードを変更する事無くシステムプロパティを設定する事ができます。<br>例えば、とあるScalaプロジェクトでSimpleLogger (slf4jの実装) を使っているのですが、このロガーの出力レベルはシステムプロパティ&nbsp;<code>org.slf4j.simpleLogger.defaultLogLevel</code>&nbsp;で制御が可能です。</p>\n\n\n\n<p>※余談ですが<a href=\"https://github.com/bmc/grizzled-slf4j\" target=\"_blank\" rel=\"noreferrer noopener\">grizzled.slf4j</a>のLoggerトレイトが便利でおすすめです。こいつをミックスインしたクラスでは簡単にロギングが行なえます。</p>\n\n\n<pre class=\"brush: scala; title: ; notranslate\" title=\"\">\nobject MyApp extends scala.App with grizzled.slf4j.Logging {\n\n  debug(&quot;Debug message!&quot;)\n  info(&quot;Info message!&quot;)\n\n}\n</pre>\n\n\n<p>SimpleLoggerのデフォルトのレベルはINFOなので、上記アプリケーションの出力内容は以下となります:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ java -jar target/scala-2.13/my_app.jar # このプロジェクトではsbt-assemblyでjar化してる\n[main] INFO MyApp - Info message!\n</pre>\n\n\n<p> INFO MyApp &#8211; Info message!\n</p>\n\n\n\n<p>では&nbsp;<code>-D</code>&nbsp;オプションで&nbsp;<code>org.slf4j.simpleLogger.defaultLogLevel</code>&nbsp;に&nbsp;<code>DEBUG</code>&nbsp;を実行時に指定してみます。アプリケーションコードの変更およびリコンパイルはしていません:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ java -Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG -jar target/scala-2.13/my_app.jar \n[main] DEBUG MyApp - Debug message!\n[main] INFO MyApp - Info message!\n</pre>\n\n\n<p>Debugメッセージが出力されました。</p>\n\n\n\n<h2 id=\"しかしAWS-Lambdaは起動時オプションを指定できない\"><a href=\"https://hackmd.io/kVbN4CJzSzKr8onQGg_ftA?view#%E3%81%97%E3%81%8B%E3%81%97AWS-Lambda%E3%81%AF%E8%B5%B7%E5%8B%95%E6%99%82%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"></a>しかしAWS Lambdaは起動時オプションを指定できない</h2>\n\n\n\n<p>なので先程の手は使えません。しかし、ググってみるとすぐに<a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/envvars002.html\" target=\"_blank\" rel=\"noreferrer noopener\">JAVA_TOOL_OPTIONS</a>に辿り着きます。<br>これは、Javaの起動オプションを環境変数経由で設定する物で、システムプロパティ (-D) 以外にも使えます。</p>\n\n\n\n<p>セキュリティ上の理由から、この環境変数が使えない事もあるみたいですが、AWS Lambdaはサポートしています。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/ochg3pV.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-1429\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/ochg3pV.png?w=604&amp;ssl=1 604w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/ochg3pV.png?resize=300%2C21&amp;ssl=1 300w\" sizes=\"(max-width: 604px) 100vw, 604px\" data-recalc-dims=\"1\" /><figcaption>AWS Lambdaの設定画面で環境変数を指定</figcaption></figure>\n\n\n\n<p>このように設定し、起動すると無事表示する事ができました！</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/fN97MvN.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-1430\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/fN97MvN.png?w=846&amp;ssl=1 846w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/fN97MvN.png?resize=300%2C37&amp;ssl=1 300w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/fN97MvN.png?resize=768%2C95&amp;ssl=1 768w\" sizes=\"(max-width: 846px) 100vw, 846px\" data-recalc-dims=\"1\" /><figcaption>CloudWatch Logsの当該Lambdaのログ</figcaption></figure>\n\n\n\n<p>デバッグしたい時だけ有効にする事もできますし、アプリの再デプロイも不要なので大変便利ですね！</p>\n","dateObject":"2020-04-16T01:17:47.000Z","date":"April 16, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS Lambda","slug":"aws-lambda"},{"name":"Debug","slug":"debug"},{"name":"Environment Variable","slug":"environment-variable"},{"name":"java","slug":"java"},{"name":"Logging","slug":"logging"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/e307a1f39537bf408a805bf49921fe19-png.png?fit=768%2C768&ssl=1","height":768,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/e307a1f39537bf408a805bf49921fe19-png.png"},"wordpress_id":1426}},"pageContext":{"id":"3f6bade2-7c93-5268-8680-eb60dd0cb0e9","nextPath":"/2020/04/06/switching-profiles-for-aws-cli/","nextTitle":"AWS CLI のプロファイル切り替え関連","prevPath":"/2020/04/20/vagrant環境でrailsのリモートデバッグ（ブレークポイン/","prevTitle":"Vagrant環境でRailsのリモートデバッグ（ブレークポイント使用可能）"}}}