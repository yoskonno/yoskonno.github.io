{"componentChunkName":"component---src-templates-post-js","path":"/2020/04/01/introduction-aws-cli-v2-official-docker-image/","result":{"data":{"wordpressPost":{"id":"cba34b62-e2e2-5727-9f10-5be90ea4d198","title":"AWS CLI v2の公式Dockerイメージが出たみたいなので使ってみた","excerpt":"<p>既に使っている方も多くいると思いますが、先月AWS CLI v2が正式リリースされました。このバージョンではバイナリが各メジャーなOS毎に用意されていて、Pythonのインストールが不要になったので、v1の頃より使いやす [&hellip;]</p>\n","slug":"introduction-aws-cli-v2-official-docker-image","content":"\n<p>既に使っている方も多くいると思いますが、先月AWS CLI v2が<a href=\"https://aws.amazon.com/jp/blogs/news/aws-cli-v2-is-now-generally-available/\" target=\"_blank\" rel=\"noreferrer noopener\">正式リリースされました。</a>このバージョンではバイナリが各メジャーなOS毎に用意されていて、Pythonのインストールが不要になったので、v1の頃より使いやすくなったかと思います。</p>\n\n\n\n<p>それとは別につ先日の3月31日、公式からAWS CLI v2のDockerイメージの<a href=\"https://aws.amazon.com/jp/blogs/developer/aws-cli-v2-docker-image/\" target=\"_blank\" rel=\"noreferrer noopener\">紹介がありました。</a>ローカルではあまり使わないかもしれませんが、既にDockerを利用しているCI/CD環境でより簡単にAWS CLIが使えるようになったのではないでしょうか？</p>\n\n\n\n<p>今回は、早速公式のAWS CLI v2のDockerイメージを使ってみたいと思います。</p>\n\n\n\n<p>まずはversionを表示してみます:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker run --rm -it amazon/aws-cli --version\nUnable to find image 'amazon/aws-cli:latest' locally\n(初回なのでイメージをPullしてます表示がされる...)\n\naws-cli/2.0.6 Python/3.7.3 Linux/4.19.76-linuxkit botocore/2.0.0dev10\n</pre>\n\n\n<p>表示されました。<code>run</code>&nbsp;はENTRYPOINTなので&nbsp;<code>aws</code>&nbsp;コマンドを指定する必要は無いみたいです。</p>\n\n\n\n<h3 id=\"Credentialを渡す\"><a href=\"https://hackmd.io/5muJjAHtQp2jXnAxTJLv_g?view#Credential%E3%82%92%E6%B8%A1%E3%81%99\"></a>Credentialを渡す</h3>\n\n\n\n<p>さて、認証をしないままでは何もできないので、実際のAWSアカウントのCredentialを渡してみましょう。</p>\n\n\n\n<p><code>docker run</code>&nbsp;の&nbsp;<code>-v</code>&nbsp;オプションでローカルの .aws ディレクトリをコンテナの&nbsp;<code>/root/.aws</code>&nbsp;にマウントするだけです:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker run --rm -it -v ~/.aws:/root/.aws amazon/aws-cli sts get-caller-identity\n{\n    &quot;UserId&quot;: &quot;AIDAJ4I7WUG3DXXXXXXXX&quot;,\n    &quot;Account&quot;: &quot;XXX&quot;,\n    &quot;Arn&quot;: &quot;arn:aws:iam::XXX:user/issei&quot;\n}\n</pre>\n\n\n<p>無事get-caller-identityで認証者の情報が取得できました。<br>ちなみにこのマウントでは設定ファイルもマウントできて便利です。特定のprofileを使いたい時は&nbsp;<code>--profile</code>&nbsp;オプションを使ってください。</p>\n\n\n\n<h3 id=\"ファイルをS3にアップロードする\"><a href=\"https://hackmd.io/5muJjAHtQp2jXnAxTJLv_g?view#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92S3%E3%81%AB%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\"></a>ファイルをS3にアップロードする</h3>\n\n\n\n<p>S3にファイルをアップロードする場合にもマウントが必要です。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker run --rm -it -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli s3 cp /aws/README.md s3://some-nice-bucket/\nupload: ./README.md to s3://some-nice-bucket/README.md \n</pre>\n\n\n<h3 id=\"その他：他のDockerネットワーク上のLocalStackをエンドポイントとする\"><a href=\"https://hackmd.io/5muJjAHtQp2jXnAxTJLv_g?view#%E3%81%9D%E3%81%AE%E4%BB%96%EF%BC%9A%E4%BB%96%E3%81%AEDocker%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E4%B8%8A%E3%81%AELocalStack%E3%82%92%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%A8%E3%81%99%E3%82%8B\"></a>その他：他のDockerネットワーク上のLocalStackをエンドポイントとする</h3>\n\n\n\n<p>例えば、DockerComposeとかを使って特定のコンテナスタックを作っており、その中で動いているLocalStackに対してCLIを叩きたいとします。<br>その場合は、<code>docker run</code>&nbsp;のオプションでネットワークを指定すればOKです。</p>\n\n\n\n<p>例えばdocker-compose.ymlのLocalStackが以下のような定義とします:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n# ...\n\nservice:\n  # DynamoDBのモックをポート4569で動かしてる\n  localstack:\n    image: localstack/localstack\n    environment:\n      - SERVICES=dynamodb:4569\n    # ...\n\n# ...\n</pre>\n\n\n<p>このスタックのネットワーク名を&nbsp;<code>docker network</code>&nbsp;で探します:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker network ls                   \nNETWORK ID          NAME                              DRIVER              SCOPE\nxxxxxxxxxxxx        test_stack_default                bridge              local\n...\n</pre>\n\n\n<p>ネットワーク名が&nbsp;<code>test_stack_default</code>&nbsp;である場合、これをそのまま&nbsp;<code>--network</code>&nbsp;オプションに指定すればOKです:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ndocker run --rm -it -v ~/.aws:/root/.aws --network test_stack_default amazon/aws-cli --endpoint http://localstack:4569/ dynamodb list-tables\n{\n    &quot;TableNames&quot;: [\n        &quot;some-nice-dynamodb-table&quot;\n    ]\n}\n</pre>\n\n\n<p>以上、使い方の例のご紹介でした。恐らくローカルで使う機会はそんな無さそうですが、先述の通りCI/CD用途には良さそうです。</p>\n","dateObject":"2020-04-01T07:27:21.000Z","date":"April 01, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"CLI","slug":"cli"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/Screen-Shot-2020-04-01-at-16.26.28.png"},"wordpress_id":1402}},"pageContext":{"id":"cba34b62-e2e2-5727-9f10-5be90ea4d198","nextPath":"/2020/03/12/display-japanese-text-properly-in-english-windows/","nextTitle":"英語環境 Windows で日本語の文字化けを防ぐ","prevPath":"/2020/04/03/tomcat-9-and-apache-on-centos-7/","prevTitle":"CentOS 7で Tomcat 9 + Apache を動かす"}}}