{"componentChunkName":"component---src-templates-post-js","path":"/2020/08/25/underscores-in-docker-compose-service-name-makes-hostname-invalid/","result":{"data":{"wordpressPost":{"id":"124d437d-d855-57ae-97d9-45c2291b0b28","title":"docker-compose.ymlのサービス名にアンダースコアを使うと正しいインターネットホスト名ではなくなる","excerpt":"<p>以前こんな記事を書きました。 AWS CLI v2の公式Dockerイメージが出たみたいなので使ってみた ご存知の通りDocker Composeでは、以下の様にしてサービス (≒コンテナ) に名前をつける事ができ、これ [&hellip;]</p>\n","slug":"underscores-in-docker-compose-service-name-makes-hostname-invalid","content":"\n<p>以前こんな記事を書きました。</p>\n\n\n\n<ul><li class=\"\"><a href=\"https://hackmd.io/2020/04/01/introduction-aws-cli-v2-official-docker-image/\" target=\"_blank\" rel=\"noreferrer noopener\">AWS CLI v2の公式Dockerイメージが出たみたいなので使ってみた</a></li></ul>\n\n\n\n<p>ご存知の通りDocker Composeでは、以下の様にしてサービス (≒コンテナ) に名前をつける事ができ、これがコンテナ間の名前解決の際に使われるホスト名にもなりますが、今回はタイトルの通りこの仕様にハマったので解決策を記したいと思います。</p>\n\n\n\n<p>まずは以下の&nbsp;<code>docker-compose.yml</code>&nbsp;をご覧ください:</p>\n\n\n<pre class=\"brush: yaml; title: ; notranslate\" title=\"\">\nversion: '3.8'\n\nservices:\n  dynamodb_mock:\n    image: localstack/localstack:0.11.4\n    environment:\n      SERVICES: dynamodb\n</pre>\n\n\n<p>これは、DynamoDBのモックを動かすLocalStackのコンテナを&nbsp;<code>dynamodb_mock</code>&nbsp;と言う名前でDocker Compose管理化に置いています。</p>\n\n\n\n<p>※ちなみに、LocalStackはバージョン0.11.0以降では全てのサービスへ共通で&nbsp;<code>4566</code>&nbsp;ポートで接続できるようになった様です。</p>\n\n\n\n<p>この定義で <code>docker-compose -p test up</code> をし、先程紹介した記事の通り、同じnetworkを使ってこの <code>dynamodb_mock</code> をAWS CLIのエンドポイントとして指定できるか試してみたいと思います:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker run --rm -it \\\n  --network test_default \\\n  -e AWS_ACCESS_KEY_ID=dummy \\\n  -e AWS_SECRET_ACCESS_KEY=dummy \\\n  amazon/aws-cli:2.0.42 \\\n    --region us-east-1 \\\n    --endpoint http://dynamodb_mock:4566/ \\\n    dynamodb list-tables\n\nInvalid endpoint: http://dynamodb_mock:4566/\n</pre>\n\n\n<p>さて、テーブルの一覧 (未作成なので空) がJSONで返ってくる事を期待しましたが、実際には&nbsp;<code>Invalid endpoint</code>&nbsp;と言うエラーが表示されてしまいました。</p>\n\n\n\n<p>一見すると、LocalStack (アプリ自身、あるいはDockerコンテナ毎) が正しく動いていないか、&nbsp;<code>dynamodb_mock</code>&nbsp;が正しく名前解決できていないのか？と予測できますが、実際にはどちらも間違っています。</p>\n\n\n\n<p>現に、以下のコマンドで&nbsp;<code>aws-cli</code>&nbsp;のコンテナはLocalStackが動いている&nbsp;<code>dynamodb_mock</code>&nbsp;サービスの名前を解決できています:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker run --rm -it \\\n  --network test_default \\\n  --entrypoint '' \\\n  amazon/aws-cli getent hosts dynamodb_mock    \n\n172.26.0.2      dynamodb_mock\n</pre>\n\n\n<p>更に、このIPアドレスを直でエンドポイントとして渡すと正常にテーブルの一覧が返されます:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker run --rm -it \\\n  --network test_default \\\n  -e AWS_ACCESS_KEY_ID=dummy \\\n  -e AWS_SECRET_ACCESS_KEY=dummy \\\n  amazon/aws-cli:2.0.42 \\\n    --region us-east-1 \\\n    --endpoint http://172.26.0.2:4566/ \\\n    dynamodb list-tables\n\n{\n    &quot;TableNames&quot;: []\n}\n</pre>\n\n\n<h2 id=\"エラーはbotoライブラリに起因する\"><a href=\"https://hackmd.io/iYOhki0HTD-kaUOxYdws1w?view#%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AFboto%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AB%E8%B5%B7%E5%9B%A0%E3%81%99%E3%82%8B\"></a>そもそもインターネットのホスト名にアンダースコアは使えない</h2>\n\n\n\n<p>AWS CLIの <code>--debug</code> オプションを使って原因を追ってみて分かったのですが（※）、 このエラーは<a href=\"https://github.com/boto/botocore\" target=\"_blank\" rel=\"noreferrer noopener\">boto</a>が発生させているようです。</p>\n\n\n\n<p>※出力が長いので割愛します。<code>--debug</code>&nbsp;についての詳細は<a href=\"https://docs.aws.amazon.com/cli/latest/reference/\" target=\"_blank\" rel=\"noreferrer noopener\">公式ドキュメント</a>をご参照下さい</p>\n\n\n\n<p>具体的には<a rel=\"noreferrer noopener\" href=\"https://github.com/boto/botocore/blob/8c842bbcd55ebe00447bc29e7f1daa22199904fa/botocore/utils.py#L916\" target=\"_blank\">この辺り</a>で、 <code>is_valid_endpoint_url</code> の定義は<a rel=\"noreferrer noopener\" href=\"https://github.com/boto/botocore/blob/8c842bbcd55ebe00447bc29e7f1daa22199904fa/botocore/utils.py#L897-L918\" target=\"_blank\">ここ</a>にあります。<br>コードの中身をざっと見てみると、URLのホスト名は255文字以内でなくてはならなかったり、アンダースコア等の記号は使えない様になっています。<br>考えてみれば、URIの形式を定義する<a rel=\"noreferrer noopener\" href=\"https://tools.ietf.org/html/rfc3986\" target=\"_blank\">RFC 3896</a>によると、ホスト名は<a rel=\"noreferrer noopener\" href=\"https://tools.ietf.org/html/rfc1123\" target=\"_blank\">RFC 1123</a>、<a rel=\"noreferrer noopener\" href=\"https://tools.ietf.org/html/rfc952\" target=\"_blank\">RFC 952</a>に定義されるインターネットホスト名 (255文字以内、ピリオドで区切られる各 &#8220;ラベル&#8221; は63文字以内、アンダースコアが使えない等) でなくてはならない為、当然と言えば当然と言えます。</p>\n\n\n\n<h2 id=\"解決策\"><a href=\"https://hackmd.io/iYOhki0HTD-kaUOxYdws1w?view#%E8%A7%A3%E6%B1%BA%E7%AD%96\"></a>解決策</h2>\n\n\n\n<p>いくつか考えられると思います。まずは、サービス名にアンダースコアを使わない事です。これが一番シンプルな方法ですね。<br>どうしても使いたい場合、次のようにする事も可能です:</p>\n\n\n<pre class=\"brush: yaml; title: ; notranslate\" title=\"\">\nservices:\n  dynamodb_mock:\n    image: localstack/localstack:0.11.4\n    environment:\n      SERVICES: dynamodb\n    networks:\n      default:\n        aliases:\n          - dynamodb-mock\n</pre>\n\n\n<p>この様に&nbsp;<code>dynamodb-mock</code>&nbsp;として新しいエイリアスを定義しておくと、その名前で名前解決を行う事ができるようになります:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker run --rm -it \\\n  --network test_default \\\n  -e AWS_ACCESS_KEY_ID=dummy \\\n  -e AWS_SECRET_ACCESS_KEY=dummy \\\n  amazon/aws-cli:2.0.42 \\\n    --region us-east-1 \\\n    --endpoint http://dynamodb-mock:4566/ \\\n    dynamodb list-tables\n\n{\n    &quot;TableNames&quot;: []\n}\n</pre>","dateObject":"2020-08-25T01:00:00.000Z","date":"August 25, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"AWS CLI","slug":"aws-cli"},{"name":"Docker","slug":"docker"},{"name":"Docker Compose","slug":"docker-compose"},{"name":"hostname","slug":"hostname"},{"name":"RFC1123","slug":"rfc1123"},{"name":"RFC3896","slug":"rfc3896"},{"name":"RFC952","slug":"rfc952"},{"name":"URI","slug":"uri"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/08/docker-compose-button.jpg?fit=1024%2C492&ssl=1","height":492,"width":1024},"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/08/docker-compose-button.jpg?fit=768%2C369&ssl=1","height":369,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/08/docker-compose-button.jpg"},"wordpress_id":1610}},"pageContext":{"id":"124d437d-d855-57ae-97d9-45c2291b0b28","nextPath":"/2020/08/25/データベースの論理削除と物理削除/","nextTitle":"データベースの論理削除と物理削除","prevPath":"/2020/09/15/manage-aks-secrets-with-azure-key-vault/","prevTitle":"AKS上のKubernetesの秘匿情報をAzure Key Vaultで管理する方法"}}}