{"componentChunkName":"component---src-templates-post-js","path":"/2020/08/25/データベースの論理削除と物理削除/","result":{"data":{"wordpressPost":{"id":"ce721af1-5be7-537a-9242-ef8563984c15","title":"データベースの論理削除と物理削除","excerpt":"<p>最近、開発をしていてユーザーログイン情報テーブルの削除方法について議論する機会があり、自分の思考を整理するために少しその議論の過程をまとめてみることにしました。 まず現状のシステムの状態から見ていきたいと思います。 方法 [&hellip;]</p>\n","slug":"%e3%83%87%e3%83%bc%e3%82%bf%e3%83%99%e3%83%bc%e3%82%b9%e3%81%ae%e8%ab%96%e7%90%86%e5%89%8a%e9%99%a4%e3%81%a8%e7%89%a9%e7%90%86%e5%89%8a%e9%99%a4","content":"\n<p>最近、開発をしていてユーザーログイン情報テーブルの削除方法について議論する機会があり、自分の思考を整理するために少しその議論の過程をまとめてみることにしました。</p>\n\n\n\n<p>まず現状のシステムの状態から見ていきたいと思います。</p>\n\n\n\n<h2>方法１：論理削除のみ行う</h2>\n\n\n\n<p>現状はユーザーログイン情報テーブルに「削除ステータス」カラムを設けて、このステータスを変えることで論理削除を行い、レコード自体の物理削除は行わない様にしています。（他にカラムとして「メールアドレス」、「パスワード」があることを前提として話を進めます。）</p>\n\n\n\n<p>削除ステータスには「通常ユーザー状態」と「休眠ユーザー状態」があり、サイト管理者がステータスを休眠に移行するとログインが出来なくなりますが、通常ユーザーにステータスを戻すという操作をすればアカウントも復活し、通常ユーザー時に書いていたブログもそのまま復活させることが出来ます。（サイト管理者がユーザの登録・管理をするタイプのシステムです。）</p>\n\n\n\n<p>今回はユーザーログイン情報である「メールアドレス」、「パスワード」のうちのメールアドレスに関連する改修を実現するための議論について書いています。</p>\n\n\n\n<p>具体的には上記の仕様のままだと物理削除がされていないため、休眠ユーザーに移行したアカウントのメールアドレスを再利用することが出来ないという問題を抱えています。メールアドレスは主キーになっているため重複させることが出来ないためです。</p>\n\n\n\n<p>そこで以下のような仕様に変更することにしました。</p>\n\n\n\n<h2>方法２：論理削除の後、物理削除を行う</h2>\n\n\n\n<p>いきなり物理削除ができる様な仕様にしてしまうと、サイト管理者に「間違って消してしまったので戻して」と言われた場合に保守・運用側としては非常に面倒なことになるので、論理削除した後に少し時間を置いてから物理削除を行うような設計にしました。（もし削除したデータの復元を考えるなら方法１で書いたブログの復活の部分の仕組みも考える必要が出てきます。）</p>\n\n\n\n<p>具体的には、「休眠ユーザー」に移行した後、１週間くらいしたら画面のリストの対象ユーザーに「物理削除」ボタンが現れて、ここで押せばデータベースから消え去るという仕組みにしました。いきなり削除ではなくワンクッション置いて、間違いなく削除して良いユーザーであることを確認してもらってから最後の削除を行うというコンセプトです。</p>\n\n\n\n<p>今回はこのような仕組みにしましたが、理想は物理削除せずにメールアドレスの再利用が出来ることだと思います。それは以下のような設計で実現可能かもしれないのでパターンを書いておきます。</p>\n\n\n\n<h2>方法３：論理削除の後、メールアドレスをリネームする</h2>\n\n\n\n<p>画面の流れなどは方法２と同じで、「物理削除」ボタンを押した際にメールアドレスを以下のように変更することで対応して、実際の物理削除は行わないという仕様です。これであればアカウントの復元が割とし易い方なのではないかと考えています。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n変更前：\ntest@example.com\n\n変更後：\ntest@example.com.backup20201212090909\n</pre>\n\n\n<p>Railsのdeviseでこれができるかどうかについて時間があれば検証してみたいと思います。</p>\n\n\n\n<h2>方法４：レコードをバックアップしてから物理削除を行う</h2>\n\n\n\n<p>おそらく一番工数のかかる修正方法だと思います。物理削除する前に復元が必要なレコードをバックアップテーブルに全て移しておくというコンセプトです。</p>\n\n\n\n<p>usersテーブル、blogsテーブルが元々あるテーブルなら、物理削除するアカウントに関連する情報をuser_backupsテーブル、blog_backupsテーブルに移しておくといった感じの設計になります。</p>\n\n\n\n<h2>方法５：AWS BackupでバックアップされたRDSからデータを復元するバッチを作る</h2>\n\n\n\n<p>削除の際、論理削除は考えずにいきなり物理削除のみの対応とします。アカウントが消された日を記録しておく仕掛けが必要な気がします。少し面倒な仕様になりそうですが実現は出来そうです。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>どの設計が優れているかという議論も有意義だとは思いますが、コストを余りかけられない場合もあると思いますので、サイト管理者と保守・運用側の双方が幸せになれる仕様に落とし込む必要があると感じる事案だったと思います。</p>\n\n\n\n<p>他にも面白そうな修正方法があれば追記したいと思います。ではまた。</p>\n","dateObject":"2020-08-25T00:00:00.000Z","date":"August 25, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"database","slug":"database"},{"name":"RDS","slug":"rds"}],"author":{"name":"koji","slug":"koji"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/08/992551_m.jpg?fit=1024%2C683&ssl=1","height":683,"width":1024},"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/08/992551_m.jpg?fit=768%2C512&ssl=1","height":512,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2020/08/992551_m.jpg"},"wordpress_id":1602}},"pageContext":{"id":"ce721af1-5be7-537a-9242-ef8563984c15","nextPath":"/2020/08/17/lazy-collection-in-scala/","nextTitle":"Scalaのコレクションで遅延処理を行う","prevPath":"/2020/08/25/underscores-in-docker-compose-service-name-makes-hostname-invalid/","prevTitle":"docker-compose.ymlのサービス名にアンダースコアを使うと正しいインターネットホスト名ではなくなる"}}}