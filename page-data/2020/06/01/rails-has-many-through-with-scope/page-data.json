{"componentChunkName":"component---src-templates-post-js","path":"/2020/06/01/rails-has-many-through-with-scope/","result":{"data":{"wordpressPost":{"id":"b28bf91a-ca10-5de1-8945-1dc5e0fb6e0e","title":"Rails の has_many through で scope を使う","excerpt":"<p>Active Record の関連付け（アソシエーション = associtaion）は色んな機能があります。 今回はタイトル通り、has_many :through と scope を併用する方法を紹介します。 has [&hellip;]</p>\n","slug":"rails-has-many-through-with-scope","content":"\n<p>Active Record の関連付け（アソシエーション = associtaion）は色んな機能があります。 今回はタイトル通り、<code>has_many :through</code> と <code>scope</code> を併用する方法を紹介します。</p>\n\n\n\n<p><code>has_one</code>, <code>has_many</code>, <code>belongs_to</code> 辺りの違いは理解していることを前提とします。</p>\n\n\n\n<h2>has_many :through の説明</h2>\n\n\n\n<p>最初に、 <code>has_many :through</code> について説明します。Rails ガイドを見た方が早いと思うので、まずはリンクを貼っておきます。</p>\n\n\n\n<p><a href=\"https://railsguides.jp/association_basics.html#has-many-through%E9%96%A2%E9%80%A3%E4%BB%98%E3%81%91\">Active Record の関連付け &#8211; Railsガイド</a></p>\n\n\n\n<p>患者(patient)、医師(physician)、診察予約(appointment)の3つのモデルがそれぞれ</p>\n\n\n\n<ul><li>patient:appointment = 1:n</li><li>physician:appointment = 1:n</li><li>patient:physician = m:n</li></ul>\n\n\n\n<p>という関係になっています。最後の patient:physician の関係は、appointment を通して(through)の関係のため、</p>\n\n\n\n<ul><li>A physician <strong>has many</strong> patients <strong>through</strong> appointments</li><li>A patient <strong>has many</strong> physicians <strong>through</strong> appointments</li></ul>\n\n\n\n<p>という意味で <code>has_many :through</code> association と呼ばれます。</p>\n\n\n\n<h2>本題</h2>\n\n\n\n<h3>やりたいこと</h3>\n\n\n\n<p>さて、先ほどの Rails ガイドの例を少し発展させてみます。</p>\n\n\n\n<p>例えば、ある医師 (physician) の患者 (patient) のうち、現在時刻〜今日の終わりまでの appointment をもっている患者だけを取り出したいと思います。</p>\n\n\n\n<p>where 句を使うと以下の通りです。</p>\n\n\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\nphy = Physician.find 1\nnow = Time.current\nphy.patients.where(appointments: {appointment_date: now..now.end_of_day})\n</pre>\n\n\n<h3> 中間テーブルに scope を設定</h3>\n\n\n\n<p>現在時刻〜今日の終わりまでの appointment というのはよく使う条件なので、scope を設定する事にします。 <code>Appointment</code> モデルには、以下のような scope を追加します。scope 名は <code>:today</code> とでも付けておきましょう。</p>\n\n\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\nscope :today, -&gt; { now = Time.current; where(appointment_date: now..now.end_of_day) }\n</pre>\n\n\n<p>ここまでは問題無いと思います。</p>\n\n\n\n<h3>scope を使って書き換え</h3>\n\n\n\n<p>それでは先ほどのクエリーを、新たに設定した scope を使って書き直してみましょう。</p>\n\n\n\n<p>まずはダメな例から。</p>\n\n\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\nphy = Physician.find 1\nphy.patients.today # ダメ\n</pre>\n\n\n<p>何がダメかというと、<code>today</code> という scope は、patients ではなく中間テーブルである appointments に設定されているからです。</p>\n\n\n\n<p>これを解決する方法はいくつかあるようですが、私は以下のようにしました。</p>\n\n\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\nclass Physician &lt; ApplicationRecord\n  has_many :appointments\n  has_many :patients, through: :appointments\n  # 新規に以下の2行を追加\n  has_many :todays_appointments, -&gt; { today }, class_name: 'Appointment'\n  has_many :todays_patients, through: :todays_appointments\nend\n</pre>\n\n\n<p>ポイントは、中間テーブルに対する <code>has_many</code> で scope を使う事です。</p>\n\n\n\n<p>その上で以下のようにします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nphy = Physician.find 1\nphy.todays_patients # OK\n</pre>\n\n\n<h2>まとめ</h2>\n\n\n\n<p>中間テーブルを使った m:n の関係を持たせる方法の1つとして <code>has_many :through</code> association があります。その際に、中間テーブルの特定の条件に合致したものだけを子レコードとして取り出したい場合があります。</p>\n\n\n\n<p>実現方法としては、</p>\n\n\n\n<ol><li>中間テーブルに <code>scope</code> を設定し</li><li>中間テーブルに対して scope 付きの <code>has_many</code> を定義し</li><li>2で定義した <code>has_many</code> を使って、 <code>has_many :through</code> で子テーブルを取得する</li></ol>\n\n\n\n<p>という方法が簡単です。</p>\n\n\n\n<p>分かってしまえば簡単なのですが、Rails ガイドにも Stack Overflow にもそのものズバリの情報が見つからなかったので、色々試行錯誤してしまいました。参考になれば幸いです。</p>\n","dateObject":"2020-06-01T00:26:00.000Z","date":"June 01, 2020","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Ruby on Rails","slug":"ruby-on-rails"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/Ruby_On_Rails_Logo.svg_.png?fit=1024%2C387&ssl=1","height":387,"width":1024},"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/Ruby_On_Rails_Logo.svg_.png?fit=768%2C290&ssl=1","height":290,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/Ruby_On_Rails_Logo.svg_.png"},"wordpress_id":1511}},"pageContext":{"id":"b28bf91a-ca10-5de1-8945-1dc5e0fb6e0e","nextPath":"/2020/05/22/bertについて勉強したことまとめ-1-bertとは-その特徴と/","nextTitle":"BERTについて勉強したことまとめ (1) BERTとは? その特徴と解決しようとした問題、及び予備知識","prevPath":"/2020/06/02/skyway-vs-twilio-video/","prevTitle":"SkyWay vs. Twilio Video"}}}