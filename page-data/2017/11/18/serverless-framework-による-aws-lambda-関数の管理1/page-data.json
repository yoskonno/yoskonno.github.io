{"componentChunkName":"component---src-templates-post-js","path":"/2017/11/18/serverless-framework-による-aws-lambda-関数の管理1/","result":{"data":{"wordpressPost":{"id":"efc28586-2b0c-5c82-b29a-30c333318cfd","title":"Serverless Framework による AWS Lambda 関数の管理1","excerpt":"<p>はじめに Lambda 関数を簡単に管理したい AWS Lambda の適用分野は色々考えられますが、AWS 上の複数のサービスを、各種イベントをトリガーとして連携する、というのが割とポピュラーな使用例かと思います。 A [&hellip;]</p>\n","slug":"serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%861","content":"<h1>はじめに</h1>\n<h2>Lambda 関数を簡単に管理したい</h2>\n<p>AWS Lambda の適用分野は色々考えられますが、AWS 上の複数のサービスを、各種イベントをトリガーとして連携する、というのが割とポピュラーな使用例かと思います。</p>\n<p>AWS Lambda は、サーバーのプロビジョニングや管理などが不要で、プログラムも AWS Management Console 上のオンラインエディタでも編集できるため、手軽に導入できますが、その反面、適切に管理しないと様々な問題が起きることは簡単に予期できます。</p>\n<p>本記事では、Serverless Framework というものを使い、AWS Lambda 関数の定義・設定をコード化することにより（所謂 Infrastructure as Code）、煩雑になりがちな Lambda 関数を比較的簡単に管理する方法について説明します。</p>\n<p><!--more--></p>\n<h2>それ以外の方法</h2>\n<p>（本題に進みたい方は、ここは読み飛ばして OK です。）</p>\n<p>もちろん、Lambda は AWS のサービスですので、全て AWS CLI から操作できますし、原始的な方法であれば、シェルスクリプトから AWS CLI 経由で管理するという方法があります。</p>\n<p>AWS Way で本格的にやろうとすると、<a href=\"http://docs.aws.amazon.com/ja_jp/lambda/latest/dg/automating-deployment.html\" target=\"_blank\" rel=\"noopener\">こちらのページ</a>で紹介されているように AWS CodePipeline、AWS CodeBuild、AWS CloudFormation を使う事になります。</p>\n<p>ただ、このドキュメントを読んで、「お、管理が簡単になりそうだな。やってみるか」と思う人は、殆どいないのではないでしょうか。</p>\n<p>こうしたプロセスを簡単にするツールはいくつかあり、ググったところ <a href=\"https://dev.classmethod.jp/cloud/aws/sugano-026-lamvery/\" target=\"_blank\" rel=\"noopener\">Lamvery</a> というツールがありました。</p>\n<p>また、Lamvery の作者が対抗心を燃やしていた（ものの、結局対抗するのを諦めた）<a href=\"https://github.com/apex/apex\" target=\"_blank\" rel=\"noopener\">Apex</a> というのもありました。</p>\n<p>これらの2つも試したのですが、イマイチ柔軟性に欠けたり、その他の問題があったので、使うのはやめました。詳細については省略します。</p>\n<h1>Serverless Framework とは</h1>\n<p><a href=\"https://serverless.com/framework/docs/\" target=\"_blank\" rel=\"noopener\">Serverless Framework</a> （以下 Serverless と書きます）は、AWS Lambda や Azure、GCP などの同種サービスを、CLI から簡単に管理できるツールです。</p>\n<p>私の場合、AWS を使うことが多いのですが、お客様によっては Azure を使っていることも結構多いため、1つのツールで複数のインフラに対応しているというのは有り難いです。</p>\n<p>以下、特に断りが無い限りは、AWS に限定した話です。</p>\n<h2>出来ること</h2>\n<p>設定ファイル（YAML）を書くことで、以下のものを管理できます。</p>\n<ul>\n<li>Lambda 関数の設定（関数の中身は、通常通りプログラムを書きます）</li>\n<li>Lambda 関数のトリガー</li>\n<li>Lambda 関数が使う各種リソース\n<ul>\n<li>S3</li>\n<li>DynamoDB</li>\n<li>SNS Topic</li>\n<li>その他</li>\n</ul>\n</li>\n<li>IAM ロール</li>\n</ul>\n<p>また、裏側では CloudFormation を使っているのですが、Stack の作成・更新などは透過的に行われるため、通常は意識する必要がありません。</p>\n<h1>Serverless の導入</h1>\n<h2>インストール</h2>\n<p>npm を使用します。npm が入っていない人は、以下からインストールしてください。</p>\n<ul>\n<li>Windows の場合は<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">パッケージ</a>を使用します</li>\n<li>Mac の場合は、<a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> を使うのが簡単です</li>\n</ul>\n<p>npm を使って、以下のようにインストールします。</p>\n<pre><code>npm install -g serverless\n</code></pre>\n<h2>IAM グループの作成</h2>\n<p>Serverless を使って、Lambda 関数をデプロイしたり、必要なリソースを作成・管理するためには、権限が必要です。</p>\n<p>今回は、専用の IAM グループを作成し、そこに必要な権限を入れていくことにしました。必要な権限は、Serverless のこちらの <a href=\"https://github.com/serverless/serverless/issues/1439\">issue</a> で色々議論されているので、細かく管理したい方はそれを参照して下さい。</p>\n<p>参考までに、今回の我々の要件で必要だったものを以下に示します。</p>\n<p>以下の既存のポリシーと、</p>\n<ul>\n<li>AWSLambdaFullAccess</li>\n<li>AmazonS3FullAccess</li>\n<li>AWSCloudFormationReadOnlyAccess</li>\n</ul>\n<p>それに加え、以下のアクションの許可を与えました。</p>\n<ul>\n<li>cloudformation:ValidateTemplate</li>\n<li>cloudformation:Describe*</li>\n<li>cloudformation:List*</li>\n<li>cloudformation:Get*</li>\n<li>cloudformation:PreviewStackUpdate</li>\n<li>cloudformation:CreateStack</li>\n<li>cloudformation:DeleteStack</li>\n<li>cloudformation:UpdateStack</li>\n</ul>\n<p>その後、この IAM グループに、使用する IAM ユーザーを追加して下さい。</p>\n<h2>AWS CLI のインストール・設定</h2>\n<p>その他、ローカルの作業用マシンで、AWS CLI のインストールと設定を行う必要があります。詳しくは<a href=\"http://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-tutorial-cli-installation.html\">こちらのページ</a>を参照して下さい。</p>\n<h1>Service の定義</h1>\n<h2>&#8220;Service&#8221; とは</h2>\n<p>Serverless のドキュメントによれば、「プロジェクト」のようなものだそうです。最初はあまり細かいことは考えずに1つの Service を作っていき、慣れてきた段階で必要に応じて複数のサービスに分割するのが良いかなと思います。</p>\n<h2>Service の構成</h2>\n<p>最小構成としては</p>\n<ul>\n<li>myService/ ディレクトリ</li>\n<li>serverless.yml</li>\n<li>Lambda 関数のプログラム</li>\n</ul>\n<p>という形になります。serverless.yml に、必要な設定を色々書いていくことになります。</p>\n<h2>Service の作成</h2>\n<p>作成には、以下のコマンドを使用します。</p>\n<pre><code>sls create --template &lt;テンプレート&gt; --path myService\n</code></pre>\n<p>今回は、テンプレートに &#8220;aws-python3&#8221; を使用しました。それ以外に使用可能なテンプレートは、<a href=\"https://serverless.com/framework/docs/providers/aws/guide/services/\">こちらのページ</a>をご参照下さい。</p>\n<h1>各種設定</h1>\n<p>ここからは、serverless.yml に書いていく各種設定について書いていきます。</p>\n<p>最初の方で、Serverless で管理できるものは以下のようなもの、と書きましたが、それぞれについてと Service 全体の設定に分けて説明します。</p>\n<ul>\n<li>Lambda 関数の設定</li>\n<li>Lambda 関数のトリガー</li>\n<li>Lambda 関数が使う各種リソース</li>\n<li>（IAM ロール）</li>\n</ul>\n<p>serverless.yml に記載できる設定項目は、<a href=\"https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\">こちら</a>のページに網羅されていますので、こちらを参照しつつ読んでもらえると分かりやすいと思います。</p>\n<h2>全般設定</h2>\n<p>service と provider の2つのセクションに、サービスの全般的な事を記載します。</p>\n<pre><code class=\"yaml\">service:\n  name: myService\n\nprovider:\n  name: aws\n  runtime: python3.6\n  region: ap-northeast-1\n  role: arn:aws:iam::nnnnnnnnnnnn:role/Foo_role\n  stage: ${opt:stage, 'dev'}\n\n  deploymentBucket:\n    # Serverless が作成したパッケージなどがこちらのバケットに置かれる\n    # 指定しないと、ランダムな名前で勝手にバケットが生成されるはず（未確認）\n    name: my-project-lambda-deployment\n    serverSideEncryption: AES256 # when using server-side encryption\n</code></pre>\n<p>stage は、開発、ステージング、本番、のような区分ですが、詳しくは後述します。</p>\n<h2>Function: Lambda 関数の設定</h2>\n<p>Lambda 関数の設定は functions セクションに記載します。ここでは、関数の名前や各種設定のみを定義し、実際のプログラムコードは別のファイルに記載します。</p>\n<pre><code>functions:\n  my_awesome_function: # キー\n    handler: handler.my_awesome_function\n    name: my_awesome_function # 名前\n    events:\n      - xxx\n</code></pre>\n<p>ここで何点か説明します。</p>\n<p>まず、handler なのですが、先程、実際のプログラムコードは別のファイルに記載すると書きましたが、handler に指定したものが実際に使われます。</p>\n<p>例えば、この例だと handler.my_awesome_function を指定していますが、この場合は、handler.py というファイルを作成し、その中で my_awesome_function という関数を定義する必要があります。なお、ファイル名は &#8220;handler.拡張子&#8221; である必要はありません。</p>\n<p>次に、name ですが、省略も可能で、その場合はキーの値が使われますし、そうしておいた方が無難だと思います。</p>\n<p>先程の serverless.yaml のリファレンスページでは、name の例として「${self:provider.stage}-lambdaName」というように、ステージ名を関数名に含めていますが、私達のプロジェクトでもそうしようとしたところ、問題があったため、キーと同じ名前を使うようにしています。これも後述します。</p>\n<p>events に関しては次の項で説明します。</p>\n<h2>Event: Lambda 関数のトリガー</h2>\n<p>Lambda 関数のトリガーは、functions セクションの中の events サブセクションで定義します。Serverless では、様々な AWS サービスからのイベントをトリガーとして、Lambda 関数を起動することが可能です。</p>\n<p>具体的にどのようなものが使えるかは、先程の <a href=\"https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\">serverless.yml</a> のリファレンスページを参照して下さい。</p>\n<p>なお、今回のプロジェクトでは S3 へのファイル出力がトリガーとしているのですが、ここで1点注意が必要です。ここの events で &#8220;s3&#8221; を指定した場合、その S3 バケットは Serverless によって作成・管理されます。言い換えると、既存の S3 バケットを使うことは出来ません。</p>\n<p>設計思想としてそうなっているようなのですが（詳細はこちらの <a href=\"https://github.com/serverless/serverless/issues/2154\">issue</a> を参照）、実際問題それだと色々不便なので、既存の S3 バケットを使用できるようにする<a href=\"https://github.com/matt-filion/serverless-external-s3-event\">プラグイン</a>もあります。これについても後述します。</p>\n<h2>Resource: Lambda 関数が使う各種リソース</h2>\n<p>Lambda 関数が使う各種リソースは &#8220;resources&#8221; セクションに記載します。例えば、使用する S3 バケットだったり、DynamoDB のテーブルなどが相当します。ここには、CloudFormation テンプレートの文法をそのまま記載するようなので、詳細は AWS のリファレンスを参照して下さい。</p>\n<p><a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\">AWS Resource Types Reference &#8211; AWS CloudFormation</a></p>\n<h1>Lambda 関数を書く</h1>\n<p>後は、実際の処理をプログラムで書けば、大体完了です。</p>\n<pre><code class=\"python\"># handler.py\n\n# import するだけで使えるもの\nimport boto3\n# pip install が必要なものがある\nimport requests\n\n# Lambda 関数\ndef my_awesome_function(event, context):\n    greet(\"hello world!\")\n\n# 別の Lambda 関数を同じファイルに定義する事も出来る\ndef my_great_function(event, context):\n    greet(\"hello world!!!\")\n\n# 共通で使うものを関数としておくと良い\ndef greet(str)\n    print(str)\n</code></pre>\n<p>コメントに記載しましたが、注意点としては、外部のライブラリ等は、import を書くだけで使えるものと、pip install しないとだめなものがあります。</p>\n<h1>パッケージングとデプロイ</h1>\n<h2>必要な Python パッケージをインストール</h2>\n<p>少し前に書いたとおり、デフォルトで使えるようになっている Python パッケージ以外は、 pip install でインストールする必要があります。この時、普通に pip install するのではなく、Serverless の Service のディレクトリ配下に配置する必要があります。一番簡単なのは handler.py と同じディレクトリに配置する事でしょう。</p>\n<p>具体的には、以下のようにします。</p>\n<pre><code>cd /path/to/myService\npip install パッケージ名 -t .\n</code></pre>\n<p>追記。もっと良い方法がありますので、別エントリーにしました。</p>\n<p><a href=\"https://stg-engineering-wp.mobalab.net/2018/01/14/how-to-deploy-python-based-lambda-function-that-uses-packages/\">Serverless で Python のパッケージを使った Lambda 関数をデプロイ | もばらぶエンジニアブログ</a></p>\n<h2>デプロイ</h2>\n<p>ここまで来たら、以下のようにデプロイします。</p>\n<pre><code>sls deploy\n</code></pre>\n<p>このコマンドで、Python のプログラムや設定などをパッケージにして、S3 バケットにアップロードし、CloudFormation を使ってデプロイしてくれます。</p>\n<h1>それ以外のトピック</h1>\n<p>ちょっと長くなってきたので、以下のトピックは別の記事として投稿します。</p>\n<ul>\n<li>serverless.yml での変数の扱い</li>\n<li>stage について</li>\n<li>serverless-external-s3-event プラグイン</li>\n<li>その他、tips 等</li>\n</ul>\n<p>追記。第2回の記事を書きました。</p>\n<p><a href=\"https://stg-engineering-wp.mobalab.net/2017/12/12/serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%862/\">Serverless Framework による AWS Lambda 関数の管理2 | もばらぶエンジニアブログ</a></p>\n<h1>まとめ</h1>\n<p>Serverless Framework を使うと、AWS Lambda 関数や、それらが使うリソースを、比較的簡単な設定ファイルとプログラムコードに落とし込んで管理することが出来ます。AWS 公式（？）の方法に比べると圧倒的に簡単なので、ぜひ活用してみて下さい。</p>\n<p>トップの画像について。</p>\n<p>The image on the top of the page is licensed under the MIT license.</p>\n","dateObject":"2017-11-18T03:13:49.000Z","date":"November 18, 2017","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Lambda","slug":"lambda"},{"name":"Serverless","slug":"serverless"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=1024%2C441&ssl=1","height":441,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=768%2C331&ssl=1","height":331,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png"},"wordpress_id":4}},"pageContext":{"id":"efc28586-2b0c-5c82-b29a-30c333318cfd","nextPath":null,"nextTitle":null,"prevPath":"/2017/12/12/serverless-framework-による-aws-lambda-関数の管理2/","prevTitle":"Serverless Framework による AWS Lambda 関数の管理2"}}}