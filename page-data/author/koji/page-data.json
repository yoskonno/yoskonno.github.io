{"componentChunkName":"component---src-templates-author-js","path":"/author/koji","result":{"data":{"site":{"siteMetadata":{"title":"もばらぶエンジニアブログ"}},"wordpressWpUsers":{"name":"koji","authored_wordpress__POST":[{"id":"7ee6b83a-d7c9-5e95-b82b-8ce7d04ed671","title":"静的データベースと動的データベース（Spark SQLの小ネタ）","excerpt":"<p>このようなデータベースの種類を分ける概念は一般的にはないと思われますが、「Spark SQL」で開発しているとまさに動的だなぁという思いが湧いてくることが多々ありましたので記事にしてみました。（従来のRDBであるMySq [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2020-09-23T03:00:00.000Z","date":"September 23, 2020","slug":"%e9%9d%99%e7%9a%84%e3%83%87%e3%83%bc%e3%82%bf%e3%83%99%e3%83%bc%e3%82%b9%e3%81%a8%e5%8b%95%e7%9a%84%e3%83%87%e3%83%bc%e3%82%bf%e3%83%99%e3%83%bc%e3%82%b9%ef%bc%88spark-sql%e3%81%ae%e5%b0%8f%e3%83%8d","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/09/3892793_m.jpg?fit=300%2C212&ssl=1","height":212,"width":300}}}}},{"id":"ce721af1-5be7-537a-9242-ef8563984c15","title":"データベースの論理削除と物理削除","excerpt":"<p>最近、開発をしていてユーザーログイン情報テーブルの削除方法について議論する機会があり、自分の思考を整理するために少しその議論の過程をまとめてみることにしました。 まず現状のシステムの状態から見ていきたいと思います。 方法 [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2020-08-25T00:00:00.000Z","date":"August 25, 2020","slug":"%e3%83%87%e3%83%bc%e3%82%bf%e3%83%99%e3%83%bc%e3%82%b9%e3%81%ae%e8%ab%96%e7%90%86%e5%89%8a%e9%99%a4%e3%81%a8%e7%89%a9%e7%90%86%e5%89%8a%e9%99%a4","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/08/992551_m.jpg?fit=300%2C200&ssl=1","height":200,"width":300}}}}},{"id":"2971650f-7c1e-56f1-b419-a5186d577f5e","title":"Vagrant環境でRailsのリモートデバッグ（ブレークポイント使用可能）","excerpt":"<p>基本的には以下の記事の流れに沿ってインストールすれば良いのですが、ある程度インフラに精通していないと完了までに結構はまることになると思いますので、重要なポイントを記録しておきたいと思います。 Visual Studio  [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2020-04-20T00:00:00.000Z","date":"April 20, 2020","slug":"vagrant%e7%92%b0%e5%a2%83%e3%81%a7rails%e3%81%ae%e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%87%e3%83%90%e3%83%83%e3%82%b0%ef%bc%88%e3%83%96%e3%83%ac%e3%83%bc%e3%82%af%e3%83%9d%e3%82%a4%e3%83%b3","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2020/04/864457.png?fit=300%2C225&ssl=1","height":225,"width":300}}}}},{"id":"8c52aa02-6b25-5819-8696-ffc1af470330","title":"Firebaseのためのお手軽な開発環境２","excerpt":"<p>以下の記事の続きです。今回はFirebaseの認証機能を実装をすることと実際にデプロイして動くことを試してみたいと思います。 Firebase認証の有効化 Firebase Console&nbsp;にログインし、[Au [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-12-02T00:00:51.000Z","date":"December 02, 2019","slug":"firebase%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%81%8a%e6%89%8b%e8%bb%bd%e3%81%aa%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83%ef%bc%92","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-23-at-12.36.17.png?fit=300%2C141&ssl=1","height":141,"width":300}}}}},{"id":"d62186ac-9168-5177-837c-b88da5d432fb","title":"Firebaseのためのお手軽な開発環境","excerpt":"<p>Firebaseのプロトタイプを作る必要があったため、ReactからFirebaseを操作できる開発環境をdockerで作ってみました。お手軽感はかなり高いと思います。実際の開発が始まるまでにはもう少しちゃんと整備する必 [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-11-25T00:00:53.000Z","date":"November 25, 2019","slug":"firebase%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%81%8a%e6%89%8b%e8%bb%bd%e3%81%aa%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-23-at-12.36.17.png?fit=300%2C141&ssl=1","height":141,"width":300}}}}},{"id":"f8ecc913-e925-500a-b6d7-8086b9e79d43","title":"Option（Scala）の実用的な使い方 − データのマージ処理","excerpt":"<p>いまいち使いどころを理解できていなかったScalaのOptionですが、データのマージ処理を実装した際に、割と理解しやすいコードが書けたと感じましたのでざっくりとですがご紹介します。 環境 Scala 2.11.12 s [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-10-24T00:00:27.000Z","date":"October 24, 2019","slug":"option%ef%bc%88scala%ef%bc%89%e3%81%ae%e5%ae%9f%e7%94%a8%e7%9a%84%e3%81%aa%e4%bd%bf%e3%81%84%e6%96%b9-%e2%88%92-%e3%83%87%e3%83%bc%e3%82%bf%e3%81%ae%e3%83%9e%e3%83%bc%e3%82%b8%e5%87%a6%e7%90%86","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/10/Screen-Shot-2019-10-23-at-17.48.40.png?fit=300%2C53&ssl=1","height":53,"width":300}}}}},{"id":"9199e1bc-dd53-5116-b786-d8635339ae6e","title":"GUIありのWebスクレイピングを定期実行する","excerpt":"<p>GUIありのWebスクレイピングというのは、バックグラウンドではなく実際にGUIでブラウザが立ち上がって、まるでゴーストが勝手にボタンを押しているかのように自動でWeb画面が遷移していくという手法のことを指します。 オン [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-10-01T00:00:47.000Z","date":"October 01, 2019","slug":"gui%e3%81%82%e3%82%8a%e3%81%aeweb%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%e3%82%92%e5%ae%9a%e6%9c%9f%e5%ae%9f%e8%a1%8c%e3%81%99%e3%82%8b","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/title.png?fit=300%2C56&ssl=1","height":56,"width":300}}}}},{"id":"d51b43af-6ea3-5a35-8dcb-7b4d97f6bbdc","title":"AWS Lambda でWebスクレイピングできなかったサイトについて","excerpt":"<p>ちょっと前に書いた以下のWebスクレイピングの記事に関してですが、結局AWS Lambdaでは動かすことができず、EC2で妥協したサイトが２種類ほどありましたので、情報を残しておきたいと思います。 メール認証が必要なサイ [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-08-26T00:00:46.000Z","date":"August 26, 2019","slug":"aws-lambda-%e3%81%a7web%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ab%e3%81%a4%e3%81%84","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/Screen-Shot-2019-06-03-at-18.49.48.png?fit=300%2C56&ssl=1","height":56,"width":300}}}}},{"id":"583ad800-069d-56df-9e7d-6c28cd73918a","title":"React.jsのコードをTypeScript化する","excerpt":"<p>割と簡単にTypeScript化できることが分かりましたので、既存プロジェクトのReact.jsコードに適用してみました。 開発環境 laravel 5.7 react 16.2 typescript 3.3 パッケージ [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-07-01T00:00:54.000Z","date":"July 01, 2019","slug":"react-js%e3%81%ae%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92typescript%e5%8c%96%e3%81%99%e3%82%8b","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/06/d675da81e72e572605554fe791afe47b_s.jpg?fit=300%2C212&ssl=1","height":212,"width":300}}}}},{"id":"b39c5c52-ebb3-5000-ad3c-d10380c97ab9","title":"AWS Lambda上でWebスクレイピング","excerpt":"<p>AWS Lambdaは様々なリソースの制限（例えば900秒を超える処理は実行できない等）があるため、スクレイピング処理をうまく動作させるために一苦労しました。これらの制限をクリアできる処理を動作させることに限定するという [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-06-10T00:00:25.000Z","date":"June 10, 2019","slug":"aws-lambda%e4%b8%8a%e3%81%a7web%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/06/Screen-Shot-2019-06-03-at-18.49.48.png?fit=300%2C56&ssl=1","height":56,"width":300}}}}},{"id":"ad1a9b32-bd78-5e24-b34a-85aa53cecb6a","title":"Python 3.6 の環境を構築してVisual Studio Code でコーディングする","excerpt":"<p>仮想化技術を用いてサクッと開発環境を作るのが当たり前な開発現場が多くなっていると思いますが、時には開発環境がAWS上にのみ存在し、ローカルではインテリセンスのあるエディタでコードが書ければ良いという場面もあると思います。 [&hellip;]</p>\n","author":{"name":"koji","slug":"koji","avatar_urls":{"wordpress_48":"https://secure.gravatar.com/avatar/41f316e46a0b88d22a3744ea8e162222?s=48&d=mm&r=g"}},"dateObject":"2019-05-10T00:00:33.000Z","date":"May 10, 2019","slug":"python-3-6-%e3%81%ae%e7%92%b0%e5%a2%83%e3%82%92%e6%a7%8b%e7%af%89%e3%81%97%e3%81%a6visual-studio-code-%e3%81%a7%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e3%81%99%e3%82%8b","featured_media":{"media_details":{"sizes":{"medium":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/code-1084923__480.png?fit=300%2C169&ssl=1","height":169,"width":300}}}}}]}},"pageContext":{"id":"1374f02a-aebf-5533-b77e-eaffeabd329c"}}}