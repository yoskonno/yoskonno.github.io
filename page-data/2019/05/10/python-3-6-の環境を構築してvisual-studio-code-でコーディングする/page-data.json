{"componentChunkName":"component---src-templates-post-js","path":"/2019/05/10/python-3-6-の環境を構築してvisual-studio-code-でコーディングする/","result":{"data":{"wordpressPost":{"id":"ad1a9b32-bd78-5e24-b34a-85aa53cecb6a","title":"Python 3.6 の環境を構築してVisual Studio Code でコーディングする","excerpt":"<p>仮想化技術を用いてサクッと開発環境を作るのが当たり前な開発現場が多くなっていると思いますが、時には開発環境がAWS上にのみ存在し、ローカルではインテリセンスのあるエディタでコードが書ければ良いという場面もあると思います。 [&hellip;]</p>\n","slug":"python-3-6-%e3%81%ae%e7%92%b0%e5%a2%83%e3%82%92%e6%a7%8b%e7%af%89%e3%81%97%e3%81%a6visual-studio-code-%e3%81%a7%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e3%81%99%e3%82%8b","content":"\n<p>仮想化技術を用いてサクッと開発環境を作るのが当たり前な開発現場が多くなっていると思いますが、時には開発環境がAWS上にのみ存在し、ローカルではインテリセンスのあるエディタでコードが書ければ良いという場面もあると思います。今携わっているAWS上で動作するPythonバッチを作成する開発はまさにそのパターンに当てはまると思います。</p>\n\n\n\n<p>Webの開発ではDockerを用いて開発環境を構築することが多いのですが、Pythonにはvenvという仮想環境があるので、それとVisual Studio Code（以降、VSCと略します。）を組み合わせてコーディングの環境を構築してみました。</p>\n\n\n\n<h2>スペック、バージョン等</h2>\n\n\n\n<ul><li>Mac OS High Sierra</li><li>Python 3.6.8</li><li>Visual Studio Code 1.33.1</li></ul>\n\n\n\n<h2>Python 3.6 のインストール</h2>\n\n\n\n<p>以下のサイトで最新（携わっているプロジェクトに合わせる必要がため、私のバージョンは3.6.8です。）のバージョンをダウンロードして、ウィザードに従ってインストールします。</p>\n\n\n\n<p><a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></p>\n\n\n\n<h2>Visual Studio Codeのインストール</h2>\n\n\n\n<p>以下のサイトで最新のバージョンをダウンロードして、ウィザードに従ってインストールします。</p>\n\n\n\n<p><a href=\"https://code.visualstudio.com\">https://code.visualstudio.com</a></p>\n\n\n\n<p>VSCのアイコンをクリックして起動した後、コマンドパレット(Shift+command+p)に「shell command」と入力して出てくるいくつかのコマンドの中から「shell command: install &#8216;code&#8217; command in PATH」を選択して実行します。これによりコマンドラインからVSCを起動できるようになります。codeコマンドはこの後の構築手順で使用します。</p>\n\n\n\n<h2>ソースを配置</h2>\n\n\n\n<p>　今回のプロジェクトに関連するソースを以下のように配置します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n/Users/koji/dev/pj-name/src/sample_batch.py\n</pre>\n\n\n<p>VSCで上記のディレクトリpj-nameを指定してプロジェクトを開きます。起動したVSCの設定画面で設定を変更すると以下のようなVSCの設定ファイルが作成されます。このファイルの設定方法もこの後の手順で説明します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n/Users/koji/dev/pj-name/.vscode/settings.json\n</pre>\n\n\n<h2>仮想環境(venv)を構築</h2>\n\n\n\n<p>Python 3.6がインストールされていれば、python3コマンドが使用できますので、-Vオプションで確認します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ python3 -V\nPython 3.6.8\n</pre>\n\n\n<p>venvを作成する場所はとりあえず自分のユーザーのホームで良いと思います。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ cd /Users/koji\n</pre>\n\n\n<p>仮想環境を作成します。名前はvenv＋バージョン＋プロジェクト名にしました。隠しディレクトリにしたいのであれば先頭にドットを付加すると良いと思います。（.venv36pj-name）</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ python3 -m venv venv36pj-name\n</pre>\n\n\n<p>sourceコマンドで仮想環境を立ち上げます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ source venv36pj-name/bin/activate\n</pre>\n\n\n<p>仮想環境の中で各種必要なパッケージのインストールを行います。ここでインストールすることによりローカルを汚さずに済みます。freezeコマンドでまずインストール済みパッケージの確認をして、pipコマンドをアップグレードした後、目的のパッケージ（例；boto3パッケージ）をインストールします。この時点でpycodestyleなどのLinterを入れておくと良いと思います。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n(venv36pj-name) $ pip freeze\n\n(venv36pj-name) $ pip install --upgrade pip\n\n(venv36pj-name) $ pip install boto3\n\n(venv36pj-name) $ pip install pycodestyle\n</pre>\n\n\n<p>最後にこの仮想環境の中からVSCを起動するcodeコマンドを実行すれば、この仮想環境内のパッケージを取り込んだ状態でVSCが立ち上がります。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n(venv36pj-name) $ code\n</pre>\n\n\n<h2>Visual Studio Codeの設定変更</h2>\n\n\n\n<p>上記のcodeコマンドの実行を行った後、もしvenv環境とうまく連携できない場合は、以下の設定を追加します。</p>\n\n\n\n<p>/Users/koji/dev/pj-name/.vscode/settings.json をエディタで開いて、venv内のpython3コマンドを追加します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n    \"python.pythonPath\": \"/Users/koji/venv36pj-name/bin/python3\",\n    \"python.linting.pylintEnabled\": true,\n    \"python.linting.enabled\": true\n}\n</pre>\n\n\n<p>インテリセンスはMicrosoftの「ms-python.python」選択しましたが、使いやすいもので良いと思います。</p>\n\n\n\n<p>最後にコマンドパレット(Shift+command+p)に「python interpreter」と入力してコマンドを選んだ後、カレントの環境にvenv36pj-nameが指定されていれば完了です。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>簡単な設定ファイルで仮想環境をサクッと作成できますので、Dockerを使うほどではないという時にはおすすめです。</p>\n","dateObject":"2019-05-10T00:00:33.000Z","date":"May 10, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"python visual studio code","slug":"python-visual-studio-code"}],"author":{"name":"koji","slug":"koji"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/code-1084923__480.png?fit=768%2C432&ssl=1","height":432,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/code-1084923__480.png"},"wordpress_id":798}},"pageContext":{"id":"ad1a9b32-bd78-5e24-b34a-85aa53cecb6a","nextPath":"/2019/05/08/oracle提供のjavaのjdkの有償化に伴ってamazon-correttoを使ってみた/","nextTitle":"Oracle提供のJavaのJDKの有償化に伴ってAmazon Correttoを使ってみた","prevPath":"/2019/05/16/workaround-for-virtualbox-installation-failure-on-mac/","prevTitle":"macOSでVirtualBoxがインストールできない時の対処法"}}}