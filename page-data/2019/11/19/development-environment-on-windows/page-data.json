{"componentChunkName":"component---src-templates-post-js","path":"/2019/11/19/development-environment-on-windows/","result":{"data":{"wordpressPost":{"id":"cb08171c-5a16-50f0-8e49-82985cf93cb5","title":"Windows で開発環境を構築する","excerpt":"<p>Mac から Windows に乗り換えた件は前回書きました。今回は、Windows 上での開発環境構築について書いていきます。 やりたいこと web、スマホアプリの開発が主です。（それ以外の開発もありますが、今回は軽く [&hellip;]</p>\n","slug":"development-environment-on-windows","content":"\n<p>Mac から Windows に乗り換えた件は<a href=\"/2019/11/11/switch-from-mac-to-windows/\">前回</a>書きました。今回は、Windows 上での開発環境構築について書いていきます。</p>\n\n\n\n<h2>やりたいこと</h2>\n\n\n\n<p>web、スマホアプリの開発が主です。（それ以外の開発もありますが、今回は軽く触れるだけにするか、全く触れません。）</p>\n\n\n\n<p>Mac で動かしていた、主に、以下のようなものが Windows で動くと良いです。</p>\n\n\n\n<ul><li>実行環境<ul><li>Docker, docker-compose を使った、コンテナ内の環境</li><li>Vagrant と Ansible を使った、Vagrant box 内の Linux 環境</li><li>（コンテナや仮想マシンではなく）直接実行<ul><li>Node.js</li><li>sbt</li></ul></li></ul></li><li>コード書いたり<ul><li>JetBrains のツール類</li><li>Emacs</li></ul></li><li>ツール類<ul><li>Git</li><li>ssh</li><li>Ansible</li><li>Terraform</li></ul></li></ul>\n\n\n\n<h2>Windows Subsystem for Linux は神</h2>\n\n\n\n<p>Windows 上で開発を行うに当たって、Windows Subsystem for Linux （以下 WSL）を使わないというのは考えられません。WSL 上では、Linux 系の大抵のツールが動きます。</p>\n\n\n\n<p>なので、何はともあれこれをインストールしましょう。</p>\n\n\n\n<p>ちなみに、WSL 2 が現在 Windows Insider Preview 版で使えるようになっていて、来年には正式版でも使えるようになると思います。</p>\n\n\n\n<p>WSL の仕組み、WSL 1 と 2 の違いは、本題ではありませんので、ここでは扱いません。</p>\n\n\n\n<h3>インストール方法は非常に簡単</h3>\n\n\n\n<p>WSL 1 のインストール方法は、<a rel=\"noreferrer noopener\" aria-label=\"ドキュメント (opens in a new tab)\" href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\" target=\"_blank\">ドキュメント</a>に従うだけで難しいところはありませんが、一応書いておきます。</p>\n\n\n\n<p>PowerShell を管理者として実行して、以下のコマンドを入力します。</p>\n\n\n<pre class=\"brush: powershell; title: ; notranslate\" title=\"\">\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n</pre>\n\n\n<p>後は、Microsoft Store で好みのディストリビューションをインストールするだけです。詳しくない人は Ubuntu 18.04 にしておくのが無難です。</p>\n\n\n\n<h3>WSL でできること</h3>\n\n\n\n<p>上の「やりたいこと」に書いたうちの半分くらいはできてしまいます。具体的には、以下は WSL 内で、通常の Linux と同じように実行できてしまいます。</p>\n\n\n\n<ul><li>実行環境<ul><li>（コンテナや仮想マシンではなく）直接実行<ul><li>Node.js</li><li>sbt </li></ul></li></ul></li><li>ツール類<ul><li>Git</li><li>ssh</li><li>Ansible</li><li>Terraform</li></ul></li></ul>\n\n\n\n<h3>Windows Terminal とかも入れておく</h3>\n\n\n\n<p>このように便利な WSL なので、実務では当然複数起動することになります。従って、タブ型のターミナルソフトを入れておくと良いです。Mac の iTerm2 みたいなのです。</p>\n\n\n\n<p>探せばもっといいのはありそうですが、とりあえず Windows Terminal というものを入れました。機能はいまいちですが、最低限の仕事はしてくれます。</p>\n\n\n\n<p><a href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot:overviewtab\">Get Windows Terminal (Preview) &#8211; Microsoft Store</a></p>\n\n\n\n<h2>Docker 関連</h2>\n\n\n\n<h3>Windows 10 Pro 64bit 4GB メモリが必須</h3>\n\n\n\n<p>セットアップを始めるまで気づかなかったんですが、Docker Desktop を動かすには Hyper-V などが有効になっている必要があります。詳細な要件は、以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://docs.docker.com/docker-for-windows/install/\">Install Docker Desktop on Windows | Docker Documentation</a></p>\n\n\n\n<p>Windows 10 Home でも、昔の Docker Toolbox を使うって方法もあるようですが、面倒そうなので、今回はその方法は使いません。</p>\n\n\n\n<p>私の PC も Windows 10 Home だったので、Pro を購入しました。64bit, 4GBメモリなどの要件はクリアしているため問題ありませんでした。</p>\n\n\n\n<h3>Windows ネイティブ環境 or WSL</h3>\n\n\n\n<p>Windows で Docker 関連を動かす場合、普通の Windows ネイティブ環境で動かすことも出来ますが、今回は WSL からも使えるようにします。他の Linux 系ツール類を WSL 内で動かすことが多そうなので、WSL 内で作業が完結する方が便利というのが理由です。</p>\n\n\n\n<h3>Docker を WSL で動かすためのセットアップ方法</h3>\n\n\n\n<p>Docker を WSL で動かす方法は以下のサイトに詳しくまとまっていて、基本的にはその通りにやれば良いだけです。</p>\n\n\n\n<p><a href=\"https://nickjanetakis.com/blog/setting-up-docker-for-windows-and-wsl-to-work-flawlessly\">Setting Up Docker for Windows and WSL to Work Flawlessly — Nick Janetakis</a></p>\n\n\n\n<p>それだけだとあんまりなので、簡単に手順をまとめておきます。</p>\n\n\n\n<ol><li>Docker for Windows を普通に Windows 上でインストールする<ul><li>手順: <a href=\"https://docs.docker.com/docker-for-windows/install/\">Install Docker Desktop on Windows | Docker Documentation</a></li></ul></li><li>Docker for Windows の設定で &#8220;Expose daemon on tcp://localhost:2375 without TLS&#8221; にチェックを入れる</li><li>WSL 内で Docker と Docker compose をインストールする <ul><li>手順: <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">Get Docker Engine &#8211; Community for Ubuntu | Docker Documentation</a></li><li>手順: <a href=\"https://docs.docker.com/compose/install/\">Install Docker Compose | Docker Documentation</a></li></ul></li><li>WSL 内の Docker が、Docker for Windows の Docker daemon につなぎにいくように環境変数を設定する<ul><li><code>export DOCKER_HOST=tcp://localhost:2375</code></li></ul></li><li>WSL が Windows のドライブをマウントする場所を <code>/mnt</code> ではなく <code>/</code> に変更する（Cドライブは <code>/mnt/c</code> ではなく <code>/c</code> にマウントされる）</li><li>環境によってはここまでで動かない場合がある（というか多そうな）ので、その他、細かい作業をいくつか</li></ol>\n\n\n\n<h3>他の方法</h3>\n\n\n\n<p>ネットで &#8220;Docker WSL&#8221; で検索するといろいろなページが見つかると思いますが、Docker を WSL で動かすにはいくつか方法があるようです。以下のような方は、本ページではなく他サイトのページを参考にしてください。</p>\n\n\n\n<ul><li>Windows 10 Home を使っている（Docker for Windows がインストールできない）</li><li>何らかの理由で、VM 上で Docker を動かしたい </li><li>WSL2 を使っている</li></ul>\n\n\n\n<h3>トラブルシューティング</h3>\n\n\n\n<h4>ファイアウォールに阻まれる</h4>\n\n\n\n<p>ファイアウォールが悪さをしている場合に、以下のようなメッセージがでます。</p>\n\n\n\n<p><a href=\"https://success.docker.com/article/error-a-firewall-is-blocking-file-sharing-between-windows-and-the-containers\">Docker &#8211; Error: A firewall is blocking file sharing between Windows and the containers</a></p>\n\n\n\n<p>Windows ファイアウォールや、セキュリティソフトのファイアウォールの設定を以下のように変更して下さい。</p>\n\n\n\n<ul><li>以下のポートを開ける<ul><li>UDP 137 と 138</li><li>TCP 139 と 445</li></ul></li><li>接続元は 10.0.75.1 と 10.0.75.2</li></ul>\n\n\n\n<h4>ネットワークプロファイルの制限</h4>\n\n\n\n<p>Windows のネットワークが「パブリック」になっていると、いろいろな制限があります。Docker のネットワーク・インターフェースを「プライベート」へ変更すると解決します。</p>\n\n\n\n<p>変更するには、管理者権限で立ち上げた PowerShell で以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: powershell; title: ; notranslate\" title=\"\">\nSet-NetConnectionProfile -interfacealias &quot;vEthernet (DockerNAT)&quot; -NetworkCategory Private\n</pre>\n\n\n<p>以下の StackOverflow のスレッドを参考にしました。</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/posts/43904051/edit\">Settings to Windows Firewall to allow Docker for Windows to share drive &#8211; Stack Overflow</a></p>\n\n\n\n<h4>一度はうまくいった共有ドライブ設定が動かなくなった</h4>\n\n\n\n<p>マシンを再起動した後とかに、上の方で設定した共有ドライブの設定がうまく動かなくなっている場合があります。その場合は、Docker Desktop の共有ドライブの設定のところで「Reset Credentials」をクリックするとうまくいく場合があります。以下の SO のスレッドを参考にしました。</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/45972812/are-you-trying-to-mount-a-directory-onto-a-file-or-vice-versa/49439974#49439974\">docker &#8211; Are you trying to mount a directory onto a file (or vice-versa)? &#8211; Stack Overflow</a></p>\n\n\n\n<h2>Vagrant を使うのは面倒</h2>\n\n\n\n<p>Docker が動くようになったので、次に Vagrant について書きます。結論から先に書くと、いろいろ面倒なので、Vagrant を使う場合は以前の MBP を使おうかなと思っています。</p>\n\n\n\n<h3>Hyper-V と VirtualBox の併用は出来ない</h3>\n\n\n\n<p>開発者が Mac の場合、Vagrant + VirtualBox で作った開発環境は結構多いかと思います。Windows で同じようなことをやろうとした場合に、 Hyper-V と VirtualBox の併用は出来ないため、 結論から言うと、 以下のどちらかのやり方をとるしかありません。</p>\n\n\n\n<ul><li>Hyper-V を無効にして、Vagrant + VirtualBox を使う<ul><li>Docker が使えない</li></ul></li><li>Vagrant の Hyper-V provider を使う</li></ul>\n\n\n\n<p>前者は機能的には問題ないものの、デメリットとしては、Hyper-V の有効化・無効化のためには PC を再起動する必要があるということです。つまり、Docker と VirtualBox は両方同時に起動することが出来ません。</p>\n\n\n\n<p>例えば、プロジェクトAでは Docker で開発環境を作っており、プロジェクトBでは Vagrant で開発環境を作っているというときに、2つの開発環境を同時に動かすことが出来ません。</p>\n\n\n\n<p>後者の制限事項は、以下の Vagrant のドキュメントに記載されています。</p>\n\n\n\n<p><a href=\"https://www.vagrantup.com/docs/hyperv/limitations.html\">Limitations &#8211; Hyper-V Provider &#8211; Vagrant by HashiCorp</a></p>\n\n\n\n<p>また、後者のそれ以外のデメリットとして、Hyper-V provider に対応していない Vagrant box があるということも挙げておきます。</p>\n\n\n\n<h3>WSL での Vagrant の使い方</h3>\n\n\n\n<p>WSL 上で Vagrant を使う手順を簡単にまとめておきます。</p>\n\n\n\n<ol><li>Windows 上で VirtualBox をインストールする</li><li>WSL 上に Vagrant をインストールする</li><li>WSL 上で環境変数を設定する<ul><li><code>export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS=\"1\"</code></li><li><code>export PATH=\"$PATH:/c/Program Files/Oracle/VirtualBox\"</code></li></ul></li><li>Hyper-V を無効にする</li></ol>\n\n\n\n<h3>制限事項</h3>\n\n\n\n<h4>NFS が使えない</h4>\n\n\n\n<p>Windows では NFS がサポートされていません。上の手順のように Vagrant を WSL 内で使う場合も、Windows ネイティブ環境で Vagrant を使う場合でも、いずれの場合も Vagrant のファイル共有に NFS が使えません。使おうとすると以下のエラーが出ます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nBringing machine 'default' up with 'virtualbox' provider...\nIt appears your machine doesn't support NFS, or there is not an\nadapter to enable NFS on this machine for Vagrant. Please verify\nthat `nfsd` is installed on your machine, and try again. If you're\non Windows, NFS isn't supported. If the problem persists, please\ncontact Vagrant support.\n</pre>\n\n\n<h4>Hyper-V プロバイダに対応してない Vagrant box がある</h4>\n\n\n\n<p>HashiCorp が提供している Vagrant box は、VirtualBox, Hyper-V の両方に対応していると思いますが、他のベンダーなどが提供しているものだと VirtualBox にしか対応していないものがあります。その場合、以下のようなエラーが出ます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvagrant up --provider=hyperv\nBringing machine 'default' up with 'hyperv' provider...\n==&gt; default: Verifying Hyper-V is enabled...\n==&gt; default: Verifying Hyper-V is accessible...\n==&gt; default: Box 'bento/centos-6.7' could not be found. Attempting to find and install...\n    default: Box Provider: hyperv\n    default: Box Version: &gt;= 0\n==&gt; default: Loading metadata for box 'bento/centos-6.7'\n    default: URL: https://vagrantcloud.com/bento/centos-6.7\nThe box you're attempting to add doesn't support the provider\nyou requested. Please find an alternate box or use an alternate\nprovider. Double-check your requested provider to verify you didn't\nsimply misspell it.\n\nIf you're adding a box from HashiCorp's Vagrant Cloud, make sure the box is\nreleased.\n\nName: bento/centos-6.7\nAddress: https://vagrantcloud.com/bento/centos-6.7\nRequested provider: [:hyperv]\n</pre>\n\n\n<h3>個人的な結論としては、Vagrant の環境が必要な時は MBP を使うようにした</h3>\n\n\n\n<p>さすがに、いろいろ制約がありすぎなので、個人的には Vagrant が必要なプロジェクトは引き続き Mac で開発を進めようと思います。</p>\n\n\n\n<h2>その他、開発環境</h2>\n\n\n\n<h3>JetBrains 製ツールは Windows で問題なし</h3>\n\n\n\n<p>IntelliJ などは、Windows でも全く問題なく動きます。</p>\n\n\n\n<p>プロジェクトのファイルは Windows の通常のファイルシステム内に配置して、それを WSL からアクセスすることで、WSL 環境と問題なく併用できます。</p>\n\n\n\n<p>WSL から Windows のファイルシステムにアクセスするには、デフォルトだと <code>/mnt/ドライブ名</code> ですが、上の方で書いたとおり Docker のセットアップの際に設定変更したので、<code>/ドライブ名</code> でアクセスします。</p>\n\n\n\n<h3>Emacs</h3>\n\n\n\n<p>古参ユーザーであれば、テキストエディタとして Emacs を使うかと思います。</p>\n\n\n\n<p>Windows ユーザーは以下から取得できます。私の場合は、MinGW64 + MSYS2 を入れて、その上で emacs をインストールしました。詳しくは以下のページを参照してください。</p>\n\n\n\n<p><a href=\"https://www.gnu.org/software/emacs/download.html\">GNU Emacs download &#8211; GNU Project</a></p>\n\n\n\n<p>設定に関しては別エントリーにしようと思いますが、Mac の時と比べて、フォントの設定を少し変えたくらいです。</p>\n\n\n\n<h3>フォント</h3>\n\n\n\n<p>Emacs のところを書いていて思い出したのですが、（私はあまりこだわらないのですが、）プログラマー向けに見やすいフォントがいろいろあるようなので、それをインストールしました。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>（かなり長くなって疲れました。）</p>\n\n\n\n<p>正直、Mac の方が開発環境構築は楽だなと思いました。ただ、Windows マシンの方が比較的安いですし、セットアップにいろいろな知識が求められるので、勉強になるような気がします。</p>\n\n\n\n<p>今回は触れていませんが、WSL2 は WSL1 と仕組みが大きく違うので、WSL2 が普通のユーザーにも使えるようになったら、新たに記事にしようと思います。</p>\n","dateObject":"2019-11-19T01:13:06.000Z","date":"November 19, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":null,"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/microsoft-80660_1280.png?fit=1024%2C1024&ssl=1","height":1024,"width":1024},"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/microsoft-80660_1280.png?fit=768%2C768&ssl=1","height":768,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/microsoft-80660_1280.png"},"wordpress_id":1230}},"pageContext":{"id":"cb08171c-5a16-50f0-8e49-82985cf93cb5","nextPath":"/2019/11/18/replace-google-wifi-with-tp-link-archer-a10/","nextTitle":"Google Wifiを1ヶ月使ってやめた話と乗り換え先","prevPath":"/2019/11/25/firebaseのためのお手軽な開発環境/","prevTitle":"Firebaseのためのお手軽な開発環境"}}}