{"componentChunkName":"component---src-templates-post-js","path":"/2019/11/25/firebaseのためのお手軽な開発環境/","result":{"data":{"wordpressPost":{"id":"d62186ac-9168-5177-837c-b88da5d432fb","title":"Firebaseのためのお手軽な開発環境","excerpt":"<p>Firebaseのプロトタイプを作る必要があったため、ReactからFirebaseを操作できる開発環境をdockerで作ってみました。お手軽感はかなり高いと思います。実際の開発が始まるまでにはもう少しちゃんと整備する必 [&hellip;]</p>\n","slug":"firebase%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%81%8a%e6%89%8b%e8%bb%bd%e3%81%aa%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83","content":"\n<p>Firebaseのプロトタイプを作る必要があったため、ReactからFirebaseを操作できる開発環境をdockerで作ってみました。お手軽感はかなり高いと思います。実際の開発が始まるまでにはもう少しちゃんと整備する必要がありそうです。</p>\n\n\n\n<h2>docker関連のファイルを配置</h2>\n\n\n\n<p>以下のようなファイル構成にします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n/Users/koji/dev/sapmle-app\n                 ├ docker-compose.yml\n                 ├ Dockerfile\n                 └ package.json\n</pre>\n\n\n<p>docker-compose.ymlは以下のような感じで、はじめはcommandの部分をコメントにしておきます。Reactのプロジェクトを作成した後に有効化すればwebサーバーが自動で立ち上がるので便利です。</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nversion: '3'\nservices:\n  web:\n    build: .\n#    command: yarn start\n    container_name: web\n    ports:\n      - &quot;127.0.0.1:3000:3000&quot;\n      - &quot;127.0.0.1:5000:5000&quot;\n      - &quot;127.0.0.1:9005:9005&quot;\n    stdin_open: true\n    tty: true\n    volumes:\n      - .:/myapp\n</pre>\n\n\n<p>Dockerfileは以下のような感じです。&amp;&amp;がエスケープされてしまうため、全角の＆＆に置き換えてありますので、コピペする場合はご注意を！</p>\n\n\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nFROM ubuntu:18.04\nRUN apt-get update -qq ＆＆ \n    apt-get install -y yarn curl gnupg2 npm nodejs\n\n# yarnが失敗する問題への対応\nRUN curl -SL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - ＆＆ \n    echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | tee /etc/apt/sources.list.d/yarn.list ＆＆ \n    apt-get update -qq ＆＆ \n    apt-get install -y yarn\n\n# Firebaseなどのインストール\nRUN yarn add typescript @types/node @types/react @types/react-dom @types/jest \n    react-firebaseui firebase @types/firebase \\\n    mobx mobx-react\n\nRUN npm install -g firebase-tools\n\n# nodejsのバージョンを上げる\nRUN npm install n -g ＆＆ n stable ＆＆ apt purge -y nodejs npm\n\nRUN mkdir /myapp\nWORKDIR /myapp\n\nADD . .\n</pre>\n\n\n<p>package.jsonは空にしておきます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n}\n</pre>\n\n\n<h2>Reactのプロジェクトを作成</h2>\n\n\n\n<p>dockerを立ち上げます。「Attaching to web」が出れば成功です。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker-compose build\n$ docker-compose up\n\nStarting web ... done\nAttaching to web\n</pre>\n\n\n<p>上記のwebコンテナにコンソールでログインします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker exec -it web /bin/bash\nroot@123:/myapp# ls\n\nDockerfile  docker-compose.yml  package.json\n</pre>\n\n\n<p>Reactの雛形を作成しますが、以下のようにサブディレクトリにプロジェクトが出来てしまうため、手動で親のsapmle-appディレクトリにコピーすればOKです。ファイルは全て上書きします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nroot@123:/myapp# yarn create react-app sample-app --typescript\nroot@123:/myapp# ls\n\nDockerfile  docker-compose.yml  package.json  sample-app\n\nroot@123:/myapp# cp -rf sample-app/* /myapp/\n</pre>\n\n\n<p>コピー後は以下のようになるはずです。子のsapmle-appディレクトリは消してしまいましょう。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nroot@123:/myapp# ls\n\nDockerfile  docker-compose.yml  package.json  sample-app  tsconfig.json\nREADME.md   node_modules        public        src         yarn.lock\n\nroot@123:/myapp# rm -rf sample-app\n</pre>\n\n\n<p>ここまで出来たらソースをGitに登録できると思います。</p>\n\n\n\n<h2>Reactのサンプルのページを表示</h2>\n\n\n\n<p>docker関連のファイルを再修正する場合はコンテナを落とします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker-compose stop\n\nStopping web ...\nweb    | root@123:/myapp# exit\nStopping web ... done\n</pre>\n\n\n<p>docker-compose.ymlのcommandの部分を有効にします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n#    command: yarn start\n\n↓↓↓↓\n\n    command: yarn start\n</pre>\n\n\n<p>コンテナを再起動します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ docker-compose up\n\nCompiled successfully!\nweb    |\nweb    | You can now view sample-app in the browser.\nweb    |\nweb    |   Local:            http://localhost:3000/\nweb    |   On Your Network:  http://192.168.0.2:3000/\nweb    |\nweb    | Note that the development build is not optimized.\nweb    | To create a production build, use yarn build.\nweb    |\n</pre>\n\n\n<p>ブラウザでhttp://localhost:3000/を開きます。以下の画面が出れば成功です。</p>\n\n\n\n<figure class=\"wp-block-gallery columns-1 is-cropped\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img src=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-22-at-12.27.20.png?resize=1024%2C703&#038;ssl=1\" alt=\"\" data-id=\"1259\" data-link=\"https://stg-engineering-wp.mobalab.net/screen-shot-2019-11-22-at-12-27-20/\" class=\"wp-image-1259\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-22-at-12.27.20.png?resize=1024%2C703&amp;ssl=1 1024w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-22-at-12.27.20.png?resize=300%2C206&amp;ssl=1 300w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-22-at-12.27.20.png?resize=768%2C527&amp;ssl=1 768w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-22-at-12.27.20.png?w=1734&amp;ssl=1 1734w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" data-recalc-dims=\"1\" /></figure></li></ul></figure>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>以下の記事等を参考にFirebaseの実装を進めますが、その過程も記事にしようと思います。ではまた。</p>\n\n\n\n<p>参考：https://qiita.com/magaming/items/6ee5318c581d34c4c932</p>\n\n\n\n<p>以下に続く。。。</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-もばらぶエンジニアブログ\"><div class=\"wp-block-embed__wrapper\">\n<div class=\"oceanwp-oembed-wrap clr\"><blockquote class=\"wp-embedded-content\" data-secret=\"qywqLEXcY8\"><a href=\"https://stg-engineering-wp.mobalab.net/2019/12/02/firebase%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%81%8a%e6%89%8b%e8%bb%bd%e3%81%aa%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83%ef%bc%92/\">Firebaseのためのお手軽な開発環境２</a></blockquote><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Firebaseのためのお手軽な開発環境２&#8221; &#8212; もばらぶエンジニアブログ\" src=\"https://stg-engineering-wp.mobalab.net/2019/12/02/firebase%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae%e3%81%8a%e6%89%8b%e8%bb%bd%e3%81%aa%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83%ef%bc%92/embed/#?secret=qywqLEXcY8\" data-secret=\"qywqLEXcY8\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></div>\n</div></figure>\n","dateObject":"2019-11-25T00:00:53.000Z","date":"November 25, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Docker","slug":"docker"},{"name":"Firebase","slug":"firebase"},{"name":"MacBook","slug":"macbook"},{"name":"React","slug":"react"},{"name":"Typescript","slug":"typescript"},{"name":"Ubuntu","slug":"ubuntu"}],"author":{"name":"koji","slug":"koji"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-23-at-12.36.17.png?fit=1024%2C482&ssl=1","height":482,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-23-at-12.36.17.png?fit=768%2C361&ssl=1","height":361,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/Screen-Shot-2019-11-23-at-12.36.17.png"},"wordpress_id":1254}},"pageContext":{"id":"d62186ac-9168-5177-837c-b88da5d432fb","nextPath":"/2019/11/19/development-environment-on-windows/","nextTitle":"Windows で開発環境を構築する","prevPath":"/2019/11/28/set-up-jupyterhub/","prevTitle":"JupyterHub のセットアップ"}}}