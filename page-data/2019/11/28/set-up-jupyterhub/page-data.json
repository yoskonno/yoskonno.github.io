{"componentChunkName":"component---src-templates-post-js","path":"/2019/11/28/set-up-jupyterhub/","result":{"data":{"wordpressPost":{"id":"67e67a0f-664a-5941-abce-9980480ad8d2","title":"JupyterHub のセットアップ","excerpt":"<p>JupyterHub は、名前からある程度想像つくとは思いますが、大雑把に言って Jupyter Notebook が複数人で使えるような環境です。 Project Jupyter | JupyterHub 今流行りの  [&hellip;]</p>\n","slug":"set-up-jupyterhub","content":"\n<p>JupyterHub は、名前からある程度想像つくとは思いますが、大雑把に言って Jupyter Notebook が複数人で使えるような環境です。</p>\n\n\n\n<p><a href=\"https://jupyter.org/hub\">Project Jupyter | JupyterHub</a></p>\n\n\n\n<p>今流行りの Kubernetes を作って、大規模環境にインストールすることも出来ますが、今回は1台のマシンに JupyterHub をインストールして複数人で使えるようにしてみます。</p>\n\n\n\n<h2>やりたいこと</h2>\n\n\n\n<p>やりたいことは以下の通りです。</p>\n\n\n\n<ul><li>社内メンバー複数人で1台のマシンを使い回す<ul><li>（ゲーム用の）GPU が載った PC が1台余っていたので</li></ul></li><li>主に機械学習の勉強、簡単なプロジェクト用<ul><li>お客様向けの本格的なプロジェクトの場合は、環境をお客様に用意していただく事が殆どのため</li></ul></li><li>基本的には、ブラウザ上で機械学習の作業を完結させる</li></ul>\n\n\n\n<h2>やることの概要</h2>\n\n\n\n<p>今回以下の事を行いましたので、順に説明していきます。</p>\n\n\n\n<ul><li>JupyterHub のインストール・設定</li><li>Let&#8217;s Encrypt を使って、SSL 化する</li><li>実際に使ってみる</li></ul>\n\n\n\n<p>環境は以下の通りです。</p>\n\n\n\n<ul><li>Ubuntu 18.04</li><li>GeForce GTX 1080 Ti</li></ul>\n\n\n\n<h2>JupyterHub のインストール・設定</h2>\n\n\n\n<p>JupyterHub を1台のマシンにインストールする構成を The Littlest JupyterHub (TLJH) と呼ぶようですが、セットアップ方法は以下のページにまとまっています。</p>\n\n\n\n<p><a href=\"https://tljh.jupyter.org/en/latest/install/custom-server.html\">Installing on your own server — The Littlest JupyterHub v0.1 documentation</a></p>\n\n\n\n<h3>インストール</h3>\n\n\n\n<p>以下の通りインストールします。コマンドラインで管理者ユーザーのユーザー名を指定します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo apt install python3 python3-dev git curl\ncurl https://raw.githubusercontent.com/jupyterhub/the-littlest-jupyterhub/master/bootstrap/bootstrap.py | sudo -E python3 - --admin &lt;admin-user-name&gt;\n</pre>\n\n\n<h3>ユーザー管理</h3>\n\n\n\n<p>管理者ユーザーは、前項の通りインストール時に指定しましたが、それ以外のユーザーはどのように管理されているのでしょうか。</p>\n\n\n\n<p>以下のドキュメントに記載の通り、デフォルトでは PAMAuthenticator というのが使われており、その名の通り認証に PAM が使われます。ローカル（Linux 上）に存在するユーザーであればログイン可能です。</p>\n\n\n\n<p><a href=\"https://jupyterhub.readthedocs.io/en/stable/reference/authenticators.html#authenticators\">Authenticators — JupyterHub 1.0.0 documentation</a></p>\n\n\n\n<p>OAuth など、それ以外の認証方式も選ぶことが出来ます。主なものは以下のページに記載があります。</p>\n\n\n\n<p><a href=\"https://github.com/jupyterhub/jupyterhub/wiki/Authenticators\">Authenticators · jupyterhub/jupyterhub Wiki</a></p>\n\n\n\n<h3>設定変更及びスタンドアロンでの起動</h3>\n\n\n\n<p>JupyterHub の設定を変更するには、以下のコマンドでデフォルトの設定ファイルを出力します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\njupyterhub --generate-config\n</pre>\n\n\n<p>実行したディレクトリに <code>jupyterhub_config.py</code> というファイルが出来ていると思いますので、 <code>/etc/jupyterhub/</code> というディレクトリを作ってそこに入れると良いと思います。</p>\n\n\n\n<p>JupyterHub をスタンドアロンで動かすには、以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\njupyterhub -f /etc/jupyterhub/jupyterhub_config.py\n</pre>\n\n\n<h3>DockerSpawner を使うように設定</h3>\n\n\n\n<p>JupyterHub で各ユーザーが作成した notebook は、JupyterHub の &#8220;spawner&#8221; が新たなプロセス等を起動して、そこで実行されます。</p>\n\n\n\n<p>spawner の種類には色々あるのですが、今回は DockerSpawner を使用します。DockerSpawner は、各ユーザーの notebook 環境を Docker コンテナとして起動します。そして、少しややこしいのですが、DockerSpawner にも3種類あって、今回はそのうちの SystemUserSpawner というものを使用します。</p>\n\n\n\n<p>インストール方法などは、以下のページを参照して下さい。</p>\n\n\n\n<p><a href=\"https://github.com/jupyterhub/dockerspawner\">jupyterhub/dockerspawner: Spawns JupyterHub single user servers in Docker containers</a></p>\n\n\n\n<p><code>dockerspawner.DockerSpawner</code> と <code>dockerspawner.SystemUserSpawner</code> の違いがドキュメントだと分かりにくいのですが、前者はどの JupyterHub ユーザーに対しても同じ環境でコンテナを起動するのに対して、後者は各システムユーザー（Linux ユーザー）の権限・環境でコンテナを起動します。</p>\n\n\n\n<p>前述の通り、今回は PAMAuthenticator を使っていますので、JupyterHub のユーザー = システムユーザーです。従って、<code>SystemUserSpawner</code> を使う事にしました。</p>\n\n\n\n<h3>自動起動するように変更</h3>\n\n\n\n<p>ここまでで、設定は大体完了です。このままだと JupyterHub の起動をコマンドラインで毎回やらなければいけなくて面倒なので、systemd に登録して <code>service</code> コマンドで起動できるようにします。</p>\n\n\n\n<p>以下のようなファイルを <code>/etc/systemd/system/jupyterhub.service</code> として作成することで、他のサーバープロセスなどのように <code>service jupyterhub start</code> で起動できるようになります。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n[Unit]\nDescription=Jupyterhub\nAfter=syslog.target network.target\n\n[Service]\nUser=root\nExecStart=/usr/local/bin/jupyterhub -f /etc/jupyterhub/jupyterhub_config.py --port 任意のポート --ip 0.0.0.0\n\n[Install]\nWantedBy=multi-user.target\n</pre>\n\n\n<h2>Let&#8217;s Encrypt を使って SSL 化</h2>\n\n\n\n<h3>概要</h3>\n\n\n\n<p>ここまでで、http://ホスト名:ポート番号 で JupyterHub にアクセス出来るようになりましたが、ログインパスワードなどが平文で流れるのは抵抗があるため、サイトを SSL 化します。</p>\n\n\n\n<p>いくつか方法はあると思いますが、今回の JupyterHub は主に勉強用のためなので、Let&#8217;s Encrypt を使って無料の証明書を取得します。また、Let&#8217;s Encrypt の証明書インストール方法にもいくつかありますが、今回は Certbot を使用します。</p>\n\n\n\n<p><a href=\"https://certbot.eff.org/\">Certbot</a></p>\n\n\n\n<h3>インストール</h3>\n\n\n\n<p>以下のドキュメントにまずは目を通します。</p>\n\n\n\n<ul><li><a href=\"https://jupyterhub.readthedocs.io/en/stable/getting-started/security-basics.html\">Security settings — JupyterHub 1.0.0 documentation</a><ul><li>公式ドキュメントにあるJupyterHub + Let&#8217;s Encrypt のセットアップ方法</li></ul></li><li><a href=\"https://certbot.eff.org/lets-encrypt/ubuntubionic-other\">Certbot &#8211; Ubuntubionic Other</a><ul><li>Certbot のセットアップ方法。OS、web サーバー別にページが分かれている</li><li>今回は、Ubuntu 18.04 + (Apache, nginx 等では無い)その他の web サーバー</li></ul></li></ul>\n\n\n\n<p>インストール手順は以下の通りです。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo apt-get update\nsudo apt-get install software-properties-common\nsudo add-apt-repository universe\nsudo add-apt-repository ppa:certbot/certbot\nsudo apt-get update\n\nsudo apt-get install certbot\n\nsudo certbot certonly --standalone\n</pre>\n\n\n<h3>証明書の更新</h3>\n\n\n\n<p>Let&#8217;s Encrypt の証明書は有効期間が90日間ですが、上のインストール処理を行う事で、更新処理の systemd timer もインストールされます。興味のある方は以下のファイルを覗いてみて下さい。</p>\n\n\n\n<ul><li><code>/lib/systemd/system/certbot.timer</code></li><li><code>/lib/systemd/system/certbot.service</code></li></ul>\n\n\n\n<p>更新処理が正しく動くか（設定が正しいか）を確認するために、以下のコマンドで dry run 処理を行えますので、一度は確認すると良いと思います。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo certbot renew --dry-run\n</pre>\n\n\n<h3>設定</h3>\n\n\n\n<p><code>jupyterhub_config.py</code> に以下のように記載します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nc.JupyterHub.ssl_cert = '/etc/letsencrypt/live/{mydomain.tld}/fullchain.pem'\nc.JupyterHub.ssl_key = '/etc/letsencrypt/live/{mydomain.tld}/privkey.pem'\n</pre>\n\n\n<p><code>ssl_cert</code> の方に <code>fullchain.pem</code> を、 <code>ssl_key</code> の方に <code>privkey.pem</code> を指定します。逆にならないように気をつけましょう（私は最初逆に設定してしまい、しばらく時間を浪費してしまいました。）</p>\n\n\n\n<h2>使い方</h2>\n\n\n\n<p>まずは、 https://ホスト名:ポート番号 にアクセスします。ログインには Linux ユーザーのユーザー名とパスワードを使用します。</p>\n\n\n\n<p>その後は、JupyterNotebook を使った事があれば問題無く使えると思います。</p>\n\n\n\n<p>Notebook からは、Linux サーバー上のファイルも参照できるため、データファイルなどは scp などで事前にサーバー上にコピーしておきましょう。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>JupyterHub を使うと、1台のサーバーを複数人で共用する機械学習環境が簡単に作れます。（JupyterHub 自体は、複数台環境にも対応しています。）</p>\n\n\n\n<p>本格的な学習作業は、AWS の GPU インスタンスなどを使う必要があるかもしれませんが、弊社では主に以下の用途で問題無く使えています。</p>\n\n\n\n<ul><li>機械学習初心者の勉強用<ul><li>メンバーは自由に使用可能</li></ul></li><li>小規模R&amp;Dプロジェクト</li></ul>\n\n\n\n<p>弊社では、今後、機械学習関連の仕事が増えていくと思いますので、引き続きサーバー増強など環境整備などを進めていこうと思っています。</p>\n\n\n\n<p>弊社でのお仕事にご興味のある方などは、以下のページよりお気軽にお問い合わせ下さい。</p>\n\n\n\n<p><a href=\"https://blog.mobalab.net/inquiry/\">お問い合わせ – もばらぶん</a></p>\n","dateObject":"2019-11-28T02:48:21.000Z","date":"November 28, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"JupyterHub","slug":"jupyterhub"},{"name":"機械学習","slug":"%e6%a9%9f%e6%a2%b0%e5%ad%a6%e7%bf%92"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/11/jupyterhub-logo.png"},"wordpress_id":1249}},"pageContext":{"id":"67e67a0f-664a-5941-abce-9980480ad8d2","nextPath":"/2019/11/25/firebaseのためのお手軽な開発環境/","nextTitle":"Firebaseのためのお手軽な開発環境","prevPath":"/2019/12/02/firebaseのためのお手軽な開発環境２/","prevTitle":"Firebaseのためのお手軽な開発環境２"}}}