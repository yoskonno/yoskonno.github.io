{"componentChunkName":"component---src-templates-post-js","path":"/2019/01/16/react-nativeのライブラリをpatch-packageで手軽に修正する方法/","result":{"data":{"wordpressPost":{"id":"8a4ac6c7-c3b2-5153-8aa7-6685f31b649f","title":"React Nativeのライブラリをpatch-packageで手軽に修正する方法","excerpt":"<p>はじめに あけましておめでとうございます。React Nativeでアプリの開発を行っているとき、なんらかの外部のライブラリ（パッケージ）を使用することが多いかと思いますが、私が開発する上で困ったのがライブラリの特定の機 [&hellip;]</p>\n","slug":"react-native%e3%81%ae%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%82%92patch-package%e3%81%a7%e6%89%8b%e8%bb%bd%e3%81%ab%e4%bf%ae%e6%ad%a3%e3%81%99%e3%82%8b%e6%96%b9%e6%b3%95","content":"\n<h2><strong>はじめに</strong></h2>\n\n\n\n<p>あけましておめでとうございます。React Nativeでアプリの開発を行っているとき、なんらかの外部のライブラリ（パッケージ）を使用することが多いかと思いますが、私が開発する上で困ったのがライブラリの特定の機能にバグがあり、どうしてもそのバグを修正する必要があるケースでした。</p>\n\n\n\n<p>メジャーなライブラリの特定の機能にバグがある場合などは既存のissueとして修正方法が提示されていることも多かったのですが、修正方法のみが提示されていて当面はライブラリにマージされて反映される見込みがしばらくなさそうなケースも多いかと思います。</p>\n\n\n\n<p>そのような場合、ライブラリに修正を適用するためにはライブラリからフォークして自分自身で修正を適用するという対応方法もあると思いますが、わざわざフォークせずに直接ライブラリに対するパッチを当てることができるpatch-packageというライブラリが非常に使い勝手が良かったので紹介させていただきます。この方法を使えばフォークすることなしに自分でちょっとした修正を行うことも簡単にできます。</p>\n\n\n\n<h2><strong> patch-packageについて</strong></h2>\n\n\n\n<p>David Sheldrickさんという人が2017年の5月あたりに公開したライブラリ。2019年1月15日時点でのnpmでの週間ダウンロード数は5万ほどなので、結構メジャーに使われていそうです。（ちなみにreact-native-firebaseも週間5万ダンロードくらいです）</p>\n\n\n\n<p><a href=\"https://www.npmjs.com/package/patch-package\"><a href=\"https://github.com/ds300/patch-package\">https://www.npmjs.com/package/patch-package</a></a><a href=\"https://github.com/ds300/patch-package\"><br></a><br>githubレポジトリ（詳しいdocumentはこちらにあります）</p>\n\n\n\n<p><a href=\"https://github.com/ds300/patch-package\"><a href=\"https://github.com/ds300/patch-package\">https://github.com/ds300/patch-package</a></a></p>\n\n\n\n<h2><strong>準備・インストール方法</strong></h2>\n\n\n\n<p>package.jsonのscriptsの部分に以下の行を追加しておく</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"scripts\": {\n+  \"postinstall\": \"patch-package\"\n }</code></pre>\n\n\n\n<p> npmの場合のインストール方法</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm i patch-package --save-dev</code></pre>\n\n\n\n<p> yarnの場合のインストール方法</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add --dev patch-package postinstall-postinstall</code></pre>\n\n\n\n<p> yarnの場合にpostinsall-postinstallという別パッケージが必要になる理由は、documentに記載がありますが、yarnの場合はpostinstallが実行されるのがyarn addとyarn installに限られるためにyarn removeの時は実行されないとのこと。なので、postinstall-postinstallによってyarn removeでもpostintallが実行されることでpatch-packageによってパッチが当てられることを確実にするために必要だとのことです。</p>\n\n\n\n<h2><strong>実際の使用方法の流れ</strong></h2>\n\n\n\n<p>/node_module 以下の該当ファイルを修正する<br>↓ <br>（正しく修正されていることを確認する ）<br>↓ <br>以下のコマンドを実行することで、もともとのファイルと修正後のファイルの差分をとったパッチファイルを自動作成する</p>\n\n\n\n<p><strong>npｍの場合(※npxはnpm &gt; 5.2 の場合のパッケージの実行方法)</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>npx patch-package &lt;パッケージ名></code></pre>\n\n\n\n<p><strong>yarnの場合</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn patch-package &lt;パッケージ名></code></pre>\n\n\n\n<p>※初回はパッチファイルの置き場所の/packageというディレクトリも自動生成してくれます。&lt;パッケージ名&gt;の部分は例えばreact-native-cameraなどのライブラリの名前が入ります。</p>\n\n\n\n<p> ↓ </p>\n\n\n\n<p>作成されたパッチファイルをコミットすることで、チーム内でパッチを共有できる(npm/yarn installなどのコマンドを実行後に常に自動的にパッチが当てられるようになります)</p>\n\n\n\n<h2><strong>私が実際にプロジェクトで使用したケース</strong></h2>\n\n\n\n<p> 動画撮影機能のためにreact-native-cameraというライブラリを実際のプロジェクトで使用していたのですが、iOSの場合に動画撮影開始時に画面が一瞬暗くなり、ちらついたような状態で動画が録画されるというバグがありました。<br><br>そのバグのissueで修正コードが提示されていて、修正コードを作成した人はpatch-packageを用いて当面バグを回避しているとのコメントがあり、それのとおりにpatch-packageを使ってバグを回避することができました。<br><br>このコメントでもすぐにPRを作成する、という旨が記載されていたのですが、実際にその修正がマージされたのは結果的には数カ月後だった（ちなみにこの修正されたバージョンではまた別の問題があって結局パッチを当てたままで使用しています。。）ので、patch-packageの便利さにあやかることができました。 <a href=\"https://github.com/react-native-community/react-native-camera/pull/1542#issuecomment-407324574\">https://github.com/react-native-community/react-native-camera/pull/1542#issuecomment-407324574</a></p>\n\n\n\n<h2><strong>まとめ</strong></h2>\n\n\n\n<p>公式のドキュメントに書かれている内容ですが、機能追加などの変更が大きくなる場合や他の人にとっても有益な場合はフォークを用いての修正が推奨されていますが、手軽に修正できるという点ではpatch-packageが活躍する場面は多そうですので、みなさんも是非試してみてください。<br><br><strong>patch-package</strong><br><a href=\"https://github.com/ds300/patch-package\"><a href=\"https://github.com/ds300/patch-package\">https://github.com/ds300/patch-package</a></a><br></p>\n\n\n\n<p></p>\n","dateObject":"2019-01-16T03:33:05.000Z","date":"January 16, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"React Native","slug":"react-native"},{"name":"ハイブリッドアプリ","slug":"%e3%83%8f%e3%82%a4%e3%83%96%e3%83%aa%e3%83%83%e3%83%89%e3%82%a2%e3%83%97%e3%83%aa"},{"name":"リアクトネイティブ","slug":"%e3%83%aa%e3%82%a2%e3%82%af%e3%83%88%e3%83%8d%e3%82%a4%e3%83%86%e3%82%a3%e3%83%96"}],"author":{"name":"Konno","slug":"konno"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/patch-package-1.png"},"wordpress_id":501}},"pageContext":{"id":"8a4ac6c7-c3b2-5153-8aa7-6685f31b649f","nextPath":"/2019/01/10/develop-api-server-with-pre-trained-ml-model/","nextTitle":"機械学習の学習済みモデルを使用して API サーバーを構築する","prevPath":"/2019/01/30/using-gitattributes-in-package-distribution-in-github/","prevTitle":"Using .gitattributes in package distribution in GitHub"}}}