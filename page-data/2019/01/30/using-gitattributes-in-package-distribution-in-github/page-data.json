{"componentChunkName":"component---src-templates-post-js","path":"/2019/01/30/using-gitattributes-in-package-distribution-in-github/","result":{"data":{"wordpressPost":{"id":"3ca57673-e453-5d56-952f-6677d3e4c887","title":"Using .gitattributes in package distribution in GitHub","excerpt":"<p>Hi there, how’s it going? This is the second time to write the entry in English for me. Anyway, do you know or [&hellip;]</p>\n","slug":"using-gitattributes-in-package-distribution-in-github","content":"\n<p>Hi there, how’s it going? This is the second time to write the entry in English for me.</p>\n\n\n\n<p>Anyway, do you know or have you ever used the&nbsp;<code>.gitattributes</code>&nbsp;file in package distribution in GitHub using its Release feature?<br>OK, for those people who don’t/haven’t that, let me explain a brief.<br>This is the meta data file where you can add some attributes to the files version-controlled by Git.</p>\n\n\n\n<h3 id=\"What-the-attributes-are\"><a href=\"https://hackmd.io/7T1SkkAdRKmE3IDJlfdcGw?view#What-the-attributes-are\"></a>What the attributes are</h3>\n\n\n\n<p><a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\" target=\"_blank\" rel=\"noreferrer noopener\">The Official Git document descripting attributes</a>&nbsp;is providing us the nice example, saying:</p>\n\n\n\n<p><em>Using attributes, you can do things like specify separate merge strategies for individual files or directories in your project, tell Git how to diff non-text files, or have Git filter content before you check it into or out of Git.</em></p>\n\n\n\n<p>That’s easier to figure out. For example, if you write down your <code>.gitattributes</code> like this:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nconfig.yml merge=ours\n</pre>\n\n\n<p>It’s using <g class=\"gr_ gr_100 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"100\" data-gr-id=\"100\">a </g><code>merge</code><g class=\"gr_ gr_100 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar multiReplace\" id=\"100\" data-gr-id=\"100\"> attribute</g> <g class=\"gr_ gr_102 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"102\" data-gr-id=\"102\">for </g><code>config.yml</code><g class=\"gr_ gr_102 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"102\" data-gr-id=\"102\"> to</g> tell Git what the merge driver to be used for the file. In this case, <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"11\" data-gr-id=\"11\">it’s </g><code>our</code><g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"11\" data-gr-id=\"11\">.</g> <code>our</code> doesn’t make any sense but just the name of the driver. Of course, originally you may don’t have the driver named <code>our</code> I guess. So following configuration is needed to run this magic:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ git config --global merge.ours.driver true\n</pre>\n\n\n<p>That’s it. Now the <g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"11\" data-gr-id=\"11\">driver </g><code>our</code><g class=\"gr_ gr_11 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"11\" data-gr-id=\"11\"> is</g> specified as <code>true</code>. <code>true</code> is built-in command just returning <g class=\"gr_ gr_13 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"13\" data-gr-id=\"13\">exit-code </g><code>0</code><g class=\"gr_ gr_13 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"13\" data-gr-id=\"13\"> with</g> doing nothing.<br>So the conclusion is when you merge some branch into your branch, your changes applied <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\">to </g><code>config.yml</code><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"10\" data-gr-id=\"10\"> is</g> always adapted to ship to a commit even though any conflicts with other branch occurs, with no confirmation.</p>\n\n\n\n<p>For example, this may be useful the situation where you fork some nice repository and maintain it your own but you don&#8217;t want to apply any changes to the specific file (<code>config.yml</code>) during even back-porting changes for the original which happens sometimes.</p>\n\n\n\n<p>Also, the attributes can also be applied to the directory, in that case, the attributes should apply to subfiles in the directory.</p>\n\n\n\n<p>Moreover, there are many other kinds of attributes in Git, but I don’t pick them up anymore for keeping my topic (other than one I’ll share you below). So check the document out if you&#8217;re interested 🙂</p>\n\n\n\n<h2 id=\"export-ignore-attribute\"><a href=\"https://hackmd.io/7T1SkkAdRKmE3IDJlfdcGw?view#export-ignore-attribute\"></a>export-ignore attribute</h2>\n\n\n\n<p>So Git also has an <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"6\" data-gr-id=\"6\">attribute </g><code>export-ignore</code><g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"6\" data-gr-id=\"6\">.</g> The files which are applied this attribute should <em>NOT</em> be included in <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"4\" data-gr-id=\"4\">archive</g>.</p>\n\n\n\n<p>For example:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n/tests export-ignore\nREADME.md export-ignore\n</pre>\n\n\n<p>This prevents <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"6\" data-gr-id=\"6\">the </g><code>/test</code><g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"6\" data-gr-id=\"6\"> directory</g> <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"7\" data-gr-id=\"7\">and </g><code>README.md</code><g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"7\" data-gr-id=\"7\"> from</g> including to the archive. The archive? The one which can be generated by:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ git archive HEAD --worktree-attributes --output=/tmp/repo.zip\n</pre>\n\n\n<p><em>TIP: don’t <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">forget </g><code>--worktree-attributes</code><g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"5\" data-gr-id=\"5\"> command</g> option. Although it’s not necessary, the exclusion doesn’t work if you don’t specify it.</em></p>\n\n\n\n<p>It’s good and useful, isn’t it? In script languages such PHP, the distributed packages don’t need to include the tests stuff. Nobody wants to install/deploy them to their production server.<br>And GitHub resources feature use this attribute to archive in their Release feature.<br>So that’s why you should always setup your&nbsp;<code>export-ignore</code>&nbsp;attribute for your package powered by GitHub Release (e.g. Packagist package for PHP).</p>\n\n\n\n<h2 id=\"Conclusion\"><a href=\"https://hackmd.io/7T1SkkAdRKmE3IDJlfdcGw?view#Conclusion\"></a>Conclusion</h2>\n\n\n\n<ul><li>The files specified attribute <code>export-ignore</code> in <code>.gitattributes</code> are not to be archived</li><li>GitHub Release feature archives the repository using this attribute, so you can avoid shipping some unnecessary kinds like tests stuff for production</li></ul>\n\n\n\n<h2>We&#8217;re hiring!</h2>\n\n\n\n<p>We&#8217;re hiring the software engineer who can work remotely. No matter country you live, and although we&#8217;re a Japanese company, <g class=\"gr_ gr_391 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling multiReplace\" id=\"391\" data-gr-id=\"391\"><g class=\"gr_ gr_390 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"390\" data-gr-id=\"390\">non</g> Japanese</g> speaker is acceptable! (required English)<br>Please see <a href=\"https://blog.mobalab.net/2017/09/19/we-are-hiring-engineers/\">here</a> for your information and feel free in touch us if you&#8217;re interested! (We now don&#8217;t have the Japanese recruit page but now preparing it. We apologize for the inconvenience)</p>\n","dateObject":"2019-01-30T03:00:14.000Z","date":"January 30, 2019","categories":[{"name":"English","slug":"en"},{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Git","slug":"git"},{"name":"GitHub","slug":"github"},{"name":"OSS","slug":"oss"},{"name":"Packaging","slug":"packaging"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/kira-auf-der-heide-475616-unsplash-scaled.jpg?fit=1024%2C683&ssl=1","height":683,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/kira-auf-der-heide-475616-unsplash-scaled.jpg?fit=768%2C512&ssl=1","height":512,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/kira-auf-der-heide-475616-unsplash-scaled.jpg"},"wordpress_id":529}},"pageContext":{"id":"3ca57673-e453-5d56-952f-6677d3e4c887","nextPath":"/2019/01/16/react-nativeのライブラリをpatch-packageで手軽に修正する方法/","nextTitle":"React Nativeのライブラリをpatch-packageで手軽に修正する方法","prevPath":"/2019/01/31/we-are-hiring/","prevTitle":"優秀な技術者と一緒に、好きな場所で働きませんか"}}}