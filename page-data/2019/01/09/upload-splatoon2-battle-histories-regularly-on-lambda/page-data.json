{"componentChunkName":"component---src-templates-post-js","path":"/2019/01/09/upload-splatoon2-battle-histories-regularly-on-lambda/","result":{"data":{"wordpressPost":{"id":"6a2cbfc8-811a-51e8-b964-08f92db57b2e","title":"AWS Lambdaを使ってスプラトゥーン2の戦績をstat.inkに定期保存できるようにした","excerpt":"<p>皆さん新年あけましておめでとうございます。今年もよろしくお願いします。新年と言うわけで、1発目の投稿は少しカジュアルな感じで行こうと思い、表題のネタを取り上げるに至りました。 スプラトゥーン2とは? 多分名前くらいは皆さ [&hellip;]</p>\n","slug":"upload-splatoon2-battle-histories-regularly-on-lambda","content":"\n<p>皆さん新年あけましておめでとうございます。今年もよろしくお願いします。<br>新年と言うわけで、1発目の投稿は少しカジュアルな感じで行こうと思い、表題のネタを取り上げるに至りました。</p>\n\n\n\n<h2 id=\"スプラトゥーン2とは\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#%E3%82%B9%E3%83%97%E3%83%A9%E3%83%88%E3%82%A5%E3%83%BC%E3%83%B32%E3%81%A8%E3%81%AF\"></a>スプラトゥーン2とは?</h2>\n\n\n\n<p>多分名前くらいは皆さん聞いた事があるのであまり詳しくは説明しませんが、任天堂が提供しているNintendo Switch専用のゲームソフトで、インターネットを通じてオンラインで対戦が可能なシューティングゲーム（？）です。<br>ゲームモードの1つであるガチマッチでは、オンラインでランダムに集めた8人を4人ずつの2チームに分け、対抗戦を行う事ができます。</p>\n\n\n\n<p>一口にオンライン対戦と言っても、使用できるブキやステージ、ルールは多岐に渡り、非常にバラエティに富んだゲームとなっています。</p>\n\n\n\n<h2 id=\"戦績管理について\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#%E6%88%A6%E7%B8%BE%E7%AE%A1%E7%90%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"></a>戦績管理について</h2>\n\n\n\n<p>ゲームとはいえ、上位のガチ勢は訓練に訓練を重ねた猛者たちが揃っており、そこまでは目指さないまでも、コンスタントに勝ち上がっていく上で戦績の管理は重要だと考えています。（持論）<br>何故なら、苦手なステージやブキ、ルールの傾向を統計的に把握し、分析をする事が可能だからです。</p>\n\n\n\n<p>実は、任天堂が提供している専用のスマホアプリ（イカリング2）を使うと、直近の50試合の戦績を細かく（ルールとステージ、勝敗、自身と対戦者の装備、キル/デス数等）見る事が可能です。<br>しかし、50件ですと戦績を分析するには不十分です。そこで、イカリング2が使用しているHTTP APIに対して、<a href=\"https://qiita.com/dog_coro_zzz/items/788665a4c637cbb27807\" target=\"_blank\" rel=\"noreferrer noopener\">直接HTTP通信を行う等</a>を行い、定期的に戦績を記録しておく必要があります。</p>\n\n\n\n<p>その中の一つに&nbsp;<a href=\"https://stat.ink/\" target=\"_blank\" rel=\"noreferrer noopener\">stat.ink</a>&nbsp;と言うOSSがあります。このソフトウェアではこれまでの戦績を管理し、統計的な分析を行う事が可能で、同URLでは作者がセルフホスティングしているサービスを使う事ができます。<br>ただ、このソフトウェアは戦績の（任天堂のAPIからの）取得自体はセキュリティ上の都合により行っておらず、自前で取得する必要があり、取得したデータをstat.inkに送信する事で蓄積が可能となっています。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/eGuculP.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-478\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/eGuculP.png?w=598&amp;ssl=1 598w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/eGuculP.png?resize=300%2C89&amp;ssl=1 300w\" sizes=\"(max-width: 598px) 100vw, 598px\" data-recalc-dims=\"1\" /><figcaption>死ぬ程雑な図</figcaption></figure></div>\n\n\n\n<p>肝心のデータを取得する方法ですが、これまたいくつかツールがあるのですが、その中の1つにPython製のCLIで動く&nbsp;<a href=\"https://github.com/frozenpandaman/splatnet2statink\" target=\"_blank\" rel=\"noreferrer noopener\">splatnet2netstatink</a>&nbsp;と言うツールが有ります。CLIと言う特性上、今回のAWS Lambdaで定期実行するのには良さそうなので、（前置きが長くなりましたが）今回はこれをServerless Frameworkを使って定期実行を実現する方法を紹介します。</p>\n\n\n\n<h2 id=\"splatnet2netstatinkの仕様把握とアーキテクチャの設計\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#splatnet2netstatink%E3%81%AE%E4%BB%95%E6%A7%98%E6%8A%8A%E6%8F%A1%E3%81%A8%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%AE%E8%A8%AD%E8%A8%88\"></a>splatnet2netstatinkの仕様把握とアーキテクチャの設計</h2>\n\n\n\n<p>まずはCLIの使い方を見てみます。<br>（※このツールを使うには、イカリング2APIとstat.inkの2サービスのセッションが必要となるのですが、その辺りは<a href=\"https://archive.fo/td52p\" target=\"_blank\" rel=\"noreferrer noopener\">ドキュメント</a>に書いてあるので割愛します。）</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./splatnet2statink.py --help\nsplatnet2statink v1.3.4\nusage: splatnet2statink.py [-h] [-M [N]] [-r] [-s] [-t] [--salmon]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -M [N]      monitoring mode; pull data every N secs (default: 300)\n  -r          retroactively post unuploaded battles\n  -s          don't post scoreboard result image\n  -t          dry run for testing (won't post to stat.ink)\n  --salmon    uploads salmon run shifts</code></pre>\n\n\n\n<p><code>-r</code>&nbsp;オプションを付けて実行すると、任天堂が提供している「直近の50件」から、stat.inkにまだ未送信の物を自動で判別して送ってくれます。試しに2試合プレイした状態で実行してみましょう:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./splatnet2statink.py -r\nsplatnet2statink v1.3.4\nChecking if there are previously-unuploaded battles...\nPreviously-unuploaded battles detected. Uploading now...\nBattle uploaded to https://stat.ink/@***/spl2/168****\nBattle uploaded to https://stat.ink/@***/spl2/168****</code></pre>\n\n\n\n<p>もちろん、もう一度実行しても送信される試合はありません:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./splatnet2statink.py -r\nsplatnet2statink v1.3.4\nChecking if there are previously-unuploaded battles...\nNo previously-unuploaded battles found.</code></pre>\n\n\n\n<p>つまり、このスクリプト（＋セッション情報）を定期的に実行すれば良さそうです。</p>\n\n\n\n<p>AWS Lambda側のアーキテクチャですが、普通にスクリプトと依存パッケージ一式をアーカイブしてアップロードし、CloudWatch Eventsを使って定期実行するように設定すれば良さそうです。（下記参照）</p>\n\n\n\n<ul><li class=\"\"><a href=\"https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html#python-package-dependencies\" target=\"_blank\" rel=\"noreferrer noopener\">Python の AWS Lambda デプロイパッケージ#追加の依存関係がある場合</a></li><li class=\"\"><a href=\"https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/with-scheduled-events.html\" target=\"_blank\" rel=\"noreferrer noopener\">AWS Lambda を Amazon CloudWatch Events に使用する</a></li></ul>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/haaB8dF.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-479\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/haaB8dF.png?w=589&amp;ssl=1 589w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/haaB8dF.png?resize=300%2C152&amp;ssl=1 300w\" sizes=\"(max-width: 589px) 100vw, 589px\" data-recalc-dims=\"1\" /><figcaption>死ぬ程雑な図2</figcaption></figure></div>\n\n\n\n<p>いずれもServerless Frameworkを使って簡単に設定が可能です。</p>\n\n\n\n<h2 id=\"Serverless-Frameworkの設定\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#Serverless-Framework%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>Serverless Frameworkの設定</h2>\n\n\n\n<p>OSSとして公開していますので<a href=\"https://github.com/issei-m/splatnet2statink-on-lambda\" target=\"_blank\" rel=\"noreferrer noopener\">そちら</a>をご確認下さい。（ライセンスはsplatnet2statink同様GPLv3）</p>\n\n\n\n<p>要所のみ解説します。</p>\n\n\n\n<pre class=\"wp-block-code\"><code># serverless.yml\n\n# ~~\n\nplugins:\n  - serverless-python-requirements\n\ncustom:\n  pythonRequirements:\n    dockerizePip: non-linux\n\n# ~~\n\nfunctions:\n  post_unuploaded_battles:\n    handler: handler.main\n    events:\n      - name: at-every-schedule-rotation\n      - description: At every schedule rotation.\n      - schedule: cron(0 1/2 * * ? *)\n\n# ~~</code></pre>\n\n\n\n<h3 id=\"1-serverless-python-requirements-の利用\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#1-serverless-python-requirements-%E3%81%AE%E5%88%A9%E7%94%A8\"></a>1.&nbsp;<a href=\"https://serverless.com/blog/serverless-python-packaging/\" target=\"_blank\" rel=\"noreferrer noopener\">serverless-python-requirements</a>&nbsp;の利用</h3>\n\n\n\n<p>Cコンパイルが必要なパッケージのコンパイル作業を、Docker経由で行う事ができます。<br>これにより、デプロイ（コンパイル）元が非Linuxであっても問題がありません。<br>※以前<a href=\"https://stg-engineering-wp.mobalab.net/2018/01/14/how-to-deploy-python-based-lambda-function-that-uses-packages/\" target=\"_blank\" rel=\"noreferrer noopener\">同じ様な内容の記事</a>を公開していますので詳しくはそちらをご参照下さい。</p>\n\n\n\n<h3 id=\"2-functionseventsscheduleでCloudWatch-Eventsを設定\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#2-functionseventsschedule%E3%81%A7CloudWatch-Events%E3%82%92%E8%A8%AD%E5%AE%9A\"></a>2. functions.events.scheduleでCloudWatch Eventsを設定</h3>\n\n\n\n<p>cron記法により、2時間毎の奇数時に実行されるようにしています。これは、スプラトゥーン2のルール及びステージのローテーションのタイミングと同様となっております。</p>\n\n\n\n<p>後はこれを&nbsp;<code>sls deploy</code>&nbsp;するだけです。その際、先述の保存したセッション情報を記録しているconfig.txt（詳しくはsplatnet2statinkの<a href=\"https://archive.fo/td52p\" target=\"_blank\" rel=\"noreferrer noopener\">ドキュメント</a>を参照）を忘れずに設置しておいて下さい。</p>\n\n\n\n<h2 id=\"動作確認\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"></a>動作確認</h2>\n\n\n\n<p>CloudWatch Logsのストリームを確認してみました:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ aws logs get-log-events --log-group-name my-logs --log-group-name /aws/lambda/splatnet2statink-prod-post_unuploaded_battles --log-stream-name '2019/01/08/[$LATEST]*****************************' | jq '.events[].message'\n\n\"START RequestId: 7d08fcaa-12f1-11e9-a61a-*************** Version: $LATEST\\n\"\n\"Previously-unuploaded battles detected. Uploading now...\\n\"\n\"Battle uploaded to https://stat.ink/@***/spl2/168****\\n\"\n\"Battle uploaded to https://stat.ink/@***/spl2/168****\\n\"\n\"Battle uploaded to https://stat.ink/@***/spl2/168****\\n\"\n\"Battle uploaded to https://stat.ink/@***/spl2/168****\\n\"\n\"END RequestId: 7d08fcaa-12f1-11e9-a61a-***************\\n\"\n\"REPORT RequestId: 7d08fcaa-12f1-11e9-a61a-***************\\tDuration: 29432.69 ms\\tBilled Duration: 29500 ms \\tMemory Size: 512 MB\\tMax Memory Used: 51 MB\\t\\n\"</code></pre>\n\n\n\n<p>見た感じ問題無さそうですね。</p>\n\n\n\n<h2 id=\"まとめ\"><a href=\"https://hackmd.io/0ko1w5IFTpqimTwBJK4WNg?view#%E3%81%BE%E3%81%A8%E3%82%81\"></a>まとめ</h2>\n\n\n\n<p>今回はsplatnet2statinkとServerless Frameworkを使って簡単にstat.inkに戦績を溜め込めるようになりました。<br>定期実行スケジュールについてですが、お好みで調整（例えばよくプレイするゴールデンタイムでは実行感覚を短くする等）したり、手動で更新するためのbotを作ってみても面白いかもしれませんね。</p>\n\n\n\n<p>それでは皆さん良いイカライフを！</p>\n","dateObject":"2019-01-09T02:45:56.000Z","date":"January 09, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"Lambda","slug":"lambda"},{"name":"Python","slug":"python"},{"name":"Splatoon2","slug":"splatoon2"},{"name":"Switch","slug":"switch"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/01/halloween_extra_sec5.png"},"wordpress_id":476}},"pageContext":{"id":"6a2cbfc8-811a-51e8-b964-08f92db57b2e","nextPath":"/2018/12/28/rspecのletの遅延評価を利用してよりコンテクスチュア/","nextTitle":"RSpecのletの遅延評価を利用してよりコンテクスチュアルなSpecを書く","prevPath":"/2019/01/10/develop-api-server-with-pre-trained-ml-model/","prevTitle":"機械学習の学習済みモデルを使用して API サーバーを構築する"}}}