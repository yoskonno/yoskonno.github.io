{"componentChunkName":"component---src-templates-post-js","path":"/2019/09/25/jmeter-on-k8s-eks/","result":{"data":{"wordpressPost":{"id":"8b87d1a1-a564-5aa4-9b3f-6194635d6caf","title":"JMeter on k8s (EKS)","excerpt":"<p>目的 JMeter はかなり昔からある負荷テストツールです。JMeter が動くホストを複数台構成にして、さらに高負荷をかけることも出来るようになってるのですが、そのために行うサーバー構築や設定が若干面倒です。 今回、J [&hellip;]</p>\n","slug":"jmeter-on-k8s-eks","content":"\n<h2>目的</h2>\n\n\n\n<p>JMeter はかなり昔からある負荷テストツールです。JMeter が動くホストを複数台構成にして、さらに高負荷をかけることも出来るようになってるのですが、そのために行うサーバー構築や設定が若干面倒です。</p>\n\n\n\n<p>今回、JMeter を Docker コンテナに載せて Kubernetes に管理させる、という事をやってみます。それにより、以下のようなメリットがあるのでは無いかと考えています。</p>\n\n\n\n<ul><li>一度設定が完了してしまえば、再度構築する場合などに楽</li><li>台数の増減が簡単</li><li>（流行りの k8s を、実際に使いながら勉強できる）</li></ul>\n\n\n\n<p>また、テスト結果は Grafana で可視化します。</p>\n\n\n\n<h2>概要</h2>\n\n\n\n<p>基本的には以下のレポジトリの内容に沿ってやるのですが、環境などがは一部異なるのと、細かい補足などを随時記載します。</p>\n\n\n\n<p><a href=\"https://github.com/kubernauts/jmeter-kubernetes\">kubernauts/jmeter-kubernetes: Load testing as a service (LTaaS) with Apache Jmeter on kubernetes</a></p>\n\n\n\n<p>環境は</p>\n\n\n\n<ul><li>Amazon Elastic Kubernetes Service (Amazon EKS)<ul><li>この上に、JMeter, Grafana, InfluxDB を構築</li></ul></li><li>クライアントとして <a rel=\"noreferrer noopener\" aria-label=\"eksctl (opens in a new tab)\" href=\"https://eksctl.io/\" target=\"_blank\">eksctl</a> を使用</li></ul>\n\n\n\n<p>やることの流れとしては</p>\n\n\n\n<ol><li>クラスターの生成</li><li>各種ノードを起動</li><li>Grafana のダッシュボードの設定</li><li>Grafana ダッシュボードテンプレートのインポート</li><li>テストシナリオの作成</li><li>テスト</li></ol>\n\n\n\n<p>という形です。各手順を順次説明していきます。</p>\n\n\n\n<h2>手順</h2>\n\n\n\n<h3>クラスターの生成</h3>\n\n\n\n<p>元のレポジトリーの内容は 既に Kubernetes クラスターが稼働していることが前提になっているため、まずは EKS でクラスターを生成する必要があります。</p>\n\n\n\n<p>まずは以下のような JSON ファイルを作成し <code>cluster.yaml</code> という名前で保存します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: example-jmeter\n  region: us-east-1\n\n# 既存の VPC を使用\nvpc:\n  id: &quot;vpc-xxxxxxxxxxxxxxxxx&quot;\n  subnets:\n    # public を指定することも可能\n    private:\n      us-east-1a:\n        id: &quot;subnet-xxxxxxxxxxxxxxxxx&quot;\n      us-east-1c:\n        id: &quot;subnet-xxxxxxxxxxxxxxxxx&quot;\n\nnodeGroups:\n  - name: dashboard\n    instanceType: m5.xlarge\n    desiredCapacity: 1\n    privateNetworking: true\n  - name: jmeter\n    instanceType: m5.xlarge\n    desiredCapacity: 3\n    privateNetworking: true\n</pre>\n\n\n<p>その上で、以下のコマンドを実行してクラスターを生成します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\neksctl create cluster -f cluster.yaml\n</pre>\n\n\n<p>eksctl の以下のドキュメントも参照して下さい。</p>\n\n\n\n<p><a href=\"https://eksctl.io/\">Introduction | eksctl</a></p>\n\n\n\n<p>なお、上の yaml は、既存の VPC を使う設定になっています。yaml に <code>vpc</code> の項目が無い場合、自動で VPC やサブネットが作成されます。その辺りは後ほど説明します。</p>\n\n\n\n<h3>各種ノードの起動</h3>\n\n\n\n<p>次に、EKS クラスター内で各種ノードを起動します。以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n./jmeter_cluster_create.sh\n</pre>\n\n\n<p>何をやっているかは<a rel=\"noreferrer noopener\" href=\"https://github.com/kubernauts/jmeter-kubernetes/blob/master/jmeter_cluster_create.sh\" target=\"_blank\">ソース</a>を直接見た方が早いと思いますが、</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nkubectl create -n &lt;ネームスペース&gt; -f $working_dir/xxxxx.yaml\n</pre>\n\n\n<p>といったコマンドの羅列です。</p>\n\n\n\n<h3>Grafana のダッシュボードの設定</h3>\n\n\n\n<p>こちらもコマンドを実行するだけです。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n./dashboard.sh\n</pre>\n\n\n<p>こちらもシンプルなので<a rel=\"noreferrer noopener\" aria-label=\"ソース (opens in a new tab)\" href=\"https://github.com/kubernauts/jmeter-kubernetes/blob/master/dashboard.sh\" target=\"_blank\">ソース</a>を見た方が早いですが、やっている事は主に InfluxDB に対し <code>CREATE DATABASE jmeter</code> を発行し、ファイルをコピーし、最後の行で Grafana のデータソースを設定しているくらいです。</p>\n\n\n\n<h3>Grafana ダッシュボードテンプレートのインポート</h3>\n\n\n\n<p>今まではコマンドラインでの操作でしたが、ここの手順は Grafana の GUI にアクセスして行います。</p>\n\n\n\n<p>接続先を確認するために、以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nkubectl describe -n &lt;ネームスペース名&gt; svc jmeter-grafana\n</pre>\n\n\n<p><code>LoadBalancer Ingress</code> というのがあれば、そのIPアドレスを控えておき、以下の URL にアクセスします。</p>\n\n\n\n<p>http://&lt;そのIPアドレス>:3000/</p>\n\n\n\n<p>ない場合は、public な IP が無いため直接アクセス出来ません。その場合は、ポートフォワードを使います。まずは以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nkubectl -n &lt;ネームスペース名&gt; get pod -o wide\n</pre>\n\n\n<p>そこで、jmeter-grafana の pod 名（<code>NAME</code> の列に記載されている）を控えておき、以下のコマンドを実行します。（例えば <code>jmeter-grafana-67b57d859f-lhchh</code> だったとすると）</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nkubectl -n &lt;ネームスペース名&gt; port-forward jmeter-grafana-67b57d859f-lhchh 3000:3000\n</pre>\n\n\n<p>その上で、以下の URL にアクセスします。</p>\n\n\n\n<p>http://127.0.0.1:3000/</p>\n\n\n\n<p>Grafana の管理画面にアクセス出来たら、レポジトリにある <a href=\"https://github.com/kubernauts/jmeter-kubernetes/blob/master/GrafanaJMeterTemplate.json\">GrafanaJMeterTemplate.json</a> というファイルをインポートします。</p>\n\n\n\n<p>インポート方法は以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://grafana.com/docs/reference/export_import/\">Export &amp; Import | Grafana Documentation</a></p>\n\n\n\n<h3>テストシナリオの作成</h3>\n\n\n\n<p>テストシナリオは GUI で作成した方が楽なので、ローカル環境に JMeter を入れるなどして、JMeter の GUI モードを立ち上げて下さい。</p>\n\n\n\n<p>レポジトリーにある <code><a rel=\"noreferrer noopener\" aria-label=\"cloudssky.jmx (opens in a new tab)\" href=\"https://github.com/kubernauts/jmeter-kubernetes/blob/master/cloudssky.jmx\" target=\"_blank\">cloudssky.jmx</a></code> をコピペして修正するのが良いと思いますが、一から作る場合は <code>BackendListener</code> の設定を忘れないようにして下さい。そうしないと、テスト結果が InfluxDB に保存されません。</p>\n\n\n\n<p>Backend Listener に関しては、以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://www.apache.org/foundation/thanks.html\">Apache JMeter &#8211; User&#8217;s Manual: Component Reference</a></p>\n\n\n\n<h3>テスト</h3>\n\n\n\n<p>いよいよテストです。以下のコマンドを実行するだけで OK です。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n./start_test.sh \n</pre>\n\n\n<p>JMeter には、CSV ファイルを読み込んで、それをパラメータにセットする機能があります。1つの用途としては、1つの固定の URL に負荷をかけるのでは無く、例えば以下のような URL で ID 1 と ID 2 を変えて負荷をかけたい場合が挙げられます。</p>\n\n\n\n<p>http://example.com/path/to/endpoint?user_id=&lt;ID 1>&amp;content_id=&lt;ID 2></p>\n\n\n\n<p>この場合、ID 1 と ID 2 が入った CSV ファイルを JMeter に渡す事になります。この機能（CSV Data Set Config）の詳細に関しては、JMeter の以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://jmeter.apache.org/usermanual/component_reference.html#CSV_Data_Set_Config\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">Apache JMeter &#8211; User&#8217;s Manual: Component Reference</a></p>\n\n\n\n<p>今回、JMeter は k8s 上の pod で動作しますので、テストシナリオと共に CSV ファイルも pod 上にコピーする必要があります。それを行ってくれるのが、同ディレクトリ上にある <code>start_test_csv.sh</code> です。</p>\n\n\n\n<h2>補足等</h2>\n\n\n\n<h3>既存の VPC を使うか否か</h3>\n\n\n\n<p>結論から書くと、本番環境であれば既存の VPC を使った方が良いと思います。その上で、以下を読んでもらえればと思います。</p>\n\n\n\n<p>eksctl のドキュメントを見ると、既存の VPC を使う事はあまり推奨されていないように見えます。以下のドキュメントからいくつか抜粋します。</p>\n\n\n\n<p><a href=\"https://eksctl.io/usage/vpc-networking/#use-existing-vpc-any-custom-configuration\">VPC Networking | eksctl</a></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>You must ensure to provide at least 2 subnets in different AZs. There are other requirements that you will need to follow, but it’s entirely up to you to address those.</p></blockquote>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>There maybe other requirements imposed by EKS or Kubernetes, and it is entirely up to you to stay up-to-date on any requirements and/or recommendations, and implement those as needed/possible.</p></blockquote>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you are in doubt, don’t use a custom VPC. Using <code>eksctl create cluster</code> without any <code>--vpc-*</code> flags will always configure the cluster with a fully-functional dedicated VPC.</p></blockquote>\n\n\n\n<p>ただ、実際のところ、業務で使う場合には、IP アドレス帯などのネットワーク設定は管理しておきたいので、VPC を勝手に作られてしまうのは使いづらいです。</p>\n\n\n\n<p>また、上のドキュメントだと AWS のリソースに手動でタグを付けておく必要があると書いてありますが、現在の eksctl では、その辺りも自動でやってくれるようでした。</p>\n\n\n\n<p>また、以下にある eksctl の設定サンプルファイルでも、既存  VPC を使ったものがあります。</p>\n\n\n\n<p><a href=\"https://github.com/weaveworks/eksctl/tree/master/examples\">eksctl/examples at master · weaveworks/eksctl</a></p>\n\n\n\n<p>ということで、既存 VPC を使っても問題無いと判断しました。</p>\n\n\n\n<h3>public subnet vs. private subnet</h3>\n\n\n\n<p>VPC は既存のモノを使うとして、subnet は public, private あるいは両方使う、のどれが良いでしょうか。</p>\n\n\n\n<p>今回の構成をお手軽に試すのであれば public subnet だけを使うのがハマりどころが少なくて良いと思います。</p>\n\n\n\n<p>実際に業務で使う場合には、要件次第としか言えませんね。private subnet を使って問題が発生した場合は、後の方の「トラブルシューティング」の項も参照して下さい。</p>\n\n\n\n<h3>よくある操作のまとめ</h3>\n\n\n\n<p>JMeter on Kubernetes に限った内容ではありませんが、良くある操作をまとめました。</p>\n\n\n\n<p>JMeter の slave 用 pod の数を変更するには <code>jmeter_slaves_deploy.yaml</code> の <code>spec</code> -> <code>replicas</code> の数を変更し、以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nkubectl -n &lt;ネームスペース名&gt; apply -f jmeter_slaves_deploy.yaml\n</pre>\n\n\n<p>ノード数を変更する場合には、以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\neksctl scale nodegroup --cluster 'example-jmeter' --nodes &lt;ノード数&gt; jmeter --region us-east-1\n</pre>\n\n\n<p>EKS クラスターをまるごと削除する場合は、以下のコマンドを実行します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\neksctl delete cluster -f cluster.yaml\n</pre>\n\n\n<h2>トラブルシューティング</h2>\n\n\n\n<h3>timed out (after 25m0s) waiting for at least 1 nodes to join the cluster and become ready in &#8220;dashboard</h3>\n\n\n\n<p>クラスター生成時（<code>eksctl create cluster</code>）にこのようなメッセージが出ました。色々な原因が考えられるのですが、私の場合は VPC のネットワーク設定が間違っていて、private subnet 内のノードから外部への通信が行えていませんでした。</p>\n\n\n\n<p>ルーティング、NAT Gateway の設定などを修正したら問題が解消しました。</p>\n\n\n\n<h3>none or too few private subnets to use with &#8211;node-private-networking</h3>\n\n\n\n<p>同じくクラスター生成時に出たエラーです。理由は、<code>cluster.yaml</code> の <code>nodeGroups</code> の設定で <code>privateNetworking: true</code> にしているにも関わらず、<code>vpc</code> -> <code>subnets</code> の下に <code>private</code> のサブネットが指定されていなかったためでした。（単純なミス）</p>\n\n\n\n<h3>could not find any suitable subnets for creating the elb</h3>\n\n\n\n<p>これもクラスター生成時に色々試している時に出ました。以下のように「タグ付けが正しくされていないから」みたいな情報とかもあったのですが、前述の通り、最近のバージョンの eksctl では、手動でのタグ付けは不要です。</p>\n\n\n\n<p><a href=\"https://github.com/kubernetes/kubernetes/issues/29298\">Explain why not subnets are found for creating an ELB on AWS · Issue #29298 · kubernetes/kubernetes</a></p>\n\n\n\n<p>こちらも、ネットワーク設定を直したら、エラーが解消しました。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>かなり長くなりましたが、Amazon EKS でクラスターを生成し、その上で JMeter （+ Grafana）を起動し、簡単に負荷テストを行える環境を作成しました。</p>\n\n\n\n<p>手軽に構築できるとは言え、Kubernetes や AWS の基本的な知識が無いと、何か問題が発生した時に手が出ません。Kubernetes の公式ドキュメントなどで基礎知識を得ておくことをお勧めします。（私自身、実際に使えるようになるまでに結構時間がかかってしまいましたが、その分、Kubernetes や EKS の良い勉強になりました。）</p>\n\n\n\n<p>また、eksctl は、どんどん改善されているようで、ネット上には古い情報も散見されました。まずは、公式ドキュメントを参照することをお勧めします。</p>\n","dateObject":"2019-09-25T00:18:55.000Z","date":"September 25, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"EKS","slug":"eks"},{"name":"JMeter","slug":"jmeter"},{"name":"k8s","slug":"k8s"},{"name":"Kubernetes","slug":"kubernetes"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/jmeter.png"},"wordpress_id":1118}},"pageContext":{"id":"8b87d1a1-a564-5aa4-9b3f-6194635d6caf","nextPath":"/2019/08/26/aws-lambda-でwebスクレイピングできなかったサイトについ/","nextTitle":"AWS Lambda でWebスクレイピングできなかったサイトについて","prevPath":"/2019/09/26/scoping-on-rails6/","prevTitle":"Rails 6からActiveRecordのAssociationはscopingの影響を受けなくなっている件と対処法"}}}