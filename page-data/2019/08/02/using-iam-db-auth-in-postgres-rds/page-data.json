{"componentChunkName":"component---src-templates-post-js","path":"/2019/08/02/using-iam-db-auth-in-postgres-rds/","result":{"data":{"wordpressPost":{"id":"ea77850a-38a1-5de9-8280-9468d289ab38","title":"PostgreSQLなRDSでIAM Database Authenticationを使ってみた","excerpt":"<p>最近、とあるPostgreSQLなRDS（Auroraでない）を運用しているのですが、普通にRailsから使っているのとは別に、Lambdaからも接続する要件があり、表題のIAM Database Authenticat [&hellip;]</p>\n","slug":"using-iam-db-auth-in-postgres-rds","content":"\n<p>最近、とあるPostgreSQLなRDS（Auroraでない）を運用しているのですが、普通にRailsから使っているのとは別に、Lambdaからも接続する要件があり、表題のIAM Database Authenticationを試してみたのでここに記します。<br>ちなみに、LambdaからRDSへの接続は<a rel=\"noreferrer noopener\" href=\"https://www.keisuke69.net/entry/2017/06/21/121501\" target=\"_blank\">不特定多数からのアクセス用途では推奨されていない話</a>は有名ですが、今回は定期実行（1日に数回）のLambdaなので問題無しです。</p>\n\n\n\n<h2 id=\"IAM-Database-Authentication\"><a href=\"https://hackmd.io/h6x4-En5QvaXM29WpgezyA?view#IAM-Database-Authentication\"></a>IAM Database Authentication</h2>\n\n\n\n<p>RDS固有の機能で、IAMクレデンシャルによるRDBユーザーへのログイン認証を提供する機能です。<br>接続権限を保有するクレデンシャルから、15分間有効なAWS Signature Version 4による電子署名を発行し、これをログインパスワードに用いる事で認証を行おうと言うコンセプトです。</p>\n\n\n\n<p>これにより、DBのパスワードを直接アプリに持たせる事なく運用が可能で、他にもメリットがいくつかあるのですが詳しくは<a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html\" target=\"_blank\" rel=\"noreferrer noopener\">公式ドキュメントへ</a>。</p>\n\n\n\n<p><strong>使えるバージョン</strong></p>\n\n\n\n<p>ただし、この機能の利用には制限があり、次の条件下でのみ利用可能となっています (PostgreSQLのみ記載):</p>\n\n\n\n<ul><li class=\"\">PostgreSQL（非Aurora）: 9.6.11、および10.6以降が対象</li><li class=\"\">PostgreSQL互換のAurora: 9.6.9、および10.4以降が対象</li></ul>\n\n\n\n<p>いずれにしてもPostgreSQLの場合はインスタンスタイプの制限が無いようです。（MySQLにはある）</p>\n\n\n\n<p><strong>利用制限</strong></p>\n\n\n\n<p>使っているインスタンスイプにより、秒間の最大接続数が制限される事がある、と公式ドキュメントには書かれていますが具体的な事は現時点では書かれていません。<br>ただ、特に今回のLambdaの様にたまにしかDBにアクセスしない様なワークロードでは問題なく使えそうです。</p>\n\n\n\n<h2 id=\"設定編\"><a href=\"https://hackmd.io/h6x4-En5QvaXM29WpgezyA?view#%E8%A8%AD%E5%AE%9A%E7%B7%A8\"></a>設定編</h2>\n\n\n\n<p>RDSは既に準備している物とします。今回は非AuroraのRDSを使っていますが、作業内容はほぼ一緒です。</p>\n\n\n\n<p><strong>IAM DB authenticationを有効にする</strong></p>\n\n\n\n<p>作成時に有効にしていない場合は、インスタンス（Auroraの場合はクラスタ）詳細の「Modify」から変更が可能です。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-1041\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image.png?w=472&amp;ssl=1 472w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image.png?resize=300%2C78&amp;ssl=1 300w\" sizes=\"(max-width: 472px) 100vw, 472px\" data-recalc-dims=\"1\" /><figcaption>RDSインスタンス設定の変更画面</figcaption></figure>\n\n\n\n<p></p>\n\n\n\n<p><strong>専用のPostgreSQLユーザーを作成する</strong></p>\n\n\n\n<p>ユーザー作成及び権限付与の権限を持っているユーザーで以下を実行:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nCREATE USER iam_user WITH LOGIN;\nGRANT rds_iam TO iam_user;\n</pre>\n\n\n<p>今回はユーザー名を&nbsp;<code>iam_user</code>&nbsp;としました。<br>また、&nbsp;<code>rds_iam</code>&nbsp;を付与されたユーザーは通常のパスワードログインができなくなるので専用のユーザーを作る必要があります。</p>\n\n\n\n<p><strong>署名作成用のポリシーを作成</strong></p>\n\n\n\n<p>実際に接続を行うリソースが持つIAM Roleないしはユーザーに&nbsp;<code>rds-db:connect</code>&nbsp;権限を付与します。今回はLambdaの実行Roleに対して以下のポリシーを付与します:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: [\n                &quot;rds-db:connect&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;arn:aws:rds-db:リージョン:AWSアカウントID:dbuser:DbiリソースID/iam_user&quot;\n            ]\n        }\n    ]\n}\n</pre>\n\n\n<p><code>リージョン</code>,&nbsp;<code>AWSアカウントID</code>&nbsp;は適宜読み替えて下さい。<br><code>DbiリソースID</code>&nbsp;とは、リージョン毎に固有なDBのIDで、&nbsp;<code>db-ABCDEFGHIJKL01234</code>&nbsp;の様な形式を持ち、これもインスタンス（Auroraの場合はクラスタ）の “Configuration” タブで確認ができます:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-1.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-1042\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-1.png?w=387&amp;ssl=1 387w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-1.png?resize=300%2C60&amp;ssl=1 300w\" sizes=\"(max-width: 387px) 100vw, 387px\" data-recalc-dims=\"1\" /><figcaption>RDSインスタンスの詳細画面</figcaption></figure>\n\n\n\n<p>最後は先程追加したPostgreSQLのユーザー名です。<br>因みに、&nbsp;<code>arn:aws:rds-db:リージョン:AWSアカウントID:dbuser:DbiリソースID/*</code>&nbsp;や&nbsp;<code>arn:aws:rds-db:リージョン:AWSアカウントID:dbuser:*/*</code>&nbsp;の様にワイルドカードを使って一括許可も可能です。</p>\n\n\n\n<p>また、Management Consoleで&nbsp;<code>rds-db:connect</code>&nbsp;の付与を行うと以下の通り、存在しない権限として警告が表示されますが無視して良いそうです:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-2.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-1043\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-2.png?w=887&amp;ssl=1 887w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-2.png?resize=300%2C23&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-2.png?resize=768%2C59&amp;ssl=1 768w\" sizes=\"(max-width: 887px) 100vw, 887px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>尚、AdministratorAccess等のIAMの管理権限を持っているユーザーはポリシーの付与が無くても大丈夫なようです。</p>\n\n\n\n<h2 id=\"実際に認証してみる\"><a href=\"https://hackmd.io/h6x4-En5QvaXM29WpgezyA?view#%E5%AE%9F%E9%9A%9B%E3%81%AB%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"></a>実際に認証してみる</h2>\n\n\n\n<p><strong>CLIから接続</strong></p>\n\n\n\n<p>まずは&nbsp;<code>psql</code>&nbsp;を使ってCLIから認証を試してみます。パスワードとしてのトークンを得るため、先程設定したRoleまたはユーザーを使って以下のコマンドを実行してみます:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ aws --region ap-northeast-1 rds generate-db-auth-token --hostname postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com --port 5432 --username iam_user\n\npostgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com:5432/?Action=connect&amp;amp;DBUser=iam_user&amp;amp;X-Amz-Algorithm=AWS4-HMAC-SHA256...\n</pre>\n\n\n<p>するとご覧のような署名が返されます。これが15分間だけ有効な&nbsp;<code>iam_user</code>&nbsp;のパスワードとなります。<br>ちなみに、このコマンドはクレデンシャル情報に基づいたAWS Signature Version 4による事前署名なので、ネットワークを経由する事なく計算が可能で、権限さえあれば生成可能です。したがって必ずしもPostgreSQLにログインを行うマシンから実行をする必要はありません。</p>\n\n\n\n<p>また、&nbsp;<a href=\"https://docs.aws.amazon.com/cli/latest/reference/rds/generate-db-auth-token.html\" target=\"_blank\" rel=\"noreferrer noopener\">generate-db-auth-token</a>&nbsp;は&nbsp;<code>--port</code>&nbsp;を含めて全optionが必須となっています。</p>\n\n\n\n<p>この結果を、&nbsp;<code>PGPASSWORD</code>&nbsp;環境変数に入れて、&nbsp;<code>psql</code>&nbsp;でログインしてみましょう:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ export PGPASSWORD=`aws --region ap-northeast-1 rds generate-db-auth-token --hostname postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com --port 5432 --username iam_user`\n$ psql &quot;host=postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com port=5432 user=iam_user dbname=postgres&quot;\n\npsql (11.4, server 11.2)\nSSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)\nType &quot;help&quot; for help.\n\npostgres=&gt;\n</pre>\n\n\n<p>無事にログインができました。<br>15分が経過したあと再認証してみましたが、無事却下されました:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ psql &quot;host=postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com port=5432 user=iam_user dbname=postgres&quot;\n\npsql: FATAL:  PAM authentication failed for user &quot;iam_user&quot;\n</pre>\n\n\n<h2 id=\"Lambdaから認証\"><a href=\"https://hackmd.io/h6x4-En5QvaXM29WpgezyA?view#Lambda%E3%81%8B%E3%82%89%E8%AA%8D%E8%A8%BC\"></a>Lambdaから認証</h2>\n\n\n\n<p>今回はLambdaで使っているので、以下はNode.jsでの接続例です:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nconst AWS = require(&quot;aws-sdk&quot;);\nconst fs = require(&quot;fs&quot;);\nconst pg = require(&quot;pg&quot;);\n\nconst signer = new AWS.RDS.Signer({\n    region: &quot;ap-northeast-1&quot;,\n    hostname: &quot;postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com&quot;,\n    port: 5432,\n    username: &quot;iam_user&quot;\n});\n\nconst pgClient = new pg.Client({\n    host: &quot;postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com&quot;,\n    user: &quot;iam_user&quot;,\n    database: &quot;postgres&quot;,\n    password: signer.getAuthToken(),\n    ssl: {\n        ca: fs.readFileSync(__dirname + &quot;/rds-ca-2015-root.pem&quot;).toString(),\n    }\n});\n</pre>\n\n\n<p>今回、PostgreSQLのクライアントとして&nbsp;<a href=\"https://www.npmjs.com/package/pg\" target=\"_blank\" rel=\"noreferrer noopener\">pg</a>&nbsp;と言うnpmを使っています。<br>また、その際SSLを明示的に有効化する必要があったので、AWSが配布しているRoot証明書 (<a href=\"https://s3.amazonaws.com/rds-downloads/rds-ca-2015-root.pem\" target=\"_blank\" rel=\"noreferrer noopener\">https://s3.amazonaws.com/rds-downloads/rds-ca-2015-root.pem</a>) を使いました。</p>\n\n\n\n<h2 id=\"おまけ-Scalaから接続編\"><a href=\"https://hackmd.io/h6x4-En5QvaXM29WpgezyA?view#%E3%81%8A%E3%81%BE%E3%81%91-Scala%E3%81%8B%E3%82%89%E6%8E%A5%E7%B6%9A%E7%B7%A8\"></a>おまけ (Scalaから接続編)</h2>\n\n\n\n<p>実はScalaで書かれているあるバッチ（これも1日数回定期実行）でも使っているので、ついでに書いておきます:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport com.amazonaws.services.rds.auth.{GetIamAuthTokenRequest, RdsIamAuthTokenGenerator}\n\nval tokenGenerator = RdsIamAuthTokenGenerator.builder\n  .credentials(new DefaultAWSCredentialsProviderChain)\n  .region(&quot;ap-northeast-1&quot;)\n  .build\n\nval password = tokenGenerator.getAuthToken(\n  GetIamAuthTokenRequest.builder\n    .hostname(&quot;postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com&quot;)\n    .port(5432)\n    .userName(&quot;iam_user&quot;)\n    .build\n)\n\nConnectionPool.singleton(\n  &quot;jdbc:postgresql://postgres.xxxxxxxxxx.ap-northeast-1.rds.amazonaws.com:5432/postgres&quot;,\n  &quot;iam_user&quot;,\n  password\n)\n</pre>\n\n\n<p>PostgreSQLのクライアントは<a href=\"http://scalikejdbc.org/\" target=\"_blank\" rel=\"noreferrer noopener\">ScalikeJDBC</a>です。また、&nbsp;<a href=\"https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-rds\" target=\"_blank\" rel=\"noreferrer noopener\">aws-java-sdk-rds</a>&nbsp;のインストールも必要です。</p>\n","dateObject":"2019-08-02T08:15:30.000Z","date":"August 02, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"IAM","slug":"iam"},{"name":"PostgreSQL","slug":"postgresql"},{"name":"RDB","slug":"rdb"},{"name":"RDS","slug":"rds"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/Screen-Shot-2019-08-02-at-16.21.11.png"},"wordpress_id":1039}},"pageContext":{"id":"ea77850a-38a1-5de9-8280-9468d289ab38","nextPath":"/2019/07/23/tips-of-eager-loading-in-laravel/","nextTitle":"Laravel の eager loading に関する小ネタ","prevPath":"/2019/08/08/package-jsonとpackage-lock-jsonの運用方法について/","prevTitle":"package.jsonとpackage-lock.jsonの運用方法について"}}}