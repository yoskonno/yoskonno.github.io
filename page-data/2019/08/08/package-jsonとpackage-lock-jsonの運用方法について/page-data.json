{"componentChunkName":"component---src-templates-post-js","path":"/2019/08/08/package-jsonとpackage-lock-jsonの運用方法について/","result":{"data":{"wordpressPost":{"id":"a71ccf8d-ba00-5858-b34b-5cf77a979c8f","title":"package.jsonとpackage-lock.jsonの運用方法について","excerpt":"<p>はじめに パッケージ管理ツールnpmでのpackage.jsonとpackage-lock.jsonの違いや運用方法など、曖昧な点が多かったので調べてまとめてみました。基本的な内容かと思いますが、 参考になれば幸いです。 [&hellip;]</p>\n","slug":"package-json%e3%81%a8package-lock-json%e3%81%ae%e9%81%8b%e7%94%a8%e6%96%b9%e6%b3%95%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","content":"\n<h2><strong>はじめに</strong></h2>\n\n\n\n<p>パッケージ管理ツールnpmでのpackage.jsonとpackage-lock.jsonの違いや運用方法など、曖昧な点が多かったので調べてまとめてみました。基本的な内容かと思いますが、 参考になれば幸いです。</p>\n\n\n\n<h2><strong>なぜpackage-lock.jsonが必要なのか？</strong></h2>\n\n\n\n<p>npmのv5以降に導入されたpackage-lock.jsonですが、npm installを実行した際にインストールされるパッケージのバージョンをpackage-lock.jsonに記載されたバージョンで固定することができ、全ての開発者で同じパッケージの環境を再現することができます。一方、package.jsonだけしかない場合では、npm installしたときに、それぞれの開発者で別バージョンのパッケージをインストールしてしまう可能性があります。 </p>\n\n\n\n<h2><strong>Git管理下では結局どのように運用すればいいの</strong>？</h2>\n\n\n\n<p>package-lock.jsonもpackage.jsonと同様にコミットしてGit管理に含める必要があります。 </p>\n\n\n\n<p>package.jsonだけではなく、package-lock.jsonもGit管理に含めることによって先述したようにインストールされるパッケージのバージョンを固定することができ、それぞれの開発者の環境でpackage-lock.jsonに指定されたバージョンの環境をnpm installによって再現することができるからです。 </p>\n\n\n\n<p>なので、ファイルが巨大になってしまうnode_moduleディレクトリのみgitignoreしてgit管理から外しておいて、package.jsonとpackage-lock.jsonは両方ともコミットするようにしましょう。 </p>\n\n\n\n<h2><strong>package-lock.jsonがある場合とない場合の違い</strong></h2>\n\n\n\n<p>実際にpackage-lock.jsonがある場合にパッケージのバージョンが固定されているかどうかpackage-lock.jsonがある場合とない場合の違いを確認してみました。（npmのバージョンはv6.10.1） </p>\n\n\n\n<p>こちらのサンプルでインストールするパッケージはlodashを使用しました。仮にlodashのv4.8.0が最新版だった時点でnpm install lodashを実行してパッケージをインストールしたとすると、以下のようなpackage.jsonになるかと思います。（npm install lodash@4.8.0と同じ結果になります） </p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"dependencies\": {\n    \"lodash\": \"^4.8.0\"\n}</code></pre>\n\n\n\n<p>ここでlodashのバージョンは「^4.8.0」となっていますが、これは4.8.0以上の4.x.xのバージョンだったらなんでもOK、という意味です。<code>npm ls</code>を実行すると、以下のようにv4.8.0がインストールされたことがわかります。 </p>\n\n\n\n<pre class=\"wp-block-code\"><code>lodash@4.8.0</code></pre>\n\n\n\n<h2><strong>package-lock.jsonなしでnpm installした場合</strong></h2>\n\n\n\n<p>では、このようにv4.8.0が最新版だった時点でインストールされて更新されたpackage.jsonのみがコミットされていたブランチをチェックアウトし、package-lock.jsonがない状態で本日（2019年8月8日）にnpm installを実行すると、以下のようにpakcage-lock.jsonが生成されます。<code>npm ls</code>を実行すると、 現時点での最新版v4.17.15が実際にインストールされていることがわかります。 </p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"dependencies\": {\n    \"lodash\": {\n        \"version\": \"4.17.15\",\n        \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz\",\n        ...\n    }\n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>lodash@4.17.15</code></pre>\n\n\n\n<p>つまり、package-lock.jsonなしではpackage.jsonが全く同一でも、npm installを実行したタイミングによっては実際にインストールされるパッケージのバージョンが異なるということになります。 </p>\n\n\n\n<p>これはpackage.jsonでのlodashのバージョンの指定が&#8221;^4.8.0&#8243;（4.8.0以上の4.x.xのバージョンだったらなんでもOK）となっているために、現時点での最新版であるv4.17.15がダウンロードされたためです。 </p>\n\n\n\n<p><a href=\"https://semver.npmjs.com/\">https://semver.npmjs.com/</a></p>\n\n\n\n<p>こちらのサービスは^などを使ってpackage.jsonでパッケージのバージョンを指定した場合の、該当するバージョンをわかりやすく示してくれます。下の画像の緑色のバージョンが^4.8.0と指定したときの該当のバージョンで、これの一番最新のv4.17.15がインストールされたということがわかります。 </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/engineering.mobalab.net/wp-content/uploads/2019/08/image-3.png?fit=680%2C529&amp;ssl=1\" alt=\"\" class=\"wp-image-1057\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-3.png?w=1506&amp;ssl=1 1506w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-3.png?resize=300%2C233&amp;ssl=1 300w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-3.png?resize=768%2C598&amp;ssl=1 768w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/image-3.png?resize=1024%2C797&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<h2><strong>上のケースでもしpackage-lock.jsonがコミットされていた場合</strong></h2>\n\n\n\n<p>それでは、npm install lodashを実行してv 4.8.0のパッケージをインストールした時点で、package-lock.jsonが生成され、次のようなpackage-lock.jsonがコミットされてい場合はどうでしょうか。（実際には実は上のような例でもともとv 4.8.0をインストールしたのが2016年頃としているので、pakcage-lock.json自体がその時点では存在しないのですが、説明のための仮の話としてご容赦ください・・！このサンプルではnpm install lodash@4.8.0のようにして2016年あたりの最新版のv4.8.0を指定してインストールしています。） </p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"dependencies\": {\n    \"lodash\": {\n        \"version\": \"4.8.0\",\n        \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.8.0.tgz\",\n        ...\n    }\n}</code></pre>\n\n\n\n<p>このようにpackage-lock.jsonがある状態でnpm installを実行した場合は、package-lock.jsonに指定されているバージョン（ここではv4.8.0）がインストールされ、package-lock.jsonに差分は発生しません。 <code>npm ls</code>を実行しても、以下のようにv4.8.0がインストールされていることがわかります。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>lodash@4.8.0</code></pre>\n\n\n\n<p>4.8.0よりも新しいバージョンが存在し（記事執筆の時点ではv4.17.15）、かつpackage.jsonに記載されている条件を満たしているのですが、package-lock.jsonに明記されているバージョンであるv4.8.0が優先されています。 </p>\n\n\n\n<p>よって、package-lock.jsonがコミットされていれば、全ての開発者でpackage-lock.jsonに明記された同じバージョンのパッケージのインストールが実現できることになります。</p>\n\n\n\n<h3><strong>npm ciとnpm installの違いとは？</strong></h3>\n\n\n\n<p>package-lock.jsonについて調べると、stackoverflowなども含めてもnpm installではなく、npmのv5.7.1から利用可能になったコマンド、npm ciを使うように勧めている記事もあります。 </p>\n\n\n\n<p><a href=\"https://docs.npmjs.com/cli/ci.html\">https://docs.npmjs.com/cli/ci.html</a></p>\n\n\n\n<p>npm ciとはドキュメントによると継続的インテグレーション（CI）環境などでnpm installの代わりに使用が推奨されているコマンドです。こちらもnpm installと同様にpackage-lock.jsonをもとにパッケージのインストールを行うのですが、npm installとは違い以下のような特徴があるようです。 </p>\n\n\n\n<ul><li>node_moduleフォルダは実行時に一旦削除されてからインストールが行われる </li><li>package.jsonとpackage-lock.jsonのバージョンに違いがある場合はエラーを返し、いずれのファイルの上書きも行わない </li></ul>\n\n\n\n<p>継続的インテグレーション（CI）環境以外の開発の場面で、例えばリポジトリからブランチをプルした後に開発者の各環境でパッケージのインストールを実行するのに例えば以下の記事などでもnpm installの代わりにnpm ciが推奨されているようです。 </p>\n\n\n\n<p><a href=\"https://medium.com/better-programming/npm-ci-vs-npm-install-which-should-you-use-in-your-node-js-projects-51e07cb71e26\">https://medium.com/better-programming/npm-ci-vs-npm-install-which-should-you-use-in-your-node-js-projects-51e07cb71e26</a></p>\n\n\n\n<h3>実際は<strong>通常の開発環境下ではnpm installで問題なさそう</strong></h3>\n\n\n\n<p>しかし、実際には各開発者の環境で同一のバージョンのパッケージを揃えるという目的では通常通りnpm installを使うことでpackage-lock.jsonがあれば問題なくバージョンを揃えることができます。なので通常のローカルの開発環境下などではnpm installで問題なさそうです。 </p>\n\n\n\n<p>では、なぜnpm installは時に信頼されず、npm ciが推奨されていることがあるのでしょうか。それはnpmにpackage-lock.jsonが導入されたバージョン（v5.0.0）の後のいくつかのバージョンでは、不必要にpackage-lock.jsonがアップデートされてしまったり、逆にpackage.jsonに変更があった場合でもpackage-lock.jsonに変更があった場合でもpackage-lock.jsonが更新されなかったりといろいろとユーザーに混乱が生じていたようです。 </p>\n\n\n\n<p>そのためにnpm installというのはあまり信用できず、v5.7.1で導入されたnpm ciの使用が推奨されていることもあるようですが、どのバージョンで完全に修正されたのかは調べてもはっきりとしなかったのですが、実際には最近のバージョン（リリースログを見ても分かりづらかったのですが、2017年にはリリースされていた少なくともv5.4.2以降あたり？）のnpmではnpm installでpackage-lock.jsonが不必要に更新されるというような問題はなく、きちんとバージョンの固定をしてくれるようです。 </p>\n\n\n\n<p>npm installの時発生する問題についての参考リンク<br><a href=\"https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json\">https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json</a><br><a href=\"https://npm.community/t/package-lock-json-contains-dynamic-version/6080/4\">https://npm.community/t/package-lock-json-contains-dynamic-version/6080/4</a></p>\n\n\n\n<h2><strong>まとめ</strong></h2>\n\n\n\n<p>今までなんとなく理解していたpackage-lock.jsonについて調べてみたところ、過去のバージョンでの不具合などいろいろな経緯があったことがわかりました。古いバージョンのnpmではyarnなどに比べてpackage-lock.jsonでのパッケージの固定に関してあまり信用できないという部分があったようです。</p>\n\n\n\n<p>しかし、最新版のnpmではこのあたりの問題は解決されて、pakcage-lock.jsonは信頼できるものとなっているようです。また、余談ですがインストールのスピードなども現在のnpmではyarnに比べて遜色ないものとなっているようです。なので、これからは安心してnpmを使っていきましょう！ </p>\n","dateObject":"2019-08-08T05:00:11.000Z","date":"August 08, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"npm","slug":"npm"}],"author":{"name":"Konno","slug":"konno"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/npm_logo.png?fit=768%2C442&ssl=1","height":442,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/npm_logo.png"},"wordpress_id":1056}},"pageContext":{"id":"a71ccf8d-ba00-5858-b34b-5cf77a979c8f","nextPath":"/2019/08/02/using-iam-db-auth-in-postgres-rds/","nextTitle":"PostgreSQLなRDSでIAM Database Authenticationを使ってみた","prevPath":"/2019/08/16/use-dropbox-replacement-nextcloud-on-conoha-vps/","prevTitle":"Dropbox 代替の Nextcloud を ConoHa VPS で使用する"}}}