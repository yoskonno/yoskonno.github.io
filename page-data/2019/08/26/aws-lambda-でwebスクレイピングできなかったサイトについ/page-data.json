{"componentChunkName":"component---src-templates-post-js","path":"/2019/08/26/aws-lambda-でwebスクレイピングできなかったサイトについ/","result":{"data":{"wordpressPost":{"id":"d51b43af-6ea3-5a35-8dcb-7b4d97f6bbdc","title":"AWS Lambda でWebスクレイピングできなかったサイトについて","excerpt":"<p>ちょっと前に書いた以下のWebスクレイピングの記事に関してですが、結局AWS Lambdaでは動かすことができず、EC2で妥協したサイトが２種類ほどありましたので、情報を残しておきたいと思います。 メール認証が必要なサイ [&hellip;]</p>\n","slug":"aws-lambda-%e3%81%a7web%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ab%e3%81%a4%e3%81%84","content":"\n<p>ちょっと前に書いた以下のWebスクレイピングの記事に関してですが、結局AWS Lambdaでは動かすことができず、EC2で妥協したサイトが２種類ほどありましたので、情報を残しておきたいと思います。</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-もばらぶエンジニアブログ\"><div class=\"wp-block-embed__wrapper\">\n<div class=\"oceanwp-oembed-wrap clr\"><blockquote class=\"wp-embedded-content\" data-secret=\"6Z5nAyzL2I\"><a href=\"https://stg-engineering-wp.mobalab.net/2019/06/10/aws-lambda%e4%b8%8a%e3%81%a7web%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0/\">AWS Lambda上でWebスクレイピング</a></blockquote><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;AWS Lambda上でWebスクレイピング&#8221; &#8212; もばらぶエンジニアブログ\" src=\"https://stg-engineering-wp.mobalab.net/2019/06/10/aws-lambda%e4%b8%8a%e3%81%a7web%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0/embed/#?secret=6Z5nAyzL2I\" data-secret=\"6Z5nAyzL2I\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></div>\n</div></figure>\n\n\n\n<h2>メール認証が必要なサイト</h2>\n\n\n\n<p>ユーザー名とパスワードの認証が終わった後にSMSやメールに認証コードが送られてきて、それを入力しなければならないため、AWS Lambdaで動作させることは難しいと判断しました。Lambdaは毎回違うインスタンスが立ち上がるためパスワードを記憶させることは出来ないという結論に至りました。</p>\n\n\n\n<h2>キャプチャ認証が必要なサイト</h2>\n\n\n\n<p>seleniumでキャプチャ認証を突破する有料サービスはあるのですが、セキュリティ面と手間がかかることを考慮してLambdaで動かすことは断念しました。</p>\n\n\n\n<p>キャプチャ認証を突破する方法は以下のサイトが分かりやすいと思います。</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-たぬハック\"><div class=\"wp-block-embed__wrapper\">\nhttps://tanuhack.com/python/pr-2captcha/\n</div></figure>\n\n\n\n<h2>EC2で動作させるためのノウハウ</h2>\n\n\n\n<p>今回、自動化を難しくしているサイトの特徴として、ログイン認証が複雑なことがネックになることが分かりました。EC2ではLambdaとは違いGUIでブラウザのウィンドウを立ち上げてWebスクレイピングすることができますので、このGUIを初回だけ人が操作して認証を突破し、パスワードを記憶させて、２回目以降は認証なしでサイトにアクセス出来るようにしました。</p>\n\n\n\n<p>パスワードをブラウザに記憶させるコツですが、初回用に以下のようなPythonプログラムを作って対応します。ログインページにアクセスした後、長時間スリープさせておいて、その間に各種の認証を突破します。</p>\n\n\n<pre class=\"brush: python; title: ; notranslate\" title=\"\">\ntry:\n    import unzip_requirements\nexcept ImportError:\n    pass\n \nimport sys\nimport os\nimport time\nimport calendar\nimport datetime\nimport logging\nimport subprocess\nimport post_to_chatwork\nimport boto3\nimport shutil\nfrom glob import glob\nfrom pathlib import Path\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support.ui import Select\n\nmode2bucket = {\n    'dev': 'sample-scraping-dev-us-east-1',\n    'pro': 'sample-scraping'\n}\n\ndef post_to_chat(title, body):\n    ptc = post_to_chatwork.PostToChatwork(title, body)\n    ptc.post_to_chatwork()\n    del ptc\n  \ndef main(event, context):\n    print(&quot;main start&quot;) \n\n    # レベル\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n\n    STAGE = os.environ['selected_stage']\n    print(&quot;stage[%s]&quot; % STAGE)\n\n    MODE = os.environ['scraping_mode']\n    print(&quot;mode[%s]&quot; % MODE)\n\n    prog_name = os.path.splitext(os.path.basename(__file__))[0]\n    if context:\n        print(&quot;start lambda_handler() [%s]&quot; % context.function_name)\n\n    #today\n    d = datetime.datetime.today()\n    #yesterday\n    d2 = d - datetime.timedelta(days=1)\n\n    target_url = 'https://sample.sample/'\n    user_id = 'sample@sample.sample'\n    password = os.environ['user_password']\n\n    try:\n        options = webdriver.ChromeOptions()\n        options.binary_location = &quot;/opt/google/chrome/chrome&quot;\n        # options.add_argument(&quot;--headless&quot;)\n        # options.add_argument(&quot;--disable-gpu&quot;)\n        # options.add_argument(&quot;--window-size=1280x1696&quot;)\n        # options.add_argument(&quot;--disable-application-cache&quot;)\n        # options.add_argument(&quot;--disable-infobars&quot;)\n        # options.add_argument(&quot;--no-sandbox&quot;)\n        # options.add_argument(&quot;--hide-scrollbars&quot;)\n        # options.add_argument(&quot;--enable-logging&quot;)\n        # options.add_argument(&quot;--log-level=0&quot;)\n        # options.add_argument(&quot;--single-process&quot;)\n        # options.add_argument(&quot;--ignore-certificate-errors&quot;)\n        options.add_argument(&quot;--homedir=/tmp&quot;)\n        options.add_argument(&quot;--user-data-dir=/home/ubuntu/.config/google-chrome/Default&quot;)\n        driver = webdriver.Chrome(options=options, executable_path='./bin/chromedriver')\n        driver.command_executor._commands[&quot;send_command&quot;] = (\n            &quot;POST&quot;,\n            '/session/$sessionId/chromium/send_command'\n        )\n        params = {\n            'cmd': 'Page.setDownloadBehavior',\n            'params': {\n                'behavior': 'allow',\n                'downloadPath': '/tmp'\n            }\n        }\n        driver.execute(&quot;send_command&quot;, params=params)\n        driver.implicitly_wait(10)\n        driver.get(target_url)\n\n        # login\n        print(&quot;before log in&quot;)\n        # driver.find_element_by_name(&quot;rememberMe&quot;).click()\n        # driver.find_element_by_id(&quot;email&quot;).send_keys(user_id)\n        # driver.find_element_by_id(&quot;password&quot;).send_keys(password)\n        # driver.find_element_by_id(&quot;signIn&quot;).click()\n        print(&quot;after log in&quot;)\n        print(driver.current_url)\n        time.sleep(1000)\n\n        # 手動による認証が終わったらCtrl+Cなどでプロセスを終了させる\n</pre>\n\n\n<ul><li>ヘッドレスchromeから普通の画面ありchromeに変更したため、options.binary_locationのパスを修正しました。</li><li>options.add_argument(&#8220;&#8211;headless&#8221;)以下のオプションは画面ありchromeで不要なため、削除しています。</li><li>パスワードを記憶させたいため、ユーザー情報保持用のディレクトリをoptions.add_argument(&#8220;&#8211;user-data-dir=??&#8221;)で指定しています。</li></ul>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>この２種類のサイトについては、もしREST APIが公開されていれば、使用して自動化も簡単にできたと思うのですが、残念ながら現状存在しませんでした。是非とも公開してもらえるとありがたいなぁと思う今日この頃です。</p>\n","dateObject":"2019-08-26T00:00:46.000Z","date":"August 26, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"ec2","slug":"ec2"},{"name":"Lambda","slug":"lambda"},{"name":"scraping","slug":"scraping"}],"author":{"name":"koji","slug":"koji"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/Screen-Shot-2019-06-03-at-18.49.48.png?fit=1024%2C191&ssl=1","height":191,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/Screen-Shot-2019-06-03-at-18.49.48.png?fit=768%2C143&ssl=1","height":143,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/08/Screen-Shot-2019-06-03-at-18.49.48.png"},"wordpress_id":1087}},"pageContext":{"id":"d51b43af-6ea3-5a35-8dcb-7b4d97f6bbdc","nextPath":"/2019/08/16/enable-github-darkmode-with-stylish/","nextTitle":"（小ネタ）GitHubDarkを使ってGitHubをダークモードなUIにする","prevPath":"/2019/09/25/jmeter-on-k8s-eks/","prevTitle":"JMeter on k8s (EKS)"}}}