{"componentChunkName":"component---src-templates-post-js","path":"/2019/10/01/guiありのwebスクレイピングを定期実行する/","result":{"data":{"wordpressPost":{"id":"9199e1bc-dd53-5116-b786-d8635339ae6e","title":"GUIありのWebスクレイピングを定期実行する","excerpt":"<p>GUIありのWebスクレイピングというのは、バックグラウンドではなく実際にGUIでブラウザが立ち上がって、まるでゴーストが勝手にボタンを押しているかのように自動でWeb画面が遷移していくという手法のことを指します。 オン [&hellip;]</p>\n","slug":"gui%e3%81%82%e3%82%8a%e3%81%aeweb%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%e3%82%92%e5%ae%9a%e6%9c%9f%e5%ae%9f%e8%a1%8c%e3%81%99%e3%82%8b","content":"\n<p>GUIありのWebスクレイピングというのは、バックグラウンドではなく実際にGUIでブラウザが立ち上がって、まるでゴーストが勝手にボタンを押しているかのように自動でWeb画面が遷移していくという手法のことを指します。</p>\n\n\n\n<p>オンプレミスLinuxサーバーであれば環境の構築はそこまで大変ではないかもしれませんが、AWS EC2のようなクラウド上のLinuxで同じことをやろうとすると少し手間がかかりますので手順を残しておきたいと思います。</p>\n\n\n\n<h2>環境</h2>\n\n\n\n<p>以下のような構成でEC2を立ち上げて、EC2上でWebスクレイピングを行います。Workspacesは仕事上の都合で開発環境として使っていますが、実はこれがEC2のGUIアプリを起動する際の肝となりますので後ほど説明します。</p>\n\n\n\n<p>自分のMac book pro  -&gt;  Amazon Workspaces  -&gt;  EC2</p>\n\n\n\n<ul><li>Ubuntu Server 18.04 LTS（EC2のOS）</li><li>Python 3.6</li></ul>\n\n\n\n<h2>EC2インスタンスの作成</h2>\n\n\n\n<p>最新のUbuntu Server 18のAMIからインスタンスを作成します。ストレージは20GBあればとりあえずは足ります。</p>\n\n\n\n<h2>EC2にSSH</h2>\n\n\n\n<p>Mac book proのWorkspacesアプリで開発環境にログイン後、ターミナルを開いて上記EC2インスタンスに接続します。以降、このSSHしたUbuntu Serverに必要なパッケージ等をインストールします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nssh -A ubuntu@10.125.XX.XX\n</pre>\n\n\n<h2>Python3のインストール</h2>\n\n\n\n<p>存在しない場合はインストールします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo apt install python3    # インストール済みなら不要\npython3 -V\n</pre>\n\n\n<h2>pipのインストール</h2>\n\n\n\n<p>存在しない場合はインストールします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo apt-get install libpython3.6-stdlib\nsudo apt-get install python3-distutils\ncurl -kL https://bootstrap.pypa.io/get-pip.py | sudo python3 \n</pre>\n\n\n<h2>パッケージのインストール</h2>\n\n\n\n<p>スクレイピングに必要なパッケージをインストールします。スクレイピング構成に応じて必要なパッケージは変わると思いますので、不足しているパッケージがある場合は各自で追加する必要があります。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo pip install boto3\nsudo pip install beautifulSoup4\nsudo pip install selenium\n</pre>\n\n\n<h2>xrdpのインストール</h2>\n\n\n\n<p>Ubuntu ServerにGUIでログインできるようにするため、リモートデスクトップを可能にするxrdpをインストールします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo apt-get install libnss3-dev\nsudo apt install libgconf2-4\nsudo apt-get install -y libappindicator1 fonts-liberation libasound2 libnspr4 libnss3 libxss1 lsb-release xdg-utils\nsudo apt-get update\nsudo apt-get install lxde-core\nsudo apt-get install xrdp\n</pre>\n\n\n<h2>ログインの設定</h2>\n\n\n\n<p>リモートデスクトップするためにパスワードとx-session-managerの設定をします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo passwd ubuntu\nsudo update-alternatives --config x-session-manager\n# 4 /usr/bin/startlxde 50 を選択\n</pre>\n\n\n<h2>dockerのIPアドレスを変更</h2>\n\n\n\n<p>今の時点でこの設定をする必要はないですが、スクレイピングを動かしてIPアドレスがかぶった場合は変更する必要がありますので、一応載せておきます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo systemctl stop docker\nsudo ip link set dev docker0 down\nsudo brctl delbr docker0\nsudo vi /etc/docker/daemon.json\nsudo systemctl start docker\n</pre>\n\n\n<p>daemon.jsonは以下ようになっているので、IPを被らないものに変更します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n    &quot;bip&quot;: &quot;172.18.0.1/24&quot;\n}\n</pre>\n\n\n<h2>Pythonのコードをデプロイ</h2>\n\n\n\n<p>sample01.pyの中身は以下の記事が参考になります。今回やろうとしていることは以下の記事でスクレイピングできなかったサイトを定期実行するということになります。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n/home/ubuntu/\n        ├ start_scraping.sh\n        ├ start_scraping_total.sh\n        └ sample-project/\n            ├ sample01/\n                ├ sample01.py\n                └ bin/\n                    └ chromedriver\n</pre>\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-もばらぶエンジニアブログ\"><div class=\"wp-block-embed__wrapper\">\n<div class=\"oceanwp-oembed-wrap clr\"><blockquote class=\"wp-embedded-content\" data-secret=\"T4BSARUGjB\"><a href=\"https://stg-engineering-wp.mobalab.net/2019/08/26/aws-lambda-%e3%81%a7web%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ab%e3%81%a4%e3%81%84/\">AWS Lambda でWebスクレイピングできなかったサイトについて</a></blockquote><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;AWS Lambda でWebスクレイピングできなかったサイトについて&#8221; &#8212; もばらぶエンジニアブログ\" src=\"https://stg-engineering-wp.mobalab.net/2019/08/26/aws-lambda-%e3%81%a7web%e3%82%b9%e3%82%af%e3%83%ac%e3%82%a4%e3%83%94%e3%83%b3%e3%82%b0%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ab%e3%81%a4%e3%81%84/embed/#?secret=T4BSARUGjB\" data-secret=\"T4BSARUGjB\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></div>\n</div></figure>\n\n\n\n<p>start_scraping.shの中身はこんな感じです。sample01.pyを実行するだけのスクリプトです。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n#!/bin/sh\necho &quot;start&quot;\n\ncd sample-scraping\n\ncd sample01\ndate\nselected_stage=pro scraping_mode=normal user_password=???????? python3 sample01.py \ndate\n\necho &quot;end&quot;\n</pre>\n\n\n<h2>freerdpのインストール、実行</h2>\n\n\n\n<p>Workspacesにリモートデスクトップのクライアントとして機能するfreerdpをインストールします。インストール後接続を行い、GUI画面が表示され、以下のようにWindowが３層構造になります。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo yum install freerdp\nxfreerdp -u ubuntu -p ???????? 10.125.XXX.XXX\n</pre>\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/engineering.mobalab.net/wp-content/uploads/2019/09/canvas.png?fit=680%2C425&amp;ssl=1\" alt=\"\" class=\"wp-image-1157\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/canvas.png?w=2048&amp;ssl=1 2048w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/canvas.png?resize=300%2C188&amp;ssl=1 300w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/canvas.png?resize=768%2C480&amp;ssl=1 768w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/canvas.png?resize=1024%2C640&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<h2>GUIありのchromeをインストール</h2>\n\n\n\n<p>firefoxをインストール後に以下をfirefoxでダウンロードするか、wgetコマンドで直接ダウンロードしても良いです。</p>\n\n\n\n<ul><li>chrome Version 75.0.3770.100 (Official Build) (64-bit)</li><li>chromedriver 2.37.544315</li></ul>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo apt-get install firefox\n</pre>\n\n\n<p>chrome、chromedriverをインストールします。chromedriverは上記のデプロイ先のbinディレクトリに配置します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsudo dpkg -i ~/Downloads/google-chrome-stable_current_amd64.deb\nunzip chromedriver_linux64.zip \n</pre>\n\n\n<h2>cronに起動スクリプトを登録</h2>\n\n\n\n<p>Ubuntu Serverにはデスクトップ環境（GUI）に関連するパッケージをインストールしていないため、Workspacesのディスプレイ番号を使ってcronからGUIアプリ（chrome）を起動します。</p>\n\n\n\n<p>freerdpでリモートデスクトップした状態で以下のコマンドを実行して、ディスプレイIDを取得します。Workspacesのディスプレイ番号は10.0のようです。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nxdpyinfo |grep display\n</pre>\n\n\n<p>start_scraping.shがディスプレイ番号10.0で起動するようにcrontabコマンドで登録します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ncrontab -e\n</pre>\n\n\n<p>登録内容は以下のような感じです。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n0   15 *   *   *     DISPLAY=:10 /home/ubuntu/start_scraping.sh 1&gt; /home/ubuntu/start_scraping.log 2&gt; /home/ubuntu/start_scraping.log\n0   9  1,2 *   *     DISPLAY=:10 /home/ubuntu/start_scrapin_totalg.sh 1&gt; /home/ubuntu/start_scraping_total.log 2&gt; /home/ubuntu/start_scraping_total.log\n</pre>\n\n\n<p>Ubuntu Serverにデスクトップ環境（GUI）関連のパッケージをインストールすることでも実現可能だとは思いますが、今回はWorkspacesを使用することで少し簡素化して実装しました。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>AWS LambdaでWebスクレイピングできなかったサイトの自動化を無事達成することができました。AWS LambdaもしくはEC2を用いたこの手法で大体のスクレイピングは自動化できると思いますので、ぜひ試してみてください。</p>\n\n\n\n<p></p>\n","dateObject":"2019-10-01T00:00:47.000Z","date":"October 01, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"cron","slug":"cron"},{"name":"ec2","slug":"ec2"},{"name":"scraping","slug":"scraping"}],"author":{"name":"koji","slug":"koji"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/title.png?fit=1024%2C191&ssl=1","height":191,"width":1024},"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/title.png?fit=768%2C143&ssl=1","height":143,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/09/title.png"},"wordpress_id":1147}},"pageContext":{"id":"9199e1bc-dd53-5116-b786-d8635339ae6e","nextPath":"/2019/09/26/scoping-on-rails6/","nextTitle":"Rails 6からActiveRecordのAssociationはscopingの影響を受けなくなっている件と対処法","prevPath":"/2019/10/09/internal-study-sessions/","prevTitle":"社内勉強会が活発になってきた"}}}