{"componentChunkName":"component---src-templates-post-js","path":"/2019/02/25/use-multiple-aws-accounts-in-serverless/","result":{"data":{"wordpressPost":{"id":"7f929759-863e-5d9a-83cd-99dc1eafb965","title":"Serverless で複数の AWS アカウントを使用する","excerpt":"<p>はじめに Serverless  Framework とは 本ブログでも過去に何回か紹介した Serverless Framework は、AWS Lambda 関数を簡単に作成できるツールです。以下、過去記事です。 S [&hellip;]</p>\n","slug":"use-multiple-aws-accounts-in-serverless","content":"\n<h2>はじめに</h2>\n\n\n\n<h3>Serverless  Framework とは<br></h3>\n\n\n\n<p>本ブログでも過去に何回か紹介した Serverless Framework は、AWS Lambda 関数を簡単に作成できるツールです。以下、過去記事です。</p>\n\n\n\n<ul><li><a href=\"https://stg-engineering-wp.mobalab.net/2017/11/18/serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%861/\">Serverless Framework による AWS Lambda 関数の管理1 | もばらぶエンジニアブログ</a></li><li><a href=\"https://stg-engineering-wp.mobalab.net/2017/12/12/serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%862/\">Serverless Framework による AWS Lambda 関数の管理2 | もばらぶエンジニアブログ</a></li><li><a href=\"https://stg-engineering-wp.mobalab.net/2018/01/14/how-to-deploy-python-based-lambda-function-that-uses-packages/\">Serverless で Python のパッケージを使った Lambda 関数をデプロイ | もばらぶエンジニアブログ</a></li></ul>\n\n\n\n<h3>やりたいこと</h3>\n\n\n\n<p>Lambda に限った話ではありませんが、業務で AWS を使う場合、本番環境と開発・検証環境で別の AWS アカウントを使うというのは割と一般的です。本記事では、Serverless Framework で複数 AWS アカウントを使う方法を簡単に紹介します。</p>\n\n\n\n<p>今回は本番環境(pro)と開発環境(dev)という2つの環境で、異なる AWS アカウントを使うという例で説明します。</p>\n\n\n\n<h2>手順</h2>\n\n\n\n<h3>AWS CLI のプロファイルの設定</h3>\n\n\n\n<p>Serverless とは関係ありませんが、本番環境と開発環境それぞれで  IAM アカウント及びアクセスキーを作成して、プロファイルに設定しておきます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n# ~/.aws/credentials\n[foo-dev]\naws_access_key_id = AKIAAAAAAAAAAAAAAAAA\naws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n[foo-pro]\naws_access_key_id = AKIBBBBBBBBBBBBBBBBB\naws_secret_access_key = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n</pre>\n\n\n<h3>ステージ(dev, pro)毎に設定を分ける</h3>\n\n\n\n<p>Serverless には stage と言う概念があり、今回のような環境の切り替えの為に使われることが多いです。</p>\n\n\n\n<p>色々細かいことを書く前に、まずは serverless.yml の例を記載します。（本題と関係ない部分は削っていますのでご了承下さい。）</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ncustom:\n  awsAccountId:\n    dev: 111111111111\n    pro: 222222222222\n  region:\n    dev: us-east-1\n    pro: ap-northeast-1\n  deploymentBucket:\n    dev: foo-deployment-dev\n    pro: foo-deployment-pro\n  dataBucket:\n    dev: foo-dev\n    pro: foo-pro\n\nprovider:\n  name: aws\n  runtime: python3.6\n\n  stage: ${opt:stage, 'dev'}\n  region: ${self:custom.region.${self:provider.stage}}\n  # role iamRoleStatements で定義することも出来ますが、\n  # 事前に作っておき、以下の行のように指定した方が管理が楽です。\n  role: arn:aws:iam::${self:custom.awsAccountId.${self:provider.stage}}:role/Lambda_exec_role\n  deploymentBucket:\n    name: ${self:custom.deploymentBucket.${self:provider.stage}} # Deployment bucket name. Default is generated by the framework\n    serverSideEncryption: AES256 # when using server-side encryption\n\nfunctions:\n  bar_func:\n    handler: bar_func.${self:provider.stage}_handler_bar_func\n    name: ${self:provider.stage}_bar_func\n    # 以下省略\n</pre>\n\n\n<p>dev と pro によって、異なる設定が使われているのが分かるかと思います。</p>\n\n\n\n<h3>デプロイ方法</h3>\n\n\n\n<p>後は、 <code>sls</code>コマンドでデプロイするときに、引数で dev と pro を使い分けます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nsls deploy --stage pro # 本番環境へデプロイ\nsls deploy --stage dev # 開発環境へデプロイ\n</pre>\n\n\n<h2>その他の話</h2>\n\n\n\n<p>今回の例のように完全に2つの AWS アカウントに分かれているのであれば割とやりやすいですが、これとは別で（例えばデータ連係先の）第三の AWS アカウントがある場合などは、assume role を使う必要があります。IAM ロールの話は結構ややこしいので、ここでは触れません。本ページ末尾の参考ページを参照して下さい。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>一般的に、本番環境とそれ以外では AWS アカウントを分けることが推奨されています。 本記事では、 Serverless Framework で、どのように複数の環境を切り替えるかについて、基本的な部分を説明しました。<br></p>\n\n\n\n<h2>参考ページ</h2>\n\n\n\n<ul><li><a href=\"https://forum.serverless.com/t/sample-serverless-yml-for-multiple-aws-accounts-needed/1528/4\">Sample Serverless.yml for multiple AWS accounts needed! &#8211; Serverless Framework &#8211; Serverless Forums</a></li><li><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html#cli-roles-xaccount\">Assuming an IAM Role in the AWS CLI &#8211; AWS Command Line Interface</a></li><li><a href=\"https://dev.classmethod.jp/cloud/aws/iam-role-and-assumerole/\">IAMロール徹底理解 〜 AssumeRoleの正体 ｜ DevelopersIO</a></li></ul>\n\n\n\n<p></p>\n","dateObject":"2019-02-25T02:48:30.000Z","date":"February 25, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"Serverless","slug":"serverless"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=1024%2C441&ssl=1","height":441,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=768%2C331&ssl=1","height":331,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png"},"wordpress_id":652}},"pageContext":{"id":"7f929759-863e-5d9a-83cd-99dc1eafb965","nextPath":"/2019/02/18/experiment-of-open-ssl-for-secure-file-transfer/","nextTitle":"OpenSSLを使った安全なファイルの転送を検証してみる","prevPath":"/2019/03/06/allocate-secure-env-in-ssm-parameter-to-ecs-task-definition/","prevTitle":"ECSの機能でSSMのParameter Storeに格納した機密情報をTaskDefinitionに埋め込む"}}}