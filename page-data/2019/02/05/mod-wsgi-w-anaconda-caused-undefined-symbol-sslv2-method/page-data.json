{"componentChunkName":"component---src-templates-post-js","path":"/2019/02/05/mod-wsgi-w-anaconda-caused-undefined-symbol-sslv2-method/","result":{"data":{"wordpressPost":{"id":"1e694345-93dc-531e-a0c1-9d1b69fc0e5b","title":"mod_wsgi + Anaconda で undefined symbol: SSLv2_method","excerpt":"<p>（画像は anaconda （蛇）です。爬虫類が嫌いな方は済みません。） 先日行った、Caffe で推論処理を行う API サーバーの移行時に発生したエラーとその対処法シリーズの第二弾です。 関連エントリーは以下の通りで [&hellip;]</p>\n","slug":"mod-wsgi-w-anaconda-caused-undefined-symbol-sslv2-method","content":"\n<p>（画像は anaconda （蛇）です。爬虫類が嫌いな方は済みません。）</p>\n\n\n\n<p>先日行った、Caffe で推論処理を行う API サーバーの移行時に発生したエラーとその対処法シリーズの第二弾です。</p>\n\n\n\n<p>関連エントリーは以下の通りです。</p>\n\n\n\n<ul><li><a href=\"/2019/01/10/develop-api-server-with-pre-trained-ml-model/\">元の Caffe サーバー構築記事</a></li><li><a href=\"/2019/02/04/gcc-failed-when-installing-mod-wsgi/\">Caffe サーバー移行時のエラー対処シリーズ第一弾</a></li></ul>\n\n\n\n<h2>（移行後の）環境</h2>\n\n\n\n<p>第一弾で記載した内容を再掲します。</p>\n\n\n\n<ul><li>AWS Deep Learning AMI (Ubuntu、移行前は Amazon Linux 版の DL AMI)</li><li>その他の環境は変わらず<ul><li><code>caffe_p27</code> 環境</li><li>Apache 2.4</li><li>etc.</li></ul></li></ul>\n\n\n\n<h2 id=\"mce_1\">エラーとその原因</h2>\n\n\n\n<p>（この項は少し長いので、結論だけ知りたい人は、次の「対処法」に飛んで下さい。）</p>\n\n\n\n<p>第一弾で無事に mod_wsgi をインストールすることが出来ました。その後、wsgi ファイルやプログラム（*.py）を所定の位置に配置した後で Apache を起動し、API サーバーを呼んでみたところ、以下のエラーが出ました。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n[Sun Jan 27 06:36:34.315529 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586] mod_wsgi (pid=15448): Failed to exec Python script file '/var/www/foo-caffe-api/foo-caffe-api.wsgi'.\n[Sun Jan 27 06:36:34.315574 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586] mod_wsgi (pid=15448): Exception occurred processing WSGI script '/var/www/foo-caffe-api/foo-caffe-api.wsgi'.\n[Sun Jan 27 06:36:34.315596 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586] Traceback (most recent call last):\n[Sun Jan 27 06:36:34.315614 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]   File &quot;/var/www/foo-caffe-api/foo-caffe-api.wsgi&quot;, line 11, in &lt;module&gt;\n[Sun Jan 27 06:36:34.315648 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]     from api_server import app as application\n[Sun Jan 27 06:36:34.315663 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]   File &quot;/var/www/foo-caffe-api/api_server.py&quot;, line 3, in\n&lt;module&gt;\n[Sun Jan 27 06:36:34.315676 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]     from flask import Flask\n[Sun Jan 27 06:36:34.315689 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]   File &quot;/home/ubuntu/anaconda3/envs/caffe_p27/lib/python2.7$site-packages/flask/__init__.py&quot;, line 21, in &lt;module&gt;\n[Sun Jan 27 06:36:34.315701 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]     from .app import Flask, Request, Response\n[Sun Jan 27 06:36:34.315735 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]   File &quot;/home/ubuntu/anaconda3/envs/caffe_p27/lib/python2.7$site-packages/flask/app.py&quot;, line 25, in &lt;module&gt;\n[Sun Jan 27 06:36:34.315791 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]     from . import cli, json\n[Sun Jan 27 06:36:34.315819 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]   File &quot;/home/ubuntu/anaconda3/envs/caffe_p27/lib/python2.7/site-packages/flask/cli.py&quot;, line 18, in &lt;module&gt;\n[Sun Jan 27 06:36:34.315859 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]     import ssl\n[Sun Jan 27 06:36:34.315881 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]   File &quot;/home/ubuntu/anaconda3/envs/caffe_p27/lib/python2.7/ssl.py&quot;, line 97, in &lt;module&gt;\n[Sun Jan 27 06:36:34.315916 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586]     import _ssl             # if we can't import it, let the error propagate\n[Sun Jan 27 06:36:34.315947 2019] [wsgi:error] [pid 15448] [remote 127.0.0.1:49586] ImportError: /home/ubuntu/anaconda3/envs/caffe_p27/lib/python2.7/lib-dynload/_ssl.so: undefined symbol: SSLv2_method\n</pre>\n\n\n<h3>Anaconda python と mod_ssl の互換性が無い？<br></h3>\n\n\n\n<p>エラーメッセージで検索してみると、原因としては以下に引用した通り Anaconda の Python は独自の SSL ライブラリが同梱されていて、mod_ssl (OpenSSL) と互換性が無い事、という情報がありました。</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>This is because Anaconda Python ships its own SSL libraries which aren&#8217;t compatible, and by having mod_ssl loaded, the system SSL libraries will get loaded first, resulting in any use of SSL in Python to fail.</p><cite><a href=\"https://groups.google.com/forum/?nomobile=true#!topic/modwsgi/w6-31hnZlBo%5B1-25%5D\">how to use python 3.6.1 in an anaconda3 env w/ Apache + mod_wsgi + flask on aws ubuntu ec2 instance &#8211; Google グループ</a></cite></blockquote>\n\n\n\n<p>ただ、 apache2ctl -M で読み込まれているモジュールも確認したのですが、mod_ssl は読み込まれていませんでした。</p>\n\n\n\n<p>また、以下のページの情報に従って、<code>anaconda3/envs/caffe_p27/lib/python2.7/site-packages/flask/cli.py</code> の <code>import ssl</code> をコメントアウトしたところ、このエラーは消えましたが、so ファイルが無いという別のエラーが出ました。</p>\n\n\n\n<p><a href=\"https://own-search-and-study.xyz/2018/07/21/%E7%84%A1%E6%96%99%E3%81%A7https%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F%E8%87%AA%E4%BD%9Cweb%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/\">無料でHttps対応した自作Webサイトを公開する方法 | 自調自考の旅</a></p>\n\n\n\n<h3>必要な *.so ファイルが読み込まれていない</h3>\n\n\n\n<p><code>import ssl</code>を消しても、so ファイルが無いという別のエラーが出たことから考えると、SSL 関連の so ファイルが読み込まれていないのが原因と考えた方が良さそうです。</p>\n\n\n\n<p>また、<code>SSLv2_method</code> で検索して出てきた以下のページを見ると、同メソッドは OpenSSL 1.0.2g で一度削除されて、その後復活したようです。</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/36637229/why-wont-anaconda-jupyter-ipython-notebook-launch/36749855#36749855\">python &#8211; Why won&#8217;t Anaconda Jupyter Ipython notebook launch? &#8211; Stack Overflow</a></p>\n\n\n\n<p>インストールされている OpenSSL のバージョンを確認すると、システムのものは 1.0.2g なのに対して、Anaconda のものはより新しいバージョンでした。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nubuntu@ip-nn-nn-nn-nn:~$ /usr/bin/openssl version\nOpenSSL 1.0.2g  1 Mar 2016\nubuntu@ip-nn-nn-nn-nn:~$ ./anaconda3/envs/caffe2_p27/bin/openssl version\nOpenSSL 1.0.2o  27 Mar 2018\nubuntu@ip-nn-nn-nn-nn:~$ which openssl\n/home/ubuntu/anaconda3/bin//openssl\nubuntu@ip-nn-nn-nn-nn:~$ openssl version\nOpenSSL 1.0.2n  7 Dec 2017\n</pre>\n\n\n<p>ということで、Anaconda 環境の各種 *.so が読み込まれるようにすれば、問題は解決しそうです。</p>\n\n\n\n<h2>対処法</h2>\n\n\n\n<p><code>/etc/apache2/envvars</code> で適切な <code>LD_LIBRARY_PATH</code> を設定して、Apache を再起動すれば良いです。</p>\n\n\n\n<p>設定すべき <code>LD_LIBRARY_PATH</code> を調べるには、以下のようにします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nubuntu@ip-nnn-nnn-nnn-nnn:~$ source activate caffe_p27\n(caffe_p27) ubuntu@ip-nnn-nnn-nnn-nnn:~$ printenv LD_LIBRARY_PATH\n/usr/local/cuda-8.0/lib64:/usr/local/cuda-8.0/extras/CUPTI/lib64:/lib/nccl/cuda-8.0/lib:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/::/home/ubuntu/anaconda3/envs/caffe_p27/lib/\n</pre>\n\n\n<p>envvars ファイルには、以下のような行を追加します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:/usr/local/cuda-8.0/extras/CUPTI/lib64:/lib/nccl/cuda-8.0/lib:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/::/home/ubuntu/anaconda3/envs/caffe_p27/lib/\n</pre>\n\n\n<p>なお、AWS DL AMI のバージョンによって、 <code>LD_LIBRARY_PATH</code> は若干異なるので、同じエラーが起きた場合には、上の行をコピペするのではなく、必ずご自分で <code>LD_LIBRARY_PATH</code> を調べてから設定して下さい。</p>\n\n\n\n<h2>まとめ・雑感</h2>\n\n\n\n<p>（前回と同じ感想ですが）Amazon Linux と Ubuntu では結構違ってたので困りました。Amazon Linux の場合、システムの OpenSSL のバージョンが新しいようなので、このエラーが出なかったのかもしれません。<br></p>\n","dateObject":"2019-02-05T03:59:34.000Z","date":"February 05, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Anaconda","slug":"anaconda"},{"name":"AWS Deep Learning AMI","slug":"aws-deep-learning-ami"},{"name":"mod_wsgi","slug":"mod_wsgi"},{"name":"OpenSSL","slug":"openssl"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/02/snake-744149_1280.jpg?fit=1024%2C608&ssl=1","height":608,"width":1024},"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/02/snake-744149_1280.jpg?fit=768%2C456&ssl=1","height":456,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/02/snake-744149_1280.jpg"},"wordpress_id":554}},"pageContext":{"id":"1e694345-93dc-531e-a0c1-9d1b69fc0e5b","nextPath":"/2019/02/04/gcc-failed-when-installing-mod-wsgi/","nextTitle":"mod_wsgi インストール中に gcc failed","prevPath":"/2019/02/06/mod-wsgi-and-loading-libraries/","prevTitle":"mod_wsgi とライブラリ読み込み"}}}