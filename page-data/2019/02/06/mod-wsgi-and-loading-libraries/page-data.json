{"componentChunkName":"component---src-templates-post-js","path":"/2019/02/06/mod-wsgi-and-loading-libraries/","result":{"data":{"wordpressPost":{"id":"2b9bb051-2359-5e0d-a087-72d3ca8d3abd","title":"mod_wsgi とライブラリ読み込み","excerpt":"<p>先日行った、Caffe で推論処理を行う API サーバーの移行時に発生したエラーとその対処法シリーズの第三弾です。 関連エントリーは以下の通りです。 元の Caffe サーバー構築記事 第一弾: mod_wsgi イン [&hellip;]</p>\n","slug":"mod-wsgi-and-loading-libraries","content":"\n<p>先日行った、Caffe で推論処理を行う API サーバーの移行時に発生したエラーとその対処法シリーズの第三弾です。</p>\n\n\n\n<p>関連エントリーは以下の通りです。</p>\n\n\n\n<ul><li><a href=\"https://stg-engineering-wp.mobalab.net/2019/01/10/develop-api-server-with-pre-trained-ml-model/\">元の Caffe サーバー構築記事</a></li><li><a href=\"https://stg-engineering-wp.mobalab.net/2019/02/04/gcc-failed-when-installing-mod-wsgi/\">第一弾: mod_wsgi インストール中に gcc failed | もばらぶエンジニアブログ</a></li><li><a href=\"https://stg-engineering-wp.mobalab.net/2019/02/05/mod-wsgi-w-anaconda-caused-undefined-symbol-sslv2-method/\">第二弾: mod_wsgi + Anaconda で undefined symbol: SSLv2_method | もばらぶエンジニアブログ</a></li></ul>\n\n\n\n<h2>（移行後の）環境</h2>\n\n\n\n<p>第一弾・第二弾で記載した内容を再掲します。</p>\n\n\n\n<ul><li>AWS Deep Learning AMI (Ubuntu、移行前は Amazon Linux 版の DL AMI)</li><li>その他の環境は変わらず <ul><li><code>caffe_p27</code> 環境</li><li>Apache 2.4</li><li>etc. </li><li>AWS Deep Learning AMI (Ubuntu、移行前は Amazon Linux 版の DL AMI)</li></ul></li><li>その他の環境は変わらず <ul><li><code>caffe_p27</code> 環境</li><li>Apache 2.4</li><li>etc. </li></ul></li></ul>\n\n\n\n<h2>エラーとその原因</h2>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n[Sun Jan 27 16:39:56.540744 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856] mod_wsgi (pid=13877): Failed to exec Python script file '/var/www/foo-caffe-api/foo-caffe-api.wsgi'.\n[Sun Jan 27 16:39:56.540783 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856] mod_wsgi (pid=13877): Exception occurred processing WSGI script '/var/www/foo-caffe-api/foo-caffe-api.wsgi'.\n[Sun Jan 27 16:39:56.540811 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856] Traceback (most recent call last):\n[Sun Jan 27 16:39:56.540829 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]   File &quot;/var/www/foo-caffe-api/foo-caffe-api.wsgi&quot;, line 10, in &lt;module&gt;\n[Sun Jan 27 16:39:56.540887 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]     from api_server import app as application\n[Sun Jan 27 16:39:56.540908 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]   File &quot;/var/www/foo-caffe-api/api_server.py&quot;, line 42, in &lt;module&gt;\n[Sun Jan 27 16:39:56.540966 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]     import caffe\n[Sun Jan 27 16:39:56.540976 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]   File &quot;/home/ubuntu/src/caffe_python_2/python/caffe/__init__.py&quot;, line 1, in &lt;module&gt;\n[Sun Jan 27 16:39:56.541009 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]     from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer\n[Sun Jan 27 16:39:56.541019 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]   File &quot;/home/ubuntu/src/caffe_python_2/python/caffe/pycaffe.py&quot;, line 13, in &lt;module&gt;\n[Sun Jan 27 16:39:56.541125 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856]     from ._caffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, \\\\\n[Sun Jan 27 16:39:56.541144 2019] [wsgi:error] [pid 13877] [remote 127.0.0.1:41856] ImportError: libnccl.so.2: cannot open shared object file: No such file or directory\n</pre>\n\n\n<p>*.wsgi, *.py を配置して、wsgi の設定をした後、Apache を再起動して API サーバーにアクセスすると、上のようなエラーが出ました。エラーメッセージの末尾に記載されているように、*.so が読み込まれていないのが原因です。ちなみに、同 so ファイルは、<code>find</code>コマンドで存在することは確認済みです。<br></p>\n\n\n\n<h2><br>mod_wsgi とその実行環境の設定</h2>\n\n\n\n<p>mod_wsgi で動く Python アプリケーションで、（ライブラリ読み込みのための）<code>LD_LIBRARY_PATH</code>や、その他環境変数を設定したいというのは割と良くある話題のようです。mod_wsgi の作者である Graham さんも、以下のような gist を作って、いくつかの方法を紹介しています。</p>\n\n\n\n<p><a href=\"https://gist.github.com/GrahamDumpleton/b380652b768e81a7f60c\">Setting environment variables for Apache/mod_wsgi hosted Python application.</a></p>\n\n\n\n<p>大雑把にまとめると、mod_wsgi で環境を設定する方法は主に</p>\n\n\n\n<ul><li>*.wsgi ファイルで、<code>os.environ</code> を使って環境変数を設定する<ul><li>その派生形で、*.wsgi から別の *.py ファイルを呼び出し、<code>os.environ</code> で設定する</li></ul></li><li>Apache の設定ファイルで、<code>python-path</code>か <code>python-home</code> を設定する</li><li>ライブラリ関連は、上の2つの方法ではダメなので、python モジュールインストール時に<code>LD_RUN_PATH</code>を設定する（<code>LD_LIBRARY_PATH</code>は設定不要）</li></ul>\n\n\n\n<p>の三通りとなります。</p>\n\n\n\n<p>ライブラリ関連の場合、なぜ最初の2つの方法だとダメかという理由ですが、<code>LD_LIBRARY_PATH</code>の読み込み・ライブラリ読み込みは、プロセス起動時に一度だけ行われるからなので、プロセス起動後に設定はできません。</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/7847305/how-to-set-ld-library-path-individually-for-django-web-sites-with-apache-and-mod\">How to set LD_LIBRARY_PATH individually for django web sites with Apache and mod_wsgi &#8211; Stack Overflow</a></p>\n\n\n\n<p>では、ライブラリ読み込みの問題は三番目の方法で解決するかというと、そうではありません。この方法は、既にモジュールがインストール済みの場合には使えないので、別の方法を選択する必要があります。</p>\n\n\n\n<h2>対処法: LD_LIBRARY_PATH を設定</h2>\n\n\n\n<p>結論としては、第二弾で書いた通りですが、以下に再掲します。</p>\n\n\n\n<p><code>/etc/apache2/envvars</code> で適切な <code>LD_LIBRARY_PATH</code> を設定して、Apache を再起動すれば良いです。</p>\n\n\n\n<p>設定すべき <code>LD_LIBRARY_PATH</code> を調べるには、以下のようにします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nubuntu@ip-nnn-nnn-nnn-nnn:~$ source activate caffe_p27\n(caffe_p27) ubuntu@ip-nnn-nnn-nnn-nnn:~$ printenv LD_LIBRARY_PATH\n/usr/local/cuda-8.0/lib64:/usr/local/cuda-8.0/extras/CUPTI/lib64:/lib/nccl/cuda-8.0/lib:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/::/home/ubuntu/anaconda3/envs/caffe_p27/lib/\n</pre>\n\n\n<p>envvars ファイルには、以下のような行を追加します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:/usr/local/cuda-8.0/extras/CUPTI/lib64:/lib/nccl/cuda-8.0/lib:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/:/usr/lib64/openmpi/lib/:/usr/local/lib:/usr/lib:/usr/local/mpi/lib:/lib/::/home/ubuntu/anaconda3/envs/caffe_p27/lib/\n</pre>\n\n\n<p>なお、これも前回書いた通りですが、AWS DL AMI のバージョンによって、 <code>LD_LIBRARY_PATH</code> の値は若干異なります。</p>\n\n\n\n<h2>その他の方法</h2>\n\n\n\n<p>読み込む so ファイルが1つだけであれば、Apache の<code>LoadFile</code>でも大丈夫そうです。</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/37690980/how-to-set-ld-library-path-for-apachewsgi-website\">python &#8211; How to set LD_LIBRARY_PATH for apache+wsgi website &#8211; Stack Overflow</a></p>\n\n\n\n<p>ただ、今回は、Anaconda 環境の so ファイルを色々と読み込む必要があるので、 <code>LD_LIBRARY_PATH</code>を設定するのが一番簡単な選択肢だと思います。</p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>今回で、エラー対処シリーズ三部作は完了です。mod_wsgi は色々と面倒くさかったので（勉強にはなりましたが）、次にサーバーを立てるときには、スタンドアロンサーバーを立てようと思います。</p>\n","dateObject":"2019-02-06T04:39:12.000Z","date":"February 06, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"LD_LIBRARY_PATH","slug":"ld_library_path"},{"name":"mod_wsgi","slug":"mod_wsgi"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/02/books-1866844_800.jpg?fit=768%2C576&ssl=1","height":576,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/02/books-1866844_800.jpg"},"wordpress_id":566}},"pageContext":{"id":"2b9bb051-2359-5e0d-a087-72d3ca8d3abd","nextPath":"/2019/02/05/mod-wsgi-w-anaconda-caused-undefined-symbol-sslv2-method/","nextTitle":"mod_wsgi + Anaconda で undefined symbol: SSLv2_method","prevPath":"/2019/02/17/react-native-cameraで画像を正方形で保存する方法/","prevTitle":"React Native Cameraで画像を正方形で保存する方法"}}}