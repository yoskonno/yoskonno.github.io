{"componentChunkName":"component---src-templates-post-js","path":"/2019/04/15/try-rubymine-2019-1-new-feature/","result":{"data":{"wordpressPost":{"id":"f6a54afe-b4f8-5f17-8d98-a644760b39c7","title":"RubyMine 2019.1でRailsをdocker exec経由で起動可能になったがバグあって使い物にならない件","excerpt":"<p>こんにちは。皆さんは普段どのような開発環境を使っていますか？僕はJetBrainsのIDEが好きなので、All Products Licenseを購入して各プロジェクトごとに適したIDEを愛用しており、RubyではRub [&hellip;]</p>\n","slug":"try-rubymine-2019-1-new-feature","content":"\n<p>こんにちは。皆さんは普段どのような開発環境を使っていますか？僕はJetBrainsのIDEが好きなので、All Products Licenseを購入して各プロジェクトごとに適したIDEを愛用しており、RubyではRubeMineを使用しています。</p>\n\n\n\n<p>さて、そんなRubyMineですが先日今年初のメジャーリリースである2019.1がリリースされ、以前はできなかったDocker Remote Interpreterでのプロセス起動が、 (docker runだけでなく) exec経由でも起動できるようになった様なので、試してみました。</p>\n\n\n\n<p><em>※RubyMineのDockerインテグレーションはまだまだ詰めが甘い所が多く、不具合が多いので使い物になるレベルでは無いと個人的に思っています。現にこの記事で紹介しているサンプルもまともには動きません。なので今回はあまり身になる記事となっていないですがご了承下さい。</em></p>\n\n\n\n<h2 id=\"2018xでのDockerサポート状況\"><a href=\"https://hackmd.io/oJjcnNEgT0m0CxXzQXkU_A?view#2018x%E3%81%A7%E3%81%AEDocker%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E7%8A%B6%E6%B3%81\"></a>2018.xでのDockerサポート状況</h2>\n\n\n\n<p>実際JetBrains IDEではDockerおよびDocker Composeのサポート自体はされてからだいぶ久しく、RubeMineでもRemote InterpreterとしてDockerコンテナを指定する事はこれまでもできていました。<br>しかし、いずれもdocker runまたはdocker-compose run経由で、特にDocker Composeの方はIDEが自動生成した拡張 <code>docker-compose.yml</code>&nbsp;ファイルを使ってVolume設定等をオーバーロードさせる仕様であった為に、（元が複雑な&nbsp;<code>docker-compose.yml</code>&nbsp;だと）使いづらい仕様でした。</p>\n\n\n\n<p>ところが、今回の対応で新たにdocker(-compose) exec経由でコンテナ内のrubyプロセスを起動できる様になった為、以前よりは使いやすくなったかと思います。</p>\n\n\n\n<h2 id=\"試してみた\"><a href=\"https://hackmd.io/oJjcnNEgT0m0CxXzQXkU_A?view#%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F\"></a>実際に試してみた</h2>\n\n\n\n<p>JetBrainsが今回の機能をテストする為のテストリポジトリを公開しているので、これを使っていきたいと思います:</p>\n\n\n\n<p><a href=\"https://bitbucket.org/rubyminedoc/sample_rails_app_docker/src\" target=\"_blank\" rel=\"noreferrer noopener\">Ruby on Rails Tutorial sample application</a></p>\n\n\n\n<p>適当な所にCloneします:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ngit clone git@bitbucket.org:rubyminedoc/sample_rails_app_docker.git\ncd sample_rails_app_docker\n</pre>\n\n\n<p>デフォルトでは、データストアとしてSQLite (docker run 経由での実行テストの為) が指定されているので、 <code>config/database.yml</code>&nbsp;を編集してPostgreSQLが使われるようにします。<br>具体的には、コメントアウトされている&nbsp;<code>development</code>&nbsp;の設定のコメントアウトを外し、元の&nbsp;<code>development</code>&nbsp;設定を削除します:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n# ...\n\ndevelopment:\n  &lt;&lt;: *default\n  adapter: postgresql\n  encoding: unicode\n  host: db\n  username: postgres\n  password:\n  database: sample_rails_app_db\n\n# # ...\n</pre>\n\n\n<p>それではdocker-composeしてみましょう:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ndocker-compose up -d\n</pre>\n\n\n<p>初回はイメージのビルドが入るので少し時間が掛かります。<br>しばらくすると、&nbsp;<code>web</code>&nbsp;(Rails) と&nbsp;<code>db</code>&nbsp;(PostgreSQL) の2サービス (コンテナ) が立ち上がります。</p>\n\n\n\n<p>ただし、このままではブラウザでアクセスができません。&nbsp;<code>docker-compose.yml</code>&nbsp;を見てみると分かるのですが、&nbsp;<code>web</code>&nbsp;サービスのcommandが&nbsp;<code>tail -f /dev/null</code>&nbsp;(※1) となっており、Railsは起動していない為です。<br>Railsのプロセスをdocker-compose execで起動する為にこのような設定となっています。</p>\n\n\n\n<p>※1:&nbsp;<code>tail -f /dev/null</code>&nbsp;はコンテナ技術でよく使われる、何もしないDAEMONである。</p>\n\n\n\n<h3 id=\"RubyMineのRemote-Interpreterを設定\"><a href=\"https://hackmd.io/oJjcnNEgT0m0CxXzQXkU_A?view#RubyMine%E3%81%AERemote-Interpreter%E3%82%92%E8%A8%AD%E5%AE%9A\"></a>RubyMineのRemote Interpreterを設定</h3>\n\n\n\n<p>起動した&nbsp;<code>web</code>&nbsp;コンテナの中の&nbsp;<code>ruby</code>&nbsp;コマンドをRubyMineから呼び出す為、Remote Interpreterを設定します。</p>\n\n\n\n<p>Dockerのとの連携自体がまだの場合、先に行っておく必要があります。</p>\n\n\n\n<p><em>File (メニュー) -&gt; Preference -&gt; Build, Extension, Deployment -&gt; Docker</em>&nbsp;で追加できます。<br>Docker for Macを使ってる場合、設定ペインの「+」を押した後デフォルトの設定で即使えるので便利です。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/1.png?fit=680%2C363&amp;ssl=1\" alt=\"\" class=\"wp-image-776\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/1.png?w=2260&amp;ssl=1 2260w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/1.png?resize=300%2C160&amp;ssl=1 300w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/1.png?resize=768%2C410&amp;ssl=1 768w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/1.png?resize=1024%2C546&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p><em>Preference -&gt; Languages &amp; Framework -&gt; Ruby SDK and Gems</em>&nbsp;を開きます。<br>設定ペインの「+」で新規追加をしますが、ここで “New Remote…” を選択してください。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/2.png?fit=680%2C531&amp;ssl=1\" alt=\"\" class=\"wp-image-777\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/2.png?w=1400&amp;ssl=1 1400w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/2.png?resize=300%2C234&amp;ssl=1 300w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/2.png?resize=768%2C600&amp;ssl=1 768w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/2.png?resize=1024%2C800&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p>表示された “Configure Remote Ruby interpreter” ダイアログで、 “Docker Compose” を選択し、Serviceを “web” にして設定を行います。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/3.png?fit=680%2C351&amp;ssl=1\" alt=\"\" class=\"wp-image-778\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/3.png?w=1420&amp;ssl=1 1420w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/3.png?resize=300%2C155&amp;ssl=1 300w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/3.png?resize=768%2C397&amp;ssl=1 768w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/3.png?resize=1024%2C529&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p>“OK” を押すとRemote Interpreterの追加とGemのDL＆インデクスが行われます。（これもちょっと時間が掛かります）</p>\n\n\n\n<p>その後、Edit Path Mappingsの設定を行いましょう。「+」と同じツールバーの一番右端のアイコンをクリックします。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i1.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/image.png?fit=680%2C221&amp;ssl=1\" alt=\"\" class=\"wp-image-792\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/image.png?w=1814&amp;ssl=1 1814w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/image.png?resize=300%2C98&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/image.png?resize=768%2C250&amp;ssl=1 768w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/image.png?resize=1024%2C333&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p>開かれた &#8220;Edit Project Path Mappings&#8221; と言うダイアログで、Local Pathをプロジェクトルートに、Remote Pathを &#8220;/sample_rails_application&#8221; とします。</p>\n\n\n\n<p>設定ができたら早速使ってみましょう。先程言った通り、Railsは動いていませんが、Railsを動かす為のコンテナ自体は動いています。<br>Railsアプリケーションを動かす前にDBの初期化が必要なので、それだけ先に済ませておきたい所ですが、せっかくなので追加したRemote Interpreter経由で動かしてみたいと思います。</p>\n\n\n\n<p><em>Tool (メニュー) -&gt; Run Rake Task</em>&nbsp;で出てきたダイアログで&nbsp;<code>db:migrate:reset</code>&nbsp;を実行します。ちなみに、初回の実行時は “[Reload rake tasks list]” が必要なのでご注意ください。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/4.png?w=1200&#038;ssl=1\" alt=\"\" class=\"wp-image-779\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/4.png?w=852&amp;ssl=1 852w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/4.png?resize=300%2C85&amp;ssl=1 300w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/4.png?resize=768%2C216&amp;ssl=1 768w\" sizes=\"(max-width: 852px) 100vw, 852px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>更に “Execute db:migrate:reset” と言うダイアログが表示されますが、そのまま “OK” を押すと、マイグレーションの初期化が行われます。</p>\n\n\n\n<h2 id=\"Railsの起動\"><a href=\"https://hackmd.io/oJjcnNEgT0m0CxXzQXkU_A?view#Rails%E3%81%AE%E8%B5%B7%E5%8B%95\"></a>Railsの起動</h2>\n\n\n\n<p>いよいよRailsの起動です。Runの設定 (Edit Configuration) 開きます:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/5.png?fit=680%2C268&amp;ssl=1\" alt=\"\" class=\"wp-image-780\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/5.png?w=1160&amp;ssl=1 1160w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/5.png?resize=300%2C118&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/5.png?resize=768%2C302&amp;ssl=1 768w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/5.png?resize=1024%2C403&amp;ssl=1 1024w\" sizes=\"(max-width: 1160px) 100vw, 1160px\" /></figure>\n\n\n\n<p><em>Rails -&gt; Development: sample_rails_app_docker</em>&nbsp;を選択肢、画面下部の “docker-compose” が “docker-compose exec” になっている事を確認します:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i0.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/6.png?fit=680%2C499&amp;ssl=1\" alt=\"\" class=\"wp-image-781\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/6.png?w=1644&amp;ssl=1 1644w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/6.png?resize=300%2C220&amp;ssl=1 300w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/6.png?resize=768%2C564&amp;ssl=1 768w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/6.png?resize=1024%2C752&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p>問題がなければ、&nbsp;<em>Run (メニュー) -&gt; Run</em>&nbsp;で起動してみます。<br>コンソールを見た感じ、無事に起動しているようです。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/7.png?fit=680%2C327&amp;ssl=1\" alt=\"\" class=\"wp-image-783\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/7.png?w=1300&amp;ssl=1 1300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/7.png?resize=300%2C144&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/7.png?resize=768%2C370&amp;ssl=1 768w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/7.png?resize=1024%2C493&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p>ブラウザで&nbsp;<a href=\"http://127.0.0.1:3000/\" target=\"_blank\" rel=\"noreferrer noopener\">http://127.0.0.1:3000</a>&nbsp;を開くと画面が表示されました:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/Y6aTdWS.png?fit=680%2C325&amp;ssl=1\" alt=\"\" class=\"wp-image-784\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/Y6aTdWS.png?w=1212&amp;ssl=1 1212w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/Y6aTdWS.png?resize=300%2C143&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/Y6aTdWS.png?resize=768%2C367&amp;ssl=1 768w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/Y6aTdWS.png?resize=1024%2C489&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p>ここで起動したRailsのプロセスは一旦終了しておきましょう。</p>\n\n\n\n<h2 id=\"リモートデバッグを試してみる\"><a href=\"https://hackmd.io/oJjcnNEgT0m0CxXzQXkU_A?view#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"></a>リモートデバッグを試してみる</h2>\n\n\n\n<p>デバッグもできるようなので試してみましょう。Gemfileを開き、&nbsp;<code>debase</code>&nbsp;と&nbsp;<code>ruby-debug-ide</code>&nbsp;のコメントアウトを外します:</p>\n\n\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\ngroup :development, :test do\n  gem 'sqlite3', '1.3.13'\n  gem 'byebug',  '9.0.6', platform: :mri\n  gem 'debase'\n  gem 'ruby-debug-ide'\nend\n</pre>\n\n\n<p>そのまま&nbsp;<em>Tool (メニュー) -&gt; Bundler -&gt; Install</em>&nbsp;で起動中のコンテナ内でGemのインストールが行なえると言う事なのですが、起動中のコンテナ内で実行される訳ではない (代わりに&nbsp;<code>RUBYMINE_SDK_CONTAINER_xxx</code> と言うコンテナの中で実行される) と言う謎な仕様の為、このままではデバッガを動かせないので、<code>docker-compose up -d --build</code>&nbsp;も同時に行っておく必要があります。（※1）</p>\n\n\n\n<p>再度インデクスが始まるので、それを待った後いよいよ実行するのですが、そのままでは行なえません。<br>その理由は、ruby-debug-ideを使ってRemote Debugをする場合、 ホストからコンテナにポート <code>1234</code> と <code>26162</code> でTCP接続できる必要があるからです。しかし、 <code>docker-compose.yml</code> はそうなっていません。なので、ついでにその設定も変更が必要です (なのでその後に <code>docker-compose up -d --build</code> しましょう):</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n# ...\n\n  web:\n    # ...\n   ports:\n      # ruby-debug-ide 用\n      - &quot;1234:1234&quot;\n      - &quot;26162:26162&quot; \n      # rails用\n      - &quot;3000:3000&quot; \n# ...\n</pre>\n\n\n<p>それでは気を取り直して&nbsp;<em>Run (メニュー) -&gt; Debug</em>&nbsp;をしてみます。<br>※初回起動時は　<code>server.pid</code> が無いとかでエラーになる場合がありますが、その場合は普通の Run を一旦実行しておくと解消します。</p>\n\n\n\n<p><a href=\"http://127.0.0.1:3000/\" target=\"_blank\" rel=\"noreferrer noopener\">http://127.0.0.1:3000/</a>&nbsp;を開くと、先程の画面が見れます。</p>\n\n\n\n<p>それでは試しに&nbsp;<code>UserController#index</code>&nbsp;にBreakpointを置いてみましょう:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/engineering.mobalab.net/wp-content/uploads/2019/04/8.png?fit=680%2C287&amp;ssl=1\" alt=\"\" class=\"wp-image-785\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/8.png?w=1504&amp;ssl=1 1504w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/8.png?resize=300%2C126&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/8.png?resize=768%2C324&amp;ssl=1 768w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/8.png?resize=1024%2C432&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></figure>\n\n\n\n<p>画面をリロードすると、無事・・・<strong>止まりません</strong>。</p>\n\n\n\n<p><strong>2019.1の不具合について</strong></p>\n\n\n\n<p>なんと、2019年4月15日時点で、肝心のBreakpointによるステップ実行が機能していないのです。<br>しかも、この不具合は以前 (僕の記憶だと半年くらい前) からあり、YouTrackで “docker breakpoint” と検索すると、RubyMineでは以前からDocker Remote Interpreterによるデバッグ機能の不具合がある事が分かります。</p>\n\n\n\n<p><a href=\"https://youtrack.jetbrains.com/issues/RUBY?q=docker%20breakpoint\" target=\"_blank\" rel=\"noreferrer noopener\">https://youtrack.jetbrains.com/issues/RUBY?q=docker breakpoint</a></p>\n\n\n\n<p>と言う訳で、現時点ではリモートデバッグは諦めるしか無さそうです。と言ってもIssueが放置されてる物もあり、復旧の見込みはありませんが・・・。</p>\n\n\n\n<p>因みに、Dockerを使わずローカルでrbenvとか使ってる場合は問題なく動作するので、しばらくRubyMineで（Railsを）Dockerで起動するのは諦めた方が良いかもです。</p>\n\n\n\n<p>※1:&nbsp;<code>docker-compose up -d --build</code> だけだとRubyMineが追加されたGemをダウンロードしないので、その後のデバッグが行えない。またこの件は既にIssueが立ててあった: <a href=\"https://youtrack.jetbrains.com/issue/RUBY-23872\">https://youtrack.jetbrains.com/issue/RUBY-23872</a></p>\n\n\n\n<h2 id=\"まとめ\"><a href=\"https://hackmd.io/oJjcnNEgT0m0CxXzQXkU_A?view#%E3%81%BE%E3%81%A8%E3%82%81\"></a>まとめ</h2>\n\n\n\n<p>今回、RubyMineのメジャーアップグレードでDockerインテグレーションが強化されたとの事ですが、まだまだ不十分な部分があり、以前からある不具合も解消されていないので、使い物にはならない品質と言えます。<br>YouTrackの方もあまり有意義な議論がされていないので、皆さんもどしどし報告すれば運営も動いてくれるかもしれません。</p>\n\n\n\n<p>PhpStormやIntelliJ IDEAは更新も早いしバグもすぐ修正されるのですが、RubyMineはなぜあのような不遇な扱いを受けているのでしょうか・・・。</p>\n\n\n\n<p>今回はあまり身になる記事を書けなくて残念でしたが、JetBrainsもRubyも好きなので早く治ってくれる事を願います。</p>\n","dateObject":"2019-04-15T06:11:57.000Z","date":"April 15, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Debug","slug":"debug"},{"name":"Rails","slug":"rails"},{"name":"Ruby","slug":"ruby"},{"name":"RubyMine","slug":"rubymine"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/Screen-Shot-2019-04-15-at-15.14.35.png?fit=1024%2C294&ssl=1","height":294,"width":1024},"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/Screen-Shot-2019-04-15-at-15.14.35.png?fit=768%2C220&ssl=1","height":220,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/04/Screen-Shot-2019-04-15-at-15.14.35.png"},"wordpress_id":770}},"pageContext":{"id":"f6a54afe-b4f8-5f17-8d98-a644760b39c7","nextPath":"/2019/04/15/allow-s3-access-to-specific-users/","nextTitle":"S3 の特定のフォルダのみにアクセス権限を与える","prevPath":"/2019/05/08/oracle提供のjavaのjdkの有償化に伴ってamazon-correttoを使ってみた/","prevTitle":"Oracle提供のJavaのJDKの有償化に伴ってAmazon Correttoを使ってみた"}}}