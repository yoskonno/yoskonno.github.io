{"componentChunkName":"component---src-templates-post-js","path":"/2019/07/01/react-jsのコードをtypescript化する/","result":{"data":{"wordpressPost":{"id":"583ad800-069d-56df-9e7d-6c28cd73918a","title":"React.jsのコードをTypeScript化する","excerpt":"<p>割と簡単にTypeScript化できることが分かりましたので、既存プロジェクトのReact.jsコードに適用してみました。 開発環境 laravel 5.7 react 16.2 typescript 3.3 パッケージ [&hellip;]</p>\n","slug":"react-js%e3%81%ae%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92typescript%e5%8c%96%e3%81%99%e3%82%8b","content":"\n<p>割と簡単にTypeScript化できることが分かりましたので、既存プロジェクトのReact.jsコードに適用してみました。</p>\n\n\n\n<h2>開発環境</h2>\n\n\n\n<ul><li>laravel 5.7</li><li>react 16.2</li><li>typescript 3.3</li></ul>\n\n\n\n<h2>パッケージのインストール</h2>\n\n\n\n<p>TypeScript関連のパッケージをインストールします。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ cd laradock/\n$\n$ docker-compose up -d nginx mysql\nStarting laradock_mysql_1            ... done\nStarting laradock_docker-in-docker_1 ... done\nStarting laradock_workspace_1        ... done\nStarting laradock_php-fpm_1          ... done\nStarting laradock_nginx_1            ... done\n$\n$ docker exec -it laradock_workspace_1 /bin/bash\n$\n$ npm install --save-dev typescript ts-loader react react-dom @types/react @types/react-dom\n$\n</pre>\n\n\n<h2>tsconfig.jsonの生成</h2>\n\n\n\n<p>プロジェクト配下のnode_modulesにtscコマンドがあれば実行します。直接ファイル作成でも大丈夫です。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ ./node_modules/.bin/tsc --init\n</pre>\n\n\n<p>プロジェクト直下に生成されたtsconfig.jsonを以下のように編集します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n    &quot;compilerOptions&quot;: {\n        &quot;target&quot;: &quot;es5&quot;,\n        &quot;module&quot;: &quot;commonjs&quot;,\n        &quot;jsx&quot;: &quot;react&quot;,\n        &quot;strict&quot;: true,\n        &quot;experimentalDecorators&quot;: true,\n        &quot;allowJs&quot;: true,\n    },\n    &quot;exclude&quot;: [\n        &quot;node_modules&quot;,\n        &quot;vendor&quot;\n    ]\n}\n</pre>\n\n\n<h2>webpack.mix.jsの修正</h2>\n\n\n\n<p>既存のlaravelのwebpack.mix.jsファイルを以下のように修正します。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nconst mix = require('laravel-mix');\n\nmix.react('resources/ts/app.tsx', 'public/js')\n   .sass('resources/sass/app.scss', 'public/css')\n   .webpackConfig({\n      module: {\n         rules: [\n            {\n               test: /\\.tsx?$/,\n               loader: 'ts-loader',\n               exclude: /node_modules/,\n            },\n         ],\n      },\n      resolve: {\n         extensions: ['*', '.ts', '.tsx'],\n      },\n   });\n</pre>\n\n\n<h2>ディレクトリ名、ファイル名の変更</h2>\n\n\n\n<p>各名称および拡張子をjsからtsに変更します。</p>\n\n\n\n<p>変更前</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nmyproject/\n  └ resources\n     └ js\n        ├ components\n        │  └ Article.jsx\n        ├ models\n        │  └ Todo.js\n        └ app.js\n</pre>\n\n\n<p>変更後</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nmyproject/\n  └ resources\n     └ ts\n        ├ components\n        │  └ Article.tsx\n        ├ models\n        │  └ Todo.ts\n        └ app.ts\n</pre>\n\n\n<h2>既存のコードに型を追加</h2>\n\n\n\n<p>TypeScriptの形式に合わせて.ts、.tsxのコードに型を追加していきます。any型はできる限り使わないようにしましたが、使わざるを得ない場面もあると思います。</p>\n\n\n\n<p>以下のような感じで型を追加します。</p>\n\n\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n// 修正前：\n\ntitle = ''\nfinished = false\n\nconstructor(title) {\n    this.title = title\n}\n　\n// ↓　↓　↓　↓\n\n// 修正後：\n\ntitle: string = ''\nfinished: boolean = false\n\nconstructor(title: string) {\n    this.title = title\n}\n</pre>\n\n\n<p>サンプルコードを置いておきますので参考になれば幸いです。修正前のTodoApp.jsxについては以下で詳しく説明されています。</p>\n\n\n\n<p><a href=\"https://qiita.com/zaburo/items/fbcdd73d8d707357c25f\">https://qiita.com/zaburo/items/fbcdd73d8d707357c25f</a></p>\n\n\n\n<p>TodoApp.jsx（修正前）</p>\n\n\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst axios = require('axios');\n\nfunction RenderRows(props) {\n    return props.todos.map(todo =&gt; {\n        return (\n            &lt;tr key={todo.id}&gt;\n                &lt;td&gt;{todo.id}&lt;/td&gt;\n                &lt;td&gt;{todo.title}&lt;/td&gt;\n                &lt;td&gt;&lt;button className=&quot;btn btn-secondary&quot; onClick={() =&gt; props.deleteTask(todo)}&gt;完了&lt;/button&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        );\n    });\n}\n\nexport default class TodoApp extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todos: [],\n            todo: ''\n        }\n        this.inputChange = this.inputChange.bind(this);\n        this.addTodo = this.addTodo.bind(this);\n        this.deleteTask = this.deleteTask.bind(this);\n    }\n\n    componentDidMount() {\n        axios\n            .get('/api/get')\n            .then((res) =&gt; {\n                this.setState({\n                    todos: res.data\n                });\n            })\n            .catch(error =&gt; {\n                console.log(error)\n            })\n    }\n\n    inputChange(event){\n        switch(event.target.name){\n            case 'todo':\n                this.setState({\n                    todo: event.target.value\n                });\n                break;\n            default:\n                break;\n        }\n    }\n\n    addTodo(){\n        if(this.state.todo == ''){\n            return;\n        }\n        axios\n            .post('/api/add', {\n                title: this.state.todo\n            })\n            .then((res) =&gt; {\n                this.setState({\n                    todos: res.data,\n                    todo: ''\n                });\n            })\n            .catch(error =&gt; {\n                console.log(error);\n            });\n    }\n\n    deleteTask(todo){\n        axios\n            .post('/api/del', {\n                id: todo.id\n            })\n            .then((res) =&gt; {\n                this.setState({\n                    todos: res.data\n                });\n            })\n            .catch(error =&gt; {\n                console.log(error);\n            });\n    }\n\n    render() {\n        return (\n            &lt;React.Fragment&gt;\n                {/* add from */}\n                &lt;div className=&quot;form-group&quot;&gt;\n                    &lt;label htmlFor=&quot;todo&quot;&gt;新規Todo&lt;/label&gt;\n                    &lt;input type=&quot;text&quot; className=&quot;form-control&quot; name=&quot;todo&quot; value={this.state.todo} onChange={this.inputChange}/&gt;\n                &lt;/div&gt;\n                &lt;button className=&quot;btn btn-primary&quot; onClick={this.addTodo}&gt;登録&lt;/button&gt;\n                {/* table */}\n                &lt;table className=&quot;table&quot;&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;\n                            &lt;th&gt;ID&lt;/th&gt;\n                            &lt;th&gt;タスク&lt;/th&gt;\n                            &lt;th&gt;完了&lt;/th&gt;\n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n                        {/* 行の描画 */}\n                        &lt;RenderRows\n                            todos={this.state.todos}\n                            deleteTask={this.deleteTask}\n                        /&gt;\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/React.Fragment&gt;\n        );\n    }\n}\n\nReactDOM.render(&lt;TodoApp /&gt;, document.getElementById('todoApp'));\n</pre>\n\n\n<p>TodoApp.tsx（修正後）</p>\n\n\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n// import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nconst Axios = require('axios');\n// import Axios from 'axios';\n\ninterface TodoAppProps {\n}\ninterface TodoAppState {\n    todos: [{id:string, title:string}],\n    todo: ''\n}\n\nfunction RenderRows(props: any) {\n    return props.todos.map((todo: {id: string, title: string}) =&gt; {\n        return (\n            &lt;tr key={todo.id}&gt;\n                &lt;td&gt;{todo.id}&lt;/td&gt;\n                &lt;td&gt;{todo.title}&lt;/td&gt;\n                &lt;td&gt;&lt;button className=&quot;btn btn-secondary&quot; onClick={() =&gt; props.deleteTask(todo)}&gt;完了&lt;/button&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        );\n    });\n}\n\nexport default class TodoApp extends React.Component&lt;TodoAppProps, TodoAppState&gt; {\n    constructor(props: TodoAppProps) {\n        super(props);\n        this.state = {\n            todos: [{id: '', title: ''}],\n            todo: ''\n        }\n        this.inputChange = this.inputChange.bind(this);\n        this.addTodo = this.addTodo.bind(this);\n        this.deleteTask = this.deleteTask.bind(this);\n    }\n\n    componentDidMount() {\n        Axios\n            .get('/api/get')\n            .then((res: { data: [{ id: string, title: string }] }) =&gt; {\n                this.setState({\n                    todos: res.data\n                });\n            })\n            .catch((error: string) =&gt; {\n                console.log(error)\n            })\n    }\n\n    inputChange(event: any){\n        switch(event.target.name){\n            case 'todo':\n                this.setState({\n                    todo: event.target.value\n                });\n                break;\n            default:\n                break;\n        }\n    }\n\n    addTodo(){\n        if(this.state.todo === ''){\n            return;\n        }\n        Axios\n            .post('/api/add', {\n                title: this.state.todo\n            })\n            .then((res: { data: [{ id: string, title: string }] }) =&gt; {\n                this.setState({\n                    todos: res.data,\n                    todo: ''\n                });\n            })\n            .catch((error: string) =&gt; {\n                console.log(error);\n            });\n    }\n\n    deleteTask(todo: { id: string, title: string }){\n        Axios\n            .post('/api/del', {\n                id: todo.id\n            })\n            .then((res: { data: [{ id: string, title: string }] }) =&gt; {\n                this.setState({\n                    todos: res.data\n                });\n            })\n            .catch((error: string) =&gt; {\n                console.log(error);\n            });\n    }\n\n    render() {\n        return (\n            &lt;React.Fragment&gt;\n                {/* add from */}\n                &lt;div className=&quot;form-group&quot;&gt;\n                    &lt;label htmlFor=&quot;todo&quot;&gt;新規Todo&lt;/label&gt;\n                    &lt;input type=&quot;text&quot; className=&quot;form-control&quot; name=&quot;todo&quot; value={this.state.todo} onChange={this.inputChange}/&gt;\n                &lt;/div&gt;\n                &lt;button className=&quot;btn btn-primary&quot; onClick={this.addTodo}&gt;登録&lt;/button&gt;\n                {/* table */}\n                &lt;table className=&quot;table&quot;&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;\n                            &lt;th&gt;ID&lt;/th&gt;\n                            &lt;th&gt;タスク&lt;/th&gt;\n                            &lt;th&gt;完了&lt;/th&gt;\n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n                        {/* 行の描画 */}\n                        &lt;RenderRows\n                            todos={this.state.todos}\n                            deleteTask={this.deleteTask}\n                        /&gt;\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/React.Fragment&gt;\n        );\n    }\n}\n\nReactDOM.render(&lt;TodoApp /&gt;, document.getElementById('todoApp'));\n</pre>\n\n\n<h2>まとめ</h2>\n\n\n\n<p>コーディング時に型エラーをチェックしてくれるTypeScriptは大変便利ですので、できるかぎりJavaScriptから置き換えていきたいところです。</p>\n","dateObject":"2019-07-01T00:00:54.000Z","date":"July 01, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"TypeScript React.js laravel","slug":"typescript-react-js-laravel"}],"author":{"name":"koji","slug":"koji"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/06/d675da81e72e572605554fe791afe47b_s.jpg"},"wordpress_id":998}},"pageContext":{"id":"583ad800-069d-56df-9e7d-6c28cd73918a","nextPath":"/2019/06/25/tips-on-s3-and-cloudfront/","nextTitle":"S3とCloudFront関連のあれこれ","prevPath":"/2019/07/23/tips-of-eager-loading-in-laravel/","prevTitle":"Laravel の eager loading に関する小ネタ"}}}