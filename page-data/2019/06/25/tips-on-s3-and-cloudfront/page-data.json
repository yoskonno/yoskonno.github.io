{"componentChunkName":"component---src-templates-post-js","path":"/2019/06/25/tips-on-s3-and-cloudfront/","result":{"data":{"wordpressPost":{"id":"6077719b-f3ba-5fa8-9e7c-1fc6dcf5e277","title":"S3とCloudFront関連のあれこれ","excerpt":"<p>先日、S3 に HTML、画像、CSS などを置いて、CloudFront でそれを静的サイトとして配信するという設定を行いました。その際に、サイト内でいくつかの条件に従ってリダイレクトさせるという要件がありました。 C [&hellip;]</p>\n","slug":"tips-on-s3-and-cloudfront","content":"\n<p>先日、S3 に HTML、画像、CSS などを置いて、CloudFront でそれを静的サイトとして配信するという設定を行いました。その際に、サイト内でいくつかの条件に従ってリダイレクトさせるという要件がありました。</p>\n\n\n\n<p>CloudFront は、それ以前もちょっとは触ったことはあったのですが、自分自身でちゃんと設定する事は初めてだったため、分からなかった点・戸惑う点などが多々あり、色々と調べつつ行いました。</p>\n\n\n\n<p>本記事では、それらの調べた内容をまとめて記載します。対象読者としては、以下を前提とします。</p>\n\n\n\n<ul><li>CloudFront が何をするものなのかを知っている</li><li>S3 の基本的な設定方法（特に静的ウェブサイトホスティング関連）は知っている</li></ul>\n\n\n\n<p>また、本記事は、体系立てた情報の提供を目的としたものではありませんので、そうした情報が必要な場合は、公式ドキュメントなり書籍などを参照して下さい。</p>\n\n\n\n<h2>http -> https のリダイレクト</h2>\n\n\n\n<p>動的なwebサイトの場合、フロントに置いたリバースプロキシの Apache なり nginx で処理することが一般的だと思います。（Apache であれば mod_rewrite とか。）静的なサイトの場合でも、それらのwebサーバーを使う場合は同様の設定を行います。</p>\n\n\n\n<p>それを CloudFront でやるには、Viewer Protocol Policy という設定項目で簡単に実現できます。以下のリンクを参考にしてみて下さい。</p>\n\n\n\n<ul><li><a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://aws.amazon.com/jp/premiumsupport/knowledge-center/cloudfront-https-requests-s3/\" target=\"_blank\">CloudFront を使用して HTTPS リクエスト S3 を提供する</a></li><li><a href=\"http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/MigrateS3ToCloudFront.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">amazon web services &#8211; How to redirect HTTP to HTTPS using S3, Cloudfront, and Route 53 using naked domains? &#8211; Stack Overflow</a></li></ul>\n\n\n\n<p>なお、S3 の静的ウェブサイトホスティング機能単体では実現できません。以下のページ末尾に記載されています。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/WebsiteHosting.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">Amazon S3 での静的ウェブサイトのホスティング &#8211; Amazon Simple Storage Service</a></p>\n\n\n\n<h2>通常のリダイレクト方法は主に2つある</h2>\n\n\n\n<p>http -> https ではなく通常のリダイレクト、つまり<code>/foo</code> にアクセスされたら<code>/bar</code> にリダイレクトさせる、というのは良くある要件だと思います。これを実現する方法は、主に2つあります。以下の公式ドキュメントに詳しく説明されています。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/how-to-page-redirect.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">(オプション) ウェブページリダイレクトの設定 &#8211; Amazon Simple Storage Service</a></p>\n\n\n\n<p>また、以下のページの上の方に「比較」という項目がありますので、そちらで主な違いを確認してみて下さい。</p>\n\n\n\n<p><a href=\"https://dev.classmethod.jp/cloud/aws/amazon-s3-redirect-website/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">Amazon S3 でリダイレクトを扱う ｜ DevelopersIO</a></p>\n\n\n\n<p>ただ、いずれの方法を使うにせよ、気をつけなければいけない点があります。</p>\n\n\n\n<h3>共通: origin にウェブサイトエンドポイントを使用</h3>\n\n\n\n<p>S3 で静的ウェブサイトホスティングの設定をしている場合、S3の通常のエンドポイント（REST API エンドポイント）に加えて、もう1つエンドポイントが使えるようになります。URL に <code>s3-website</code> という文字列が含まれているのがウェブサイトエンドポイント、そうでないのが REST API エンドポイントです。詳細は以下のページをご参照下さい。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/WebsiteEndpoints.html#WebsiteRestEndpointDiff\">ウェブサイトエンドポイント &#8211; Amazon Simple Storage Service</a></p>\n\n\n\n<p>さて、諸々のリダイレクトの機能を使う場合、CloudFront の origin には、ウェブサイトエンドポイントを指定する必要があります。origin を選択する際にプルダウンに選択肢があるのは「REST API エンドポイント」なので、そこから選ばずに<strong>手動で入力</strong>する必要があります。めっちゃ分かりにくいですね。</p>\n\n\n\n<p>AWS のフォーラムでもスレッドがありましたので、そこからいくつか引用しておきます。</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Redirects are only supported by the static website endpoints, which contain &#8220;s3-website&#8221;. The standard S3 endpoints, such as s3.amazonaws.com, will not serve redirects. Instead, you will see the x-amz-website-redirect-location header being returned.</p><cite>https://forums.aws.amazon.com/thread.jspa?threadID=116243</cite></blockquote>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>It is possible to make this work with CloudFront. Instead of selecting a bucket in the dropdown, you enter the full S3 static website endpoint name manually, like &#8220;example.s3-website-us-east-1.amazonaws.com&#8221;. CloudFront will then access your bucket through the correct endpoint and all static website features will work as expected. </p><cite>https://forums.aws.amazon.com/thread.jspa?threadID=116243</cite></blockquote>\n\n\n\n<h3>方法1: Redirection Rules を使う</h3>\n\n\n\n<p>さて、2つの方法について説明していきますが、一番素直なのは、S3 のリダイレクトルールというのを使う方法です。上で挙げた公式ドキュメントの「<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"高度な条件付きリダイレクト (opens in a new tab)\">高度な条件付きリダイレクト</a>」の項に詳しく説明されています。</p>\n\n\n\n<p>ルールの例としては、以下のような感じです。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&lt;RoutingRules&gt;\n  &lt;RoutingRule&gt;\n    &lt;Condition&gt;\n      &lt;KeyPrefixEquals&gt;foo&lt;/KeyPrefixEquals/&gt;\n    &lt;/Condition&gt;\n    &lt;Redirect&gt;\n      &lt;HostName&gt;www.example.com&lt;/HostName&gt;\n      &lt;ReplaceKeyWith&gt;bar/&lt;/ReplaceKeyWith&gt;\n    &lt;/Redirect&gt;\n  &lt;/RoutingRule&gt;\n&lt;/RoutingRules&gt;\n\n</pre>\n\n\n<h3>方法1だと出来なかったことがあった</h3>\n\n\n\n<p>基本的にはこれを使った方が良いと思うのですが、この方法だと出来ないことがありました。</p>\n\n\n\n<p>それはルートディレクトリ <code>/</code> から別の場所へのリダイレクトです。上に挙げたルールの例を見てもらえれば分かる通り、<code>&lt;KeyPrefixEquals></code> に指定するのは、あくまで prefix、つまりパスの先頭の <code>/</code> を除いたものです。なので、<code>/</code> の場合にリダイレクトするという指定が出来ませんでした。</p>\n\n\n\n<p>解決方法は、以下の Stack Overflow に載っていますが、空の index.html をバケットの直下に置いて、メタデータでリダイレクトの設定（後述の「方法2」）を行います。</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/46368745/how-to-redirect-from-bucket-root-to-subdirectory-in-aws-s3#\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">amazon web services &#8211; How to redirect from bucket root to subdirectory in AWS S3? &#8211; Stack Overflow</a></p>\n\n\n\n<h3>方法2: S3オブジェクトにメタデータを付ける</h3>\n\n\n\n<p>S3にアップロードしたオブジェクトに <code>Website-Redirect-Location</code> メタデータ（それにより<code>x-amz-website-redirect-location</code> という名前のレスポンスヘッダーが返される？ようです）を設定する事で、そのオブジェクトにアクセスがあった場合にリダイレクトさせる事が出来ます。</p>\n\n\n\n<p>詳しくは、先ほどの公式ドキュメントの「<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/how-to-page-redirect.html#page-redirect-using-console\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">Amazon S3 コンソールでのページリダイレクトのサポート </a>」の項に記載されています。</p>\n\n\n\n<p>S3オブジェクトにメタデータを設定する方法は、以下を参照して下さい。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/user-guide/add-object-metadata.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">S3 オブジェクトにメタデータを追加する方法 &#8211; Amazon Simple Storage Service</a></p>\n\n\n\n<h2>ディレクトリインデックス関連</h2>\n\n\n\n<p>Webサイトをホスティングする場合、ディレクトリインデックスを設定したい事が殆どでしょう。以下のようなものです。</p>\n\n\n\n<ul><li><code>/</code> にアクセスされたら <code>/index.html</code> を返す</li><li><code>/foo/</code> にアクセスされたら <code>/foo/index.html</code> を返す</li></ul>\n\n\n\n<p>これに関しても、いくつか方法があります。</p>\n\n\n\n<h3>方法1: CloudFront でルートオブジェクトを指定</h3>\n\n\n\n<p>この方法で解決できるケースは限定的です。以下のうち、前者は解決できますが、後者（サブディレクトリ）は解決できません。</p>\n\n\n\n<ul><li><code>/</code> にアクセスされたら <code>/index.html</code> を返す</li><li><code>/foo/</code> にアクセスされたら <code>/foo/index.html</code> を返す</li></ul>\n\n\n\n<p>あまり使いどころがないので、この機能は無効のままにしておいた方が、変なトラブルを防げると思います。</p>\n\n\n\n<p>本機能に関しては、詳しくは以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">デフォルトのルートオブジェクトの指定 &#8211; Amazon CloudFront</a></p>\n\n\n\n<h3>方法2: S3 でインデックスドキュメントを設定する</h3>\n\n\n\n<p>サブディレクトリでもインデックスドキュメントを指定したい場合（ほとんどの場合そうだと思いますが）、S3 の機能を使います。同機能の詳細は、以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/IndexDocumentSupport.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">インデックスドキュメントのサポートの設定 &#8211; Amazon Simple Storage Service</a></p>\n\n\n\n<p>CloudFront と併用する場合の注意点としては、origin にウェブサイトエンドポイントを指定することです。詳しくは、上の方に記載しました。これは多くの人がハマるポイントのようです。</p>\n\n\n\n<h3>方法3: Lambda@Edge を使う</h3>\n\n\n\n<p>最後に紹介する方法は、Lambda@Edge を使って URI を書き換える方法です。詳細は以下に挙げたサイトを参照してください。</p>\n\n\n\n<ul><li><a href=\"https://aws.amazon.com/blogs/compute/implementing-default-directory-indexes-in-amazon-s3-backed-amazon-cloudfront-origins-using-lambdaedge/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">Implementing Default Directory Indexes in Amazon S3-backed Amazon CloudFront Origins Using Lambda@Edge | AWS Compute Blog</a></li><li><a href=\"https://dev.classmethod.jp/cloud/aws/directory-indexes-in-s3-origin-backed-cloudfront/\">できた！S3 オリジンへの直接アクセス制限と、インデックスドキュメント機能を共存させる方法 ｜ DevelopersIO</a></li></ul>\n\n\n\n<h2>TTLを設定する</h2>\n\n\n\n<p>最後はTTLの設定方法を説明します。CloudFront のディストリビューションの設定をしていると、TTL 関連を入力する欄がありますが、グレーアウトして入力できません。入力できるようにするには「オブジェクトキャッシュ」の設定を「カスタマイズ」にする必要があります。詳しくは、以下のドキュメントを参照して下さい。</p>\n\n\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/Expiration.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">コンテンツがエッジキャッシュに保持される期間の管理 (有効期限) &#8211; Amazon CloudFront</a></p>\n\n\n\n<h2>まとめ</h2>\n\n\n\n<p>S3, CloudFront は機能豊富ですが、やりたいことをやる方法が複数ある場合も多く迷うことが多いです。また、origin にウェブサイトエンドポイントを指定する必要があると言うのは、多くの人にとって盲点だと思います。</p>\n\n\n\n<p>本記事が、S3 や CloudFront を使う方々の何らかの役に立てば幸いです。</p>\n","dateObject":"2019-06-24T23:45:07.000Z","date":"June 24, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"CloudFront","slug":"cloudfront"},{"name":"S3","slug":"s3"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/amazon-s3.png"},"wordpress_id":991}},"pageContext":{"id":"6077719b-f3ba-5fa8-9e7c-1fc6dcf5e277","nextPath":"/2019/06/21/laravelの多対多のリレーションについて/","nextTitle":"Laravelの多対多のリレーションについて","prevPath":"/2019/07/01/react-jsのコードをtypescript化する/","prevTitle":"React.jsのコードをTypeScript化する"}}}