{"componentChunkName":"component---src-templates-post-js","path":"/2019/03/06/allocate-secure-env-in-ssm-parameter-to-ecs-task-definition/","result":{"data":{"wordpressPost":{"id":"ebc93cbf-e093-50b2-93aa-007f0891bd00","title":"ECSの機能でSSMのParameter Storeに格納した機密情報をTaskDefinitionに埋め込む","excerpt":"<p>こんにちは！今回は去年AWSで公開された、SSM (System Manager) のParameter Storeに格納した機密な情報（DBのパスワード等）を、直接ECSのTaskDefinitionに指定できる機能が [&hellip;]</p>\n","slug":"allocate-secure-env-in-ssm-parameter-to-ecs-task-definition","content":"\n<p>こんにちは！今回は去年AWSで公開された、SSM (System Manager) のParameter Storeに格納した機密な情報（DBのパスワード等）を、直接ECSのTaskDefinitionに指定できる機能が発表されましたが、今回それを試してみたので紹介します。</p>\n\n\n\n<p>今回題材に使うアプリケーションはRuby on Railsと致します。（と言ってもRails特有のコードは登場しませんが）</p>\n\n\n\n<h2 id=\"前提\"><a href=\"https://hackmd.io/YzigGNDZQ8yMGQ5OAK3e5w?view#%E5%89%8D%E6%8F%90\"></a>前提</h2>\n\n\n\n<p>前提として、今まで開発してきたPJをECSで動かす際は、以下のような運用をしていました。</p>\n\n\n\n<ul><li class=\"\">Environmentは&nbsp;<code>development</code>&nbsp;と&nbsp;<code>test</code>,&nbsp;<code>production</code>&nbsp;の3つ</li><li class=\"\"><code>development</code>&nbsp;はローカル用、&nbsp;<code>test</code>&nbsp;はCI用、&nbsp;<code>production</code>&nbsp;は本番とステージング用</li><li class=\"\">本番とステージングで使うコンテナイメージは全く同じもので、TaskDefinitionの定義によって（DBの接続先などを）微調整</li></ul>\n\n\n\n<p>最後について、RailsにはもともとEnvironment毎に設定を出し分ける機能（<code>config/database.yml</code>等）が備わっていますが、Dockerの特性上、極力環境の差異はアプリケーション自体に定義するのではなく、動作する環境上で実行時に確定したいと言う思いがありました。（詳細は&nbsp;<a href=\"https://12factor.net/config\" target=\"_blank\" rel=\"noreferrer noopener\">The Twelve-Factor AppのConfig</a>を参照）<br>実際には、The Twelve-Factor Appにも書かれている通りコンテナの環境変数を使って環境上の差異を吸収していました。</p>\n\n\n\n<h3 id=\"機密な情報の取扱\"><a href=\"https://hackmd.io/YzigGNDZQ8yMGQ5OAK3e5w?view#%E6%A9%9F%E5%AF%86%E3%81%AA%E6%83%85%E5%A0%B1%E3%81%AE%E5%8F%96%E6%89%B1\"></a>機密な情報の取扱</h3>\n\n\n\n<p>例えばRailsのSecretKeyBaseや、DBのパスワード、FirebaseやFacebook AppのAPIシークレット等がこれにあたります。これについても先述の通り環境変数を使って実行時に渡すのですが、TaskDefinitionの&nbsp;<code>environment</code>&nbsp;ディレクティブに直接定義するのは少々気が引けます。<br>実際に、当プロジェクトではTaskDefinitionはアプリ側のリポジトリに管理されていたので、開発者は全員が閲覧可能でしたが、機密情報はすべての開発者に見える必要がない為、これらの情報はデプロイ時に個別に展開する必要がありました。</p>\n\n\n\n<h2 id=\"これまでの対応方法\"><a href=\"https://hackmd.io/YzigGNDZQ8yMGQ5OAK3e5w?view#%E3%81%93%E3%82%8C%E3%81%BE%E3%81%A7%E3%81%AE%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95\"></a>これまでの対応方法</h2>\n\n\n\n<p>これまでも、AWSの公式ブログでこの課題について触れられていて、<a href=\"https://aws.amazon.com/jp/blogs/compute/managing-secrets-for-amazon-ecs-applications-using-parameter-store-and-iam-roles-for-tasks/\" target=\"_blank\" rel=\"noreferrer noopener\">SSMのParameter Storeを使うもの</a>や、<a href=\"https://aws.amazon.com/jp/blogs/security/how-to-manage-secrets-for-amazon-ec2-container-service-based-applications-by-using-amazon-s3-and-docker/\" target=\"_blank\" rel=\"noreferrer noopener\">S3を使うもの</a>等が紹介されていました。</p>\n\n\n\n<p>前者の方がよりおすすめされていましたが、当時は以下の理由でS3の方を採用しました。</p>\n\n\n\n<ul><li>アプリケーションで唯一使用していたAWS SDKがRubyのS3のみであった <ul><li>SSMにアクセスするためのSDKを別途用意する必要がある </li></ul></li><li><a rel=\"noreferrer noopener\" href=\"https://github.com/bkeepers/dotenv\" target=\"_blank\">dotenv Gem</a>を使えば環境変数の一覧をファイルで管理できるのでS3の方が相性が良い</li></ul>\n\n\n\n<p>以下、実際の運用フローです。</p>\n\n\n\n<p><strong>1. 環境変数ファイルを管理するS3バケットを準備</strong></p>\n\n\n\n<p>ポイントは以下となります。</p>\n\n\n\n<ul><li>特定の強い権限を持つ管理者ユーザーと、アプリケーションを実行するTaskDefinitionのみが参照可能</li><li>サーバーサイドエンクリプションを実行するようリクエストを強制（<a rel=\"noreferrer noopener\" href=\"https://aws.amazon.com/jp/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/\" target=\"_blank\">バケットポリシーにて</a>）</li><li>コンテナインスタンスはVPCの中にいる為、S3用に<a rel=\"noreferrer noopener\" href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\" target=\"_blank\">VPCエンドポイントを用意</a>する</li></ul>\n\n\n\n<p><strong>2. タスクのエントリポイント用のBashスクリプトを作成</strong></p>\n\n\n\n<p>デフォルトのエントリポイントは単純に&nbsp;<code>rails s</code>&nbsp;なのですが、機密情報を扱うproduction環境等では以下のような起動スクリプトを用意していました:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n#!/usr/bin/env bash\n\n# The docker entrypoint for production environment.\n\nset -eu\n\n# Runs ruby one-liner command to retrieve secure env vars,\n# NOT via Rails environment because some mandatory env vars for Rails are missing at this point.\nruby -e 'require &quot;aws-sdk-s3&quot;; Aws::S3::Resource.new.bucket(&quot;bucket-to-store-secure-env&quot;).object(ENV[&quot;SECURE_ENV&quot;]).download_file(&quot;.env&quot;)'\n\n# If any desired command is passed to arguments runs it otherwise, runs rails server.\nif [[ $# -gt 0 ]]; then\n  exec &quot;$@&quot;\nelse\n  exec rails server -b 0.0.0.0 -p 3000\n</pre>\n\n\n<p>ざっくり解説すると、インストール済みのS3 SDK for Rubyを使って機密情報が書かれた環境変数ファイル（S3のオブジェクトキーは、別途&nbsp;<code>SECURE_ENV</code>&nbsp;環境変数て指定）を&nbsp;<code>.env</code>&nbsp;と言うファイル名でダウンロードしてから、指定のコマンド（未指定の場合は&nbsp;<code>rails s</code>）を実行、と言った流れになります。</p>\n\n\n\n<h2 id=\"ECSの新機能を利用した形での対応\"><a href=\"https://hackmd.io/YzigGNDZQ8yMGQ5OAK3e5w?view#ECS%E3%81%AE%E6%96%B0%E6%A9%9F%E8%83%BD%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E5%BD%A2%E3%81%A7%E3%81%AE%E5%AF%BE%E5%BF%9C\"></a>ECSの新機能を利用した形での対応</h2>\n\n\n\n<p>実際に、<a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html\" target=\"_blank\" rel=\"noreferrer noopener\">丁寧なドキュメント</a>があるのでそれに従って設定を行います。</p>\n\n\n\n<p><strong>1. SSMにSecureStringなParameterを作る</strong></p>\n\n\n\n<p>実際にはDBのパスワード等を想定しています。尚、Parameter名を&nbsp;<code>/test/secure1</code>&nbsp;の様に階層構造にしておくと、あとでIAMの設定が楽になります。<br>尚、今回はアカウントのデフォルトKMSキーを使いました。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/engineering.mobalab.net/wp-content/uploads/2019/03/gRk5sR1.png?fit=680%2C685&amp;ssl=1\" alt=\"\" class=\"wp-image-660\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/gRk5sR1.png?w=1626&amp;ssl=1 1626w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/gRk5sR1.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/gRk5sR1.png?resize=298%2C300&amp;ssl=1 298w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/gRk5sR1.png?resize=768%2C774&amp;ssl=1 768w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/gRk5sR1.png?resize=1016%2C1024&amp;ssl=1 1016w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/gRk5sR1.png?resize=70%2C70&amp;ssl=1 70w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /><figcaption>SSM Parameterの設定画面</figcaption></figure>\n\n\n\n<p><strong>2. ECS TaskがParameterを取得し、復号する為のTask Roleを設定する</strong></p>\n\n\n\n<p>TaskDefinitionを実行する為に使うExecution Roleに、次のようなポリシーを設定します（他にもECRやCloudWatchへの権限もあると思いますが、その場合は追加で）:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: [\n                &quot;ssm:GetParameters&quot;,\n                &quot;kms:Decrypt&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;arn:aws:ssm:リージョン名:AWSアカウントID:parameter/test/*&quot;,\n                &quot;arn:aws:kms:リージョン名:AWSアカウントID:alias/aws/ssm&quot;\n            ]\n        }\n    ]\n}\n</pre>\n\n\n<p>今回は&nbsp;<code>/test/</code>&nbsp;以下の階層にあるParameter全てを取得可能に、また復号のために（先程設定した）アカウントデフォルトのキーの使用権を与えます。</p>\n\n\n\n<p><strong>3. TaskDefinitionのsecretsとexecutionRoleArnを設定する</strong></p>\n\n\n\n<p>TaskDefinitionのJSON定義の&nbsp;<code>executionRoleArn</code>&nbsp;に先程作ったExecution RoleのARNを、<code>containerDefinitions[*].secrets</code>&nbsp;(※&nbsp;<code>.environment</code>&nbsp;ではないので注意) にも設定を、それぞれ以下の様に行います:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n  ...,\n  &quot;executionRoleArn&quot;: &quot;さっき指定したTaskRoleのARN&quot;,\n  &quot;containerDefinitions&quot;: [\n    {\n      ...,\n      &quot;secrets&quot;: [\n        {\n          &quot;name&quot;: &quot;SECURE1&quot;,\n          &quot;valueFrom&quot;: &quot;/test/secure1&quot;\n        }\n      ],\n      &quot;environment&quot;: [\n        {\n          &quot;name&quot;: &quot;NON_SECURE&quot;,\n          &quot;value&quot;: &quot;hogehoge&quot;\n        }\n      ]\n      ...,\n    }\n  ],\n  ...\n}\n</pre>\n\n\n<p>尚、SSM ParameterとECSのリージョンが異なる場合は、&nbsp;<code>valueFrom</code>&nbsp;にはParameterのFullArn (<code>arn:aws:ssm:リージョン名:AWSアカウントID:parameter/test/secure1</code>&nbsp;の様な) を指定する必要があるので注意が必要です。</p>\n\n\n\n<p>また、検証の為普通の環境変数 <code>NON_SECURE</code> も設定を行いました。</p>\n\n\n\n<p><strong>4. 実際に実行してみる</strong></p>\n\n\n\n<p>先程更新したTaskDefinitionを使って実際にタスクを作ります。因みに先程検証に使ったTaskDefinitionのプライマリコンテナは、単に&nbsp;<code>busybox</code>&nbsp;イメージで&nbsp;<code>tail -f /dev/null</code>&nbsp;（バックグラウンドで何もしないプロセスを継続するだけ）するだけの内容となっています。</p>\n\n\n\n<p>※実際のRunTaskの手順は省略します。</p>\n\n\n\n<p>タスクが起動しました。コンソール上ではこの様に表示されています:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://i2.wp.com/engineering.mobalab.net/wp-content/uploads/2019/03/YUIMd5L.png?fit=680%2C307&amp;ssl=1\" alt=\"\" class=\"wp-image-659\" srcset=\"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/YUIMd5L.png?w=2808&amp;ssl=1 2808w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/YUIMd5L.png?resize=300%2C135&amp;ssl=1 300w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/YUIMd5L.png?resize=768%2C346&amp;ssl=1 768w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/YUIMd5L.png?resize=1024%2C462&amp;ssl=1 1024w, https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/YUIMd5L.png?w=2400&amp;ssl=1 2400w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /><figcaption>ECS Taskの詳細画面</figcaption></figure>\n\n\n\n<p>secretsの内容は表示されていませんね（当然ですが）。CLIでも同様でした:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ aws ecs describe-tasks --tasks タスクID\n{\n    ...,\n    &quot;tasks&quot;: [\n        {\n            ...,\n            &quot;containers&quot;: [\n                {\n                    &quot;containerArn&quot;: &quot;arn:aws:ecs:us-west-2:xxx:container/9698822b-4c8f-4a07-9969-d0a188dc646b&quot;,\n                    &quot;taskArn&quot;: &quot;arn:aws:ecs:us-west-2:xxx:task/タスクID&quot;,\n                    &quot;name&quot;: &quot;test&quot;,\n                    &quot;networkBindings&quot;: [],\n                    &quot;lastStatus&quot;: &quot;RUNNING&quot;,\n                    &quot;healthStatus&quot;: &quot;UNKNOWN&quot;,\n                    &quot;networkInterfaces&quot;: []\n                }\n            ]\n        }\n    ]\n}\n</pre>\n\n\n<p>それでは実際にコンテナインスタンスにSSHして、コンテナの中身を見てみましょう。以下は実行中のコンテナで&nbsp;<code>env</code>&nbsp;コマンドを実行し、環境変数の一覧を取得しています:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n[ec2-user@ip-n-n-n-n ~]$ docker exec コンテナの名前 env\n...\nNON_SECURE=hogehoge\nSECURE1=foobar1\n...\n</pre>\n\n\n<p>（通常の）<code>NON_SECURE</code>&nbsp;と （機密な）<code>SECURE1</code>&nbsp;環境変数が無事渡っている事が分かります。</p>\n\n\n\n<h2 id=\"どのように実現されている？\"><a href=\"https://hackmd.io/YzigGNDZQ8yMGQ5OAK3e5w?view#%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E5%AE%9F%E7%8F%BE%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%EF%BC%9F\"></a>どのように実現されている？</h2>\n\n\n\n<p><a href=\"https://github.com/aws/amazon-ecs-agent/blob/713ea6f3e2292927cc66bac030439e043ec987fd/agent/taskresource/ssmsecret/ssmsecret.go#L250\" target=\"_blank\" rel=\"noreferrer noopener\">ECS Agentのコード</a>をざっくり見た感じでは、Task Execution Roleを使ってSSM Parameterの取得と復号を行い、普通の環境変数とマージしてコンテナを実行している様です。</p>\n\n\n\n<p>実際に、&nbsp;<code>docker inspect</code>&nbsp;してみるとその様な動きをしているのが分かります:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n[ec2-user@ip-n-n-n-n ~]$ docker inspect コンテナの名前\n\n[\n    {\n        ...,\n        &quot;Config&quot;: {\n            ...,\n            &quot;Env&quot;: [\n                ...,\n                &quot;NON_SECURE=hogehoge&quot;,\n                &quot;SECURE1=foobar1&quot;,\n                ...\n            ],\n            ...\n        }\n    }    \n]\n</pre>\n\n\n<p>先に紹介した <a rel=\"noreferrer noopener\" href=\"https://aws.amazon.com/jp/blogs/security/how-to-manage-secrets-for-amazon-ec2-container-service-based-applications-by-using-amazon-s3-and-docker/\" target=\"_blank\">S3での対応方法</a> が言及する、普通に環境変数をセットした場合にインスタンス上からこれらの機密な情報が見えてしまうと言う問題が、この方法では解決できていない様に見えます（従来どおりコンテナの中で環境変数を展開すればinspectでは見えないので）。<br>しかし、どの道Docker APIにアクセスできる権限があるのであれば、先程のように <code>env</code> コマンドのように任意のコマンドを exec されたら結果は同じなので、そもそもインスタンスへのログイン権限とTaskDefinitionの閲覧権限は分けるのが安全です。</p>\n\n\n\n<h2 id=\"まとめ\"><a href=\"https://hackmd.io/YzigGNDZQ8yMGQ5OAK3e5w?view#%E3%81%BE%E3%81%A8%E3%82%81\"></a>まとめ</h2>\n\n\n\n<p>以上の検証により、以前は少し面倒だったSSM ParameterのECS Taskの環境変数への埋め込みが格段に楽になりました！これは使わない手はないです。</p>\n","dateObject":"2019-03-06T00:00:56.000Z","date":"March 06, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":null,"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/1_z6Q0fwEYalLlQjw3zTJCXQ.png?fit=768%2C390&ssl=1","height":390,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/1_z6Q0fwEYalLlQjw3zTJCXQ.png"},"wordpress_id":658}},"pageContext":{"id":"ebc93cbf-e093-50b2-93aa-007f0891bd00","nextPath":"/2019/02/25/use-multiple-aws-accounts-in-serverless/","nextTitle":"Serverless で複数の AWS アカウントを使用する","prevPath":"/2019/03/07/process-s3-file-using-stream/","prevTitle":"AWS CLIで標準入出力でS3オブジェクトを操作する方法"}}}