{"componentChunkName":"component---src-templates-post-js","path":"/2019/03/10/build-infrastructures-with-terraform/","result":{"data":{"wordpressPost":{"id":"995a0a34-5bf0-58c6-bf99-b39cdb7b41fb","title":"Build Infrastructures with Terraform","excerpt":"<p>Outline Terraform is a tool for Infrastructure as Code, and there are many types&nbsp;of similar tools. Why do [&hellip;]</p>\n","slug":"build-infrastructures-with-terraform","content":"\n<p class=\"has-medium-font-size\"><strong>Outline</strong></p>\n\n\n\n<p>Terraform is a tool for Infrastructure as Code, and there are many types&nbsp;of similar tools. Why do people choose Terraform then? In this article, I will explain the following topics.</p>\n\n\n\n<ul><li>What is Terraform?</li><li>Why Terraform is necessary?</li><li>How to build infrastructures with Terraform. </li><li>Different usage of Terraform and other tools.</li></ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>What is <g class=\"gr_ gr_22 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"22\" data-gr-id=\"22\">Terraform</g></strong><g class=\"gr_ gr_22 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"22\" data-gr-id=\"22\"> </g><strong><g class=\"gr_ gr_22 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"22\" data-gr-id=\"22\">?</g></strong> </p>\n\n\n\n<p><strong> Outline </strong></p>\n\n\n\n<p>Terraform is a tool for Infrastructure as Code （Herein after I will say IaC）&nbsp;as I mentioned already is&nbsp;developed by HashiCorp, a company which is famous for Vagrant.</p>\n\n\n\n<p>Terraform allows you to manage infrastructures such as cloud platform, AWS, Azure and GCP. And also, OpenStack.</p>\n\n\n\n<p>Terraform builds infrastructures from your code. Below are advantages of IaC. (I will not talk about IaC here)</p>\n\n\n\n<ul><li>You can check the changed history by using the version control tool.</li><li>You can use the setting over and over again.</li></ul>\n\n\n\n<p>Also, specific advantages of Terraform are listed below.</p>\n\n\n\n<ul><li>Dependency of every resource is controlled.</li><li>Store the current status of infrastructures.</li><li>Applicable to major cloud platforms.</li></ul>\n\n\n\n<p>Next, I&nbsp;will talk about specific advantages of Terraform in detail.</p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Dependency of every resource is controlled</strong></p>\n\n\n\n<p>When you manage infrastructures at a certain level of scale, you have to deal with various components. Even with a simple circumstance or while just managing multiple servers with AWS, there will be the following components.</p>\n\n\n\n<ul><li>VPC<ul><li>subnet</li></ul><ul><li>routing</li></ul></li><li>EC2<ul><li>instance</li></ul><ul><li>IP address</li></ul><ul><li>Security group</li></ul></li></ul>\n\n\n\n<p>When you have to deal with various components and when you change one of these settings, influence between each component is unrecognizable.</p>\n\n\n\n<p>When you change one of the settings, Terraform allows you to know the influence between components. This means that you are able to know what you have to take care of in advance such as restart or rebuild resources. </p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Retain the current status of infrastructures.</strong></p>\n\n\n\n<p>Terraform retains the current status of infrastructures. In other tools, it is uncertain if the content of a config file is applied to the current infrastructures. On the contrary, Terraform keeps “State” in a file. This means when you make some changes in infrastructures, by comparing with the current “State” and new one, Terraform applies only the difference between those two.</p>\n\n\n\n<p>Please refer the page below for the details.</p>\n\n\n\n<p><a href=\"https://www.terraform.io/docs/state/purpose.html\">State – Terraform by HashiCorp</a></p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Applicable to main cloud platforms</strong></p>\n\n\n\n<p>Terraform is applicable to the main cloud platforms such as AWS, Azure and GCP. This is not a big advantage as other tools are the same. However, Terraform enables you to set them with similar writings regardless of the sort of infrastructures. This makes building multi-vendor infrastructures or switching to another vendor easier. </p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Why Terraform is necessary</strong></p>\n\n\n\n<p>Why do we choose Terraform instead of many other similar tools? I will explain a few things based on the official documentation below.</p>\n\n\n\n<p><a href=\"https://www.terraform.io/intro/vs/index.html\">Terraform vs. Other Software – Terraform by HashiCorp</a></p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Chef, Puppet etc.</strong></p>\n\n\n\n<p>Chef, Puppet&nbsp;are the configuration management systems. These are suitable to install software or set the changes to a certain machine.</p>\n\n\n\n<p>Personally, I have stopped using Chef because of its complexity. The popularity of Chef seems to have declined recently. As for Puppet, I have never tried.</p>\n\n\n\n<p>Ansible is often used as a configuration management tool; even the official web site explains, “App deployment, configuration management and orchestration – all from one system”. So,&nbsp;I consider it as the same category as Chef and Puppet.</p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>CloudFormation, Heat etc.</strong></p>\n\n\n\n<p>CloudFormation and Heat are the similar to Terraform function wise. The CloudFormation is only applicable to AWS and Heat is only applicable to OpenStack. On the other hand, Terraform is applicable to various cloud platforms. This is the biggest difference.</p>\n\n\n\n<p>I&nbsp;had used CloudFormation a little bit. Even&nbsp;though its function&nbsp;is enough, it seems to require a lot of time to learn it. Only being applicable to AWS is a big disadvantage.</p>\n\n\n\n<p>In contrast, Terraform is pretty simple and applicable to various platforms. So I recommend that you use Terraform.</p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>How to build infrastructures with Terraform </strong></p>\n\n\n\n<p>The main subject starts&nbsp;from here. Make sure that installation is finished.</p>\n\n\n\n<p>The usage of Terraform is written in the pages below.</p>\n\n\n\n<p><a href=\"https://www.terraform.io/intro/getting-started/build.html\">Build Infrastructure – Terraform by HashiCorp</a></p>\n\n\n\n<p>The basic flow of settings is below.</p>\n\n\n\n<ul><li>Create&nbsp;a file named&nbsp;*.tf&nbsp;</li><li>Initialize with terraform init&nbsp; </li><li>Apply the settings to infrastructures with&nbsp;terraform apply&nbsp; </li><li>Whenever you modify *.tf&nbsp;, execute&nbsp;terraform apply&nbsp;every time.</li></ul>\n\n\n\n<p class=\"has-medium-font-size\"><strong>State and Remote State</strong></p>\n\n\n\n<p>After you <g class=\"gr_ gr_34 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"34\" data-gr-id=\"34\">hit </g><code>terraform apply</code><g class=\"gr_ gr_34 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"34\" data-gr-id=\"34\">,</g> a file named <code>terraform.tfstate</code> will be created. This holds the State. Since this is a very important file, please keep it safe.</p>\n\n\n\n<p>I recommend that you build a Remote State system and put the file in S3 as the shared file if multiple people use the infrastructures. (Normally, this is the case.)</p>\n\n\n\n<p>The usage of Remote State is written below but more information is needed.</p>\n\n\n\n<p><a href=\"https://www.terraform.io/docs/state/remote.html\">State: Remote Storage – Terraform by HashiCorp</a></p>\n\n\n\n<p>So I will explain the settings.</p>\n\n\n\n<p>First, use an extension file with <code>.tf</code> &nbsp;save with any filename such as  <br><code>s3-backend.tf&nbsp;.</code></p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nterraform {\n  backend &quot;s3&quot; {\n    bucket  = &quot;a-bucket-for-provisioning&quot;\n    key     = &quot;terraform.tfstate&quot;\n    region  = &quot;ap-northeast-1&quot;\n  }\n}\n</pre>\n\n\n<p>By hitting <code>terraform init</code> ,  <code>*.tfstate</code> &nbsp;&nbsp;the file will be saved on S3. </p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Workspace</strong></p>\n\n\n\n<p>Terraform has a concept of “Workspace”.</p>\n\n\n\n<p>Typical usages are to create <code>development</code><g class=\"gr_ gr_67 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"67\" data-gr-id=\"67\">, </g><code>staging</code><g class=\"gr_ gr_67 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep\" id=\"67\" data-gr-id=\"67\">,</g> <code>production</code> <code>on</code> &nbsp;Workspace and switch them to appropriate Workspace.</p>\n\n\n\n<p>Inside of workspace, you have to store a state file and other files in each workspace directory.</p>\n\n\n\n<p>Please use the command below to use workspace.</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n# Create a workspace name foo, and switch to it.\nterraform workspace new foo\n# Create a workspace name bar, and switch to it.\nterraform workspace new bar\n# Switch to workspace name foo.\nterraform workspace select foo\n</pre>\n\n\n<p>Within the setting file, you can use workspace name in the instance name.</p>\n\n\n\n<p>Below is the example of setting cited from the official site.</p>\n\n\n\n<p> </p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nresource &quot;aws_instance&quot; &quot;example&quot; {\n  tags {\n    Name = &quot;web - ${terraform.workspace}&quot;\n  }\n\n  # ... other arguments\n}\n</pre>\n\n\n<p>Till here, the basic tasks to build infrastructures with Terraform are covered.</p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Different usage of Terraform with other tools</strong></p>\n\n\n\n<p>In the beginning, I wrote the difference between Terraform and other tools. Here, I will write different usages compared to other tools. </p>\n\n\n\n<p>Personally, I use it as below. Below is the example of AWS but other cloud vender would be very similar to this.</p>\n\n\n\n<ul><li>To define AWS infrastructures (EC2, ELB, VPC, RDS, etc）&nbsp;is mainly Terraform.</li><li>Installation of software to EC2 is Ansible</li><li>Lambda itself and resources definition that Lambda function use will be Serverless</li></ul>\n\n\n\n<p>Ideally, I would like to use Terraform for all the AWS infrastructures. However, to define lambda function with Terraform was pretty bothersome. As for Lambda, I recommend you to use Serverless, which I introduced before. </p>\n\n\n\n<p>The opportunity to use EC2 has gradually decreased. I assume that Ansible will be unnecessary in the near future. Instead, Kubernetes will be used for containers. </p>\n\n\n\n<p>I found an interesting article at the end of last year. (Written in Japanese)</p>\n\n\n\n<p>This article said that trying to cover everything by using one tool would not be a good sdea since automated tools are easily replaced by other ones.</p>\n\n\n\n<p>Therefore, I recommend you to combine Terraform and other tools especially the areas that Terraform cannot cover well.</p>\n\n\n\n<p>Please write the settings of Lambda function in the Functions section. Here, define only general settings such as function name. Please write the actual program code in the other file.</p>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Conclusion</strong></p>\n\n\n\n<p>There are many tools for IaC. Terraform, a configuration management tool&nbsp;for main cloud platform, is suitable to define and build infrastructure itself.</p>\n\n\n\n<p>However, we have to make sure that there are certain areas where Terraform doesn’t cover. So the best way is to use it with the other tools</p>\n","dateObject":"2019-03-10T11:02:48.000Z","date":"March 10, 2019","categories":[{"name":"English","slug":"en"}],"tags":null,"author":{"name":"renn19","slug":"renn19"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/01/datacenter.jpg?fit=1024%2C768&ssl=1","height":768,"width":1024},"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/01/datacenter.jpg?fit=768%2C576&ssl=1","height":576,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/01/datacenter.jpg"},"wordpress_id":701}},"pageContext":{"id":"995a0a34-5bf0-58c6-bf99-b39cdb7b41fb","nextPath":"/2019/03/08/laravelのテンプレートでのinclude-yield-sectionの違い/","nextTitle":"Laravelのテンプレートbladeでの@include @yield @sectionの違い","prevPath":"/2019/03/22/a-bug-in-ansible-s3-sync-module-and-workaround-2/","prevTitle":"Ansibleのs3_syncモジュールのfile_change_strategy: date_sizeのバグと対処法"}}}