{"componentChunkName":"component---src-templates-post-js","path":"/2019/03/22/a-bug-in-ansible-s3-sync-module-and-workaround-2/","result":{"data":{"wordpressPost":{"id":"9706fb67-938b-5763-b59a-b74d49f673c1","title":"Ansibleのs3_syncモジュールのfile_change_strategy: date_sizeのバグと対処法","excerpt":"<p>対処法については一番最後に書いてありますので、面倒な方は読み飛ばして下さい: 対処法 このバグは当エントリ執筆時点の2019年3月22日現在確認ができています。また、現段階でAnsible本体にIssueとPull Re [&hellip;]</p>\n","slug":"a-bug-in-ansible-s3-sync-module-and-workaround-2","content":"\n<p>対処法については一番最後に書いてありますので、面倒な方は読み飛ばして下さい: <a href=\"#対処法\">対処法</a></p>\n\n\n\n<p>このバグは当エントリ執筆時点の2019年3月22日現在確認ができています。また、現段階でAnsible本体に<a href=\"https://github.com/ansible/ansible/issues/54076\" target=\"_blank\" rel=\"noreferrer noopener\">Issue</a>と<a href=\"https://github.com/ansible/ansible/pull/53935\" target=\"_blank\" rel=\"noreferrer noopener\">Pull Request</a>を開いていますが、この時点では音沙汰が無いので、しばらくは修正されないかもしれません。</p>\n\n\n\n<p>また、バグについてのReproducerも用意したので興味がある方はどうぞ:&nbsp;<a href=\"https://github.com/issei-m/ansible-s3-sync-bug-reproducer\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/issei-m/ansible-s3-sync-bug-reproducer</a></p>\n\n\n\n<h2 id=\"Ansibleについて\"><a href=\"https://hackmd.io/sTRDxoErQnqwEsrT5au6gQ?view#Ansible%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"></a>Ansibleについて</h2>\n\n\n\n<p>当エントリの読者には説明は不要かと思いますのでざっくりとしか説明しませんが、サーバー等の構成管理ツールです。Yamlファイルで求めるサーバーの状態を宣言（例：秘密鍵AでSSHログイン可能なユーザー&nbsp;<code>foo</code>&nbsp;が存在する事、など）すると、その状態を保ってくれます。最近はコンテナやサーバーレスのおかげで以前よりは使う頻度は個人的には減りましたが、今でも使う事があります。</p>\n\n\n\n<p><a href=\"https://www.ansible.com/\" target=\"_blank\" rel=\"noreferrer noopener\">公式サイト</a></p>\n\n\n\n<h2 id=\"s3_syncモジュールについて\"><a href=\"https://hackmd.io/sTRDxoErQnqwEsrT5au6gQ?view#s3_sync%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"></a>s3_syncモジュールについて</h2>\n\n\n\n<p>その名の通り、AWS S3のバケットにローカルのファイルをアップロードできるモジュールです。</p>\n\n\n\n<p><a href=\"https://docs.ansible.com/ansible/latest/modules/s3_sync_module.html\" target=\"_blank\" rel=\"noreferrer noopener\">公式ドキュメント</a></p>\n\n\n\n<p>ただファイルをアップロードするだけでなく、差分チェック等をする事によって無駄なアップロードを発生させず、効果的に同期を行う事が可能な賢いモジュールです。</p>\n\n\n\n<p>記述例は次のような感じです:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ntasks:\n  - name: copy file to s3\n    s3_sync:\n      bucket: &quot;{{ bucket_name }}&quot;\n      file_root: &quot;./s3&quot;\n      key_prefix: &quot;&quot; # デフォルト\n      mode: push\n      file_change_strategy: date_size # デフォルト\n</pre>\n\n\n<p>この設定では、特定のバケット名（変数&nbsp;<code>bucket_name</code>&nbsp;で指定）のルート直下に対し、ローカルの&nbsp;<code>./s3</code>&nbsp;ディレクトリ以下の全ファイルを同期する形となっています。<br>また、今回指定している&nbsp;<code>file_change_strategy</code>&nbsp;オプションは先述の通り、何を持ってファイルに差分があるか、すなわちファイルをアップロードするべきか判断するストラテジ（ロジック）の指定となっています。</p>\n\n\n\n<p><code>date_size</code>&nbsp;はデフォルトのストラテジとなっており、 “アップロード対象のファイルのファイルサイズがローカルとS3で異なるか、ローカル側の最終更新日時が新しければアップロード、そうでなければアップロードは行わない” と言う内容になっています。確かにこれであれば、ローカル側のファイルに一切変更がなければアップロードは行われないので、パフォーマンスの点で有利です。</p>\n\n\n\n<p>しかし、今回タイトルに示す通り、&nbsp;<code>date_size</code>&nbsp;の判定ロジックにバグがあり、想定した様に動作しません。</p>\n\n\n\n<h2 id=\"バグの内容\"><a href=\"https://hackmd.io/sTRDxoErQnqwEsrT5au6gQ?view#%E3%83%90%E3%82%B0%E3%81%AE%E5%86%85%E5%AE%B9\"></a>バグの内容</h2>\n\n\n\n<p>実際にどのようなバグがあるか実験してみます。冒頭で紹介した<a href=\"https://github.com/issei-m/ansible-s3-sync-bug-reproducer\" target=\"_blank\" rel=\"noreferrer noopener\">Reproducer</a>を使いましょう。</p>\n\n\n\n<p>このリポジトリをCloneして以下のコマンドを実行すると、ローカルの&nbsp;<code>s3/target.txt</code>&nbsp;が指定のS3バケットの&nbsp;<code>/target.txt</code>&nbsp;としてアップロードされます:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ ansible-playbook playbook.yml --extra-vars 'bucket_name=your-bucket-name'\n</pre>\n\n\n<p>※バケット名の <code>your-bucket-name</code> は適宜読み替えて下さい</p>\n\n\n\n<p>すると以下の出力が示す通り、無事にファイルがアップロードされます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nTASK [copy file to s3] *********************************************************************************************************************************************************************************\nchanged: [localhost]\n</pre>\n\n\n<p>因みに先程のファイルの中身は&nbsp;<code>Test!!</code>&nbsp;なのですが、S3側の中身を見てみましょう:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ aws s3 cp s3://your-bucket-name/target.txt -                            \nTest!!\n</pre>\n\n\n<p>成功ですね。</p>\n\n\n\n<p>それでは中身を&nbsp;<code>Yeah!!</code>&nbsp;に変更して再度試してみます。</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ echo 'Yeah!!' &gt; s3/target.txt\n$ ansible-playbook playbook.yml --extra-vars 'bucket_name=your-bucket-name'\n\n...\n\nTASK [copy file to s3] *********************************************************************************************************************************************************************************\nok: [localhost]\n\n...\n</pre>\n\n\n<p>すると、今度は変更は無かったとのレポートが出力されました。実際にS3側を確認してみても、アップロードはされていません:</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n$ aws s3 cp s3://your-bucket-name/target.txt -\nTest!!\n</pre>\n\n\n<p>念の為内容を&nbsp;<code>Yeah!!!</code>&nbsp;とし、1バイト増やしてみるとアップロードは行われます。（結果割愛）</p>\n\n\n\n<p>どうやらファイルサイズが同等だと、中身が違ってもアップロードされないみたいです。</p>\n\n\n\n<p>しかし、設定ファイル等ですと、微調整した際でもファイルサイズが同じという事はよくある話ですし、そもそもドキュメントには最終更新日時が新しければアップロードすると書いてあるので、実装側に問題がありそうです。</p>\n\n\n\n<h2 id=\"実装を見てみた\"><a href=\"https://hackmd.io/sTRDxoErQnqwEsrT5au6gQ?view#%E5%AE%9F%E8%A3%85%E3%82%92%E8%A6%8B%E3%81%A6%E3%81%BF%E3%81%9F\"></a>実装を見てみた</h2>\n\n\n\n<p>当該のコード（執筆時点でデフォルトブランチ&nbsp;<code>devel</code>&nbsp;の内容）は以下となります。</p>\n\n\n\n<p><a href=\"https://github.com/ansible/ansible/blob/50d56ca89de26317c41c4fb1a777fd7ccdc025a2/lib/ansible/modules/cloud/amazon/s3_sync.py#L439-L440\">https://github.com/ansible/ansible/blob/50d56ca89de26317c41c4fb1a777fd7ccdc025a2/lib/ansible/modules/cloud/amazon/s3_sync.py#L439-L440</a></p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nif local_modified_epoch &lt;= remote_modified_epoch or local_size == remote_size:\n    entry['skip_flag'] = True\n</pre>\n\n\n<p>「S3側の最終更新日時がローカル側より最新以上、または双方のファイルサイズが同等の場合、<strong>スキップ</strong>」となっており、明らかにバグです。</p>\n\n\n\n<p>仮に&nbsp;<code>entry['skip_flag']</code>&nbsp;がデフォルトで&nbsp;<code>False</code>&nbsp;なのだとしたら、ドキュメントが主張する動作をするには</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nif local_modified_epoch &lt;= remote_modified_epoch and local_size == remote_size:\n    entry['skip_flag'] = True\n</pre>\n\n\n<p>にするか、</p>\n\n\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nentry['skip_flag'] = not (local_size != remote_size or local_modified_epoch &gt; remote_modified_epoch)\n</pre>\n\n\n<p>とするのが良いと思います。求める動作の条件として&nbsp;<code>or</code>&nbsp;が使われているのでそれにつられて実装でも使ってしまった為、起きてしまった物と思われます。（正しくは&nbsp;<code>and</code>）</p>\n\n\n\n<p>※蛇足ですが、論理値の変数命名がネガティブな場合この手のバグが混入しやすいです。</p>\n\n\n\n<h2 id=\"対処法\"><a href=\"https://hackmd.io/sTRDxoErQnqwEsrT5au6gQ?view#%E5%AF%BE%E5%87%A6%E6%96%B9%E6%B3%95\"></a>対処法</h2>\n\n\n\n<p>冒頭でお見せしたIssueが解決すれば良いですが、別の方法もあります。<br>それは、&nbsp;<code>file_change_strategy: checksum</code>&nbsp;を使う事です。<br>このロジックでは、ローカル側とS3側の対象ファイルのチェックサムを md5 で検証する事によって同一性を確認すると言う物で、幸いな事に現在はバグが無いので正しく動作します（動作確認の結果は割愛）</p>\n\n\n\n<p>気になるパフォーマンスの点ですが、実際の検証にあたってS3側については、オブジェクトのETagの値が使われます。ご存知の方も多いと思いますが、<a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonResponseHeaders.html\">S3のオブジェクトのETagはコンテンツの md5 が根拠となっており、</a>アップロード時に確定する物となっています。従って、S3側へはHeadリクエストを送るだけで済みます。（ファイルサイズが必要な&nbsp;<code>date_size</code>&nbsp;と同様）<br>そこまで巨大なファイルをAnsibleのs3_syncで管理する事はあまり無いと思うので、ローカル側のオーバーヘッドも気にするレベルでは無いはずです。</p>\n\n\n\n<p>と言う事で、バグが修正されるまでは&nbsp;<code>checksum</code>&nbsp;を使いましょう。</p>\n\n\n\n<h2 id=\"まとめ\"><a href=\"https://hackmd.io/sTRDxoErQnqwEsrT5au6gQ?view#%E3%81%BE%E3%81%A8%E3%82%81\"></a>まとめ</h2>\n\n\n\n<ul><li><code>file_change_strategy: date_size</code> は2019年3月22日時点ではバグっていてファイルサイズが同じだと、内容が異なっていても更新されない</li><li>代替策として <code>checksum</code> ストラテジが有効</li><li>論理値を表す変数はネガティブな名称は付けないほうが良い</li></ul>\n\n\n\n<h2 id=\"余談\"><a href=\"https://hackmd.io/sTRDxoErQnqwEsrT5au6gQ?view#%E4%BD%99%E8%AB%87\"></a>余談</h2>\n\n\n\n<p>バグ報告は4日以上も前にしているのに音沙汰がないってやばくないですか・・・。著名なOSSとかだと例えマイナーな機能かつ、報告内容がバグじゃなくても割とすぐ何かしらの返事が来るけど・・・と言う愚痴😇</p>\n","dateObject":"2019-03-22T09:00:27.000Z","date":"March 22, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Ansible","slug":"ansible"},{"name":"Bug","slug":"bug"},{"name":"S3","slug":"s3"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/ansible-wide.png"},"wordpress_id":714}},"pageContext":{"id":"9706fb67-938b-5763-b59a-b74d49f673c1","nextPath":"/2019/03/10/build-infrastructures-with-terraform/","nextTitle":"Build Infrastructures with Terraform","prevPath":"/2019/03/29/a-bug-in-ansible-s3-sync-module-and-workaround/","prevTitle":"Bug in the Ansible&#8217;s s3_sync module `file_change_strategy` not working and workaround for it"}}}