{"componentChunkName":"component---src-templates-post-js","path":"/2019/03/08/laravelのテンプレートでのinclude-yield-sectionの違い/","result":{"data":{"wordpressPost":{"id":"e4babab7-cea8-57c1-acca-d4c5192aadcc","title":"Laravelのテンプレートbladeでの@include @yield @sectionの違い","excerpt":"<p>はじめに Laravelのテンプレートエンジンbladeを使ってレイアウトを作成するときに出てくる@yield, @section, @includeといったものの違いがイマイチ理解できなかったので、それぞれどのような場 [&hellip;]</p>\n","slug":"laravel%e3%81%ae%e3%83%86%e3%83%b3%e3%83%97%e3%83%ac%e3%83%bc%e3%83%88%e3%81%a7%e3%81%aeinclude-yield-section%e3%81%ae%e9%81%95%e3%81%84","content":"\n<h2><strong>はじめに</strong></h2>\n\n\n\n<p> Laravelのテンプレートエンジンbladeを使ってレイアウトを作成するときに出てくる@yield, @section, @includeといったものの違いがイマイチ理解できなかったので、それぞれどのような場合に対して使うのが適切なのか調べてまとめてみました。</p>\n\n\n\n<p>この記事では、よく使われるパターンである親テンプレート（レイアウトview）＋子テンプレート（コンテンツview）を使う際の@yield, @section, @includeの違いについて詳しく見ていきます。</p>\n\n\n\n<p>Laravelの公式ドキュメントでは@yield+@sectionと@includeで分けて取り扱っていて個人的にわかりやすかったので、ここでも@yield+@section👉@includeという流れで分けて説明しています。<br><br><a href=\"https://laravel.com/docs/5.8/blade\">https://laravel.com/docs/5.8/blade</a></p>\n\n\n\n<h2><strong>親テンプレートにおける@yieldと@sectionの違いについて</strong></h2>\n\n\n\n<p>親テンプレート（レイアウト）ではまずは@yieldと@sectionの二種類の違いを抑えましょう。@includeに関しては一旦置いておいて、後で説明します。</p>\n\n\n\n<h3>親テンプレート（レイアウトview）</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Stored in resources/views/layouts/app.blade.php -->\n\n&lt;html>\n    &lt;head>\n        &lt;title>アプリ名 - @yield('title')&lt;/title>\n    &lt;/head>\n    &lt;body>\n        @section('sidebar')\n            &lt;p>メインのサイドバー（共通部分）&lt;/p>\n        @show\n\n        &lt;div class=\"container\">\n            @yield('content')\n        &lt;/div>\n\n        &lt;footer class=\"footer\">\n            &lt;p>フッター（共通部分）&lt;/p>\n        &lt;/footer>\n    &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h4>親テンプレートでの@yield</h4>\n\n\n\n<p>共通化せずにコンテンツview毎にダイナミックに変化するものやページ毎に設定するようなものは@yieldを使います。（それぞれのページのタイトル、メインコンテンツなど・・）</p>\n\n\n\n<p>yieldという言葉の意味が日本語で捉えづらいのでいつも混乱していたのですが、「生む」という意味で考えると、常にそれぞれのページで生み出すコンテンツに使うと覚えて個人的にはスッキリさせることができました。</p>\n\n\n\n<p>@yieldは継承ができないので、常に子テンプレートでテンプレート毎の内容を記述していくことになります。</p>\n\n\n\n<h4>親テンプレートでの@section</h4>\n\n\n\n<p>一方、@sectionは継承ができます。親テンプレート（レイアウトview）に記述した内容を子テンプレート（コンテンツview）で使うことができるというのが@yieldとの大きな違いです。なので、親テンプレート（レイアウトview）における@sectionは、共通化してかつ個別の部分を追加していくようなものには@sectionを使います。（サイドバー、フッターなど・・※このサンプルではフッターは仮に全ページ共通のものとしています。）</p>\n\n\n\n<p>親テンプレートでの@sectionは@showで閉じます。子テンプレートで個別の部分を追加するときは、@showの部分に個別の部分が追加されていくることになります。</p>\n\n\n\n<h3>子テンプレート（コンテンツview）</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Stored in resources/views/home.blade.php -->\n\n@extends('layouts.app')\n\n@section('title', 'メインコンテンツのタイトル')\n\n@section('sidebar')\n    @parent\n\n    &lt;p>メインのサイドバー（共通部分）に追加される個別の部分&lt;/p>\n@endsection\n\n@section('content')\n    &lt;p>メインコンテンツ&lt;/p>\n@endsection</code></pre>\n\n\n\n<p>子テンプレートでは、まず@extendsで親テンプレートを読み込みます。そして、@section〜@endsectionを使って親テンプレートにおいて@yieldや@section〜@showで示した部分に子テンプレートの内容を記述していきます。</p>\n\n\n\n<p>親テンプレートで@section〜@showで示した部分に対しては、子テンプレートで@parentを使って親テンプレートの内容を継承しつつ、個別の内容を追加することができます。</p>\n\n\n\n<h2><strong>@includeの使い方</strong></h2>\n\n\n\n<p>それではここまでの内容を押さえた上で@includeを使い方を確認します。</p>\n\n\n\n<p>@includeを使うことで、外部のテンプレートを取り込むことができ、レイアウトの記述をすっきりとさせることができます。以下のサンプルコードでは、サイドバーとフッターを別テンプレートとして分離し、親テンプレートでは@includeを使って読み込んでいます。</p>\n\n\n\n<p>すでに扱ったサイドバーにおける@sectionで定義している部分も@includeを使って同様に外部のテンプレートファイルに分離することができます。ここではincというディレクトリを新たに作成してそこにsidebar-file.blade.phpとfooter-file.blade.phpというテンプレートを新たに作成したうえで、それぞれのファイルにサイドバーとフッターの内容を記述しています。</p>\n\n\n\n<p>※@sectionで定義した&#8217;sidebar&#8217;と&#8217;footer&#8217;というセクション名と混合しないように、このサンプルでは説明のためにsidebar-fileとfooter-fileという名前に仮にそれぞれしています。</p>\n\n\n\n<h3>親テンプレート（レイアウトview）</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Stored in resources/views/layouts/app.blade.php -->\n\n&lt;html>\n    &lt;head>\n        &lt;title>アプリ名 - @yield('title')&lt;/title>\n    &lt;/head>\n    &lt;body>\n        @include('inc.sidebar-file')\n\n        &lt;div class=\"container\">\n            @yield('content')\n        &lt;/div>\n\n        @include('inc.footer-file')\n    &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>親テンプレートでは@include(&#8216;ファイル名&#8217;)とすることで外部テンプレートの内容を取り込んでいます。以下のような形で外部テンプレートに変数を渡すこともできます。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@include('ファイル名', ['some' => 'data'])</code></pre>\n\n\n\n<h3>サイドバー</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Stored in resources/views/layouts/inc/sidebar-file.blade.php -->\n\n@section('sidebar')\n    &lt;p>メインのサイドバー（共通部分）&lt;/p>\n@show</code></pre>\n\n\n\n<p>サイドバーの内容は@sectionで定義しておくことで、@includeしないときと同様に子テンプレートにおいて親テンプレートの内容を継承した上で個別に追加することができます。</p>\n\n\n\n<h3>フッター</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Stored in resources/views/layouts/inc/footer-file.blade.php -->\n\n&lt;footer class=\"footer\">\n    &lt;p>フッター（共通部分）&lt;/p>\n&lt;/footer></code></pre>\n\n\n\n<p>このサンプルではフッターは仮に共通のものとして、そのまま記述しています。</p>\n\n\n\n<p>もし個別の内容を追加したい場合などはサイドバー同様に@sectionを使うことで子テンプレートでこのフッターの内容を継承した上で内容を追加することが可能です。</p>\n\n\n\n<h3>子テンプレート（コンテンツview）</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Stored in resources/views/home.blade.php -->\n\n@extends('layouts.app')\n\n@section('title', 'メインコンテンツのタイトル')\n\n@section('sidebar')\n    @parent\n\n    &lt;p>メインのサイドバー（共通部分）に追加される個別の部分&lt;/p>\n@endsection\n\n@section('content')\n    &lt;p>メインコンテンツ&lt;/p>\n@endsection</code></pre>\n\n\n\n<p>子テンプレートでは親テンプレートで@includeを使っていても、記述方法は変わりません。親テンプレートにincludeされた部分も親テンプレートに記述されているものと同様に扱うことができます。</p>\n\n\n\n<h2><strong>まとめ</strong></h2>\n\n\n\n<p>レイアウトで使われている@yieldと@sectionと@includeについてはじめは違いがはっきりせずに混乱していたのですが、公式ドキュメントの説明の通りに@yieldと@sectionと@includeを分けて考えたことで個人的にすっきりと整理することができましたので、皆さんの参考になれば幸いです。<br><br><a href=\"https://laravel.com/docs/5.8/blade\">https://laravel.com/docs/5.8/blade</a></p>\n","dateObject":"2019-03-08T07:00:50.000Z","date":"March 08, 2019","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"laravel","slug":"laravel"}],"author":{"name":"Konno","slug":"konno"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/triplets.png?fit=1024%2C652&ssl=1","height":652,"width":1024},"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/triplets.png?fit=768%2C489&ssl=1","height":489,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2019/03/triplets.png"},"wordpress_id":684}},"pageContext":{"id":"e4babab7-cea8-57c1-acca-d4c5192aadcc","nextPath":"/2019/03/07/process-s3-file-using-stream/","nextTitle":"AWS CLIで標準入出力でS3オブジェクトを操作する方法","prevPath":"/2019/03/10/build-infrastructures-with-terraform/","prevTitle":"Build Infrastructures with Terraform"}}}