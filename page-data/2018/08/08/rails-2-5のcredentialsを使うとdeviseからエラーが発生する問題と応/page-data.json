{"componentChunkName":"component---src-templates-post-js","path":"/2018/08/08/rails-2-5のcredentialsを使うとdeviseからエラーが発生する問題と応/","result":{"data":{"wordpressPost":{"id":"b1eac335-38de-5d5b-ab3b-fb930cc19ea5","title":"Rails 5.2のcredentialsを使うとDeviseからエラーが発生する問題と応急処置","excerpt":"<p>※この問題はDevise 4.4.3以下で起きます。次期バージョンである4.5.0では修正されました。 発生した問題 とあるプロジェクトをRails 5.2で作っているのですが、Deviseを導入していくつかの設定を行っ [&hellip;]</p>\n","slug":"rails-2-5%e3%81%aecredentials%e3%82%92%e4%bd%bf%e3%81%86%e3%81%a8devise%e3%81%8b%e3%82%89%e3%82%a8%e3%83%a9%e3%83%bc%e3%81%8c%e7%99%ba%e7%94%9f%e3%81%99%e3%82%8b%e5%95%8f%e9%a1%8c%e3%81%a8%e5%bf%9c","content":"<p class=\"part\" data-startline=\"3\" data-endline=\"3\">※この問題はDevise 4.4.3以下で起きます。次期バージョンである4.5.0では修正されました。</p>\n<h2 id=\"発生した問題\" class=\"part\" data-startline=\"5\" data-endline=\"5\">発生した問題</h2>\n<p class=\"part\" data-startline=\"7\" data-endline=\"7\">とあるプロジェクトをRails 5.2で作っているのですが、Deviseを導入していくつかの設定を行った所、次のようなエラーが出てくるようになりました:</p>\n<pre class=\"part\" data-startline=\"9\" data-endline=\"19\"><code>$ rails c\n/usr/local/bundle/gems/devise-4.4.3/lib/devise/rails/routes.rb:500:in `raise_no_secret_key': Devise.secret_key was not set. Please add the following to your Devise initializer:\n\n  config.secret_key = '1e2903bbf3c5f9b45b398332c421ab572c5e272253100d2603ad038b33fb3b1203e049c4b088a6b19434fe6018a37235f7bf528c453ba957cdb62a4b7374e912'\n\nPlease ensure you restarted your application after installing Devise or setting the key.\n (RuntimeError)\n    from /usr/local/bundle/gems/devise-4.4.3/lib/devise/rails/routes.rb:228:in `devise_for'\n    from /app/config/routes.rb:4:in `block in &lt;main&gt;'\n</code></pre>\n<p class=\"part\" data-startline=\"21\" data-endline=\"23\">Deviseではパスワードリセット等で使用するランダムなトークンの生成に、config/initialzers/devise.rbで設定した <code>config.secret_key</code> の値を使用します。<br />\nデフォルトではこの設定は未指定の場合、Railsのsecret_key_baseが使われる為コメントアウトされています。任意の値を設定したい時にコメントアウトして使う物なので、通常は設定する必要がありません。<br />\nでは、何故このようなエラーが発生したのでしょうか。</p>\n<h2 id=\"Rails-25で新しく導入されたcredentials\" class=\"part\" data-startline=\"25\" data-endline=\"25\">Rails 5.2で新しく導入されたcredentials</h2>\n<p class=\"part\" data-startline=\"27\" data-endline=\"27\">Railsでは5.2から秘匿情報の扱いが変わりました。具体的には <code>config/secrets.yml</code> を廃止し、代わりに <code>config/credentials.yml.enc</code> が追加されました。secret_key_baseもこのファイルに保存します。（credentials.yml.encについては<a href=\"https://qiita.com/NaokiIshimura/items/2a179f2ab910992c4d39\" target=\"_blank\" rel=\"noopener\">こちらのQiita</a>が詳しいです）</p>\n<p class=\"part\" data-startline=\"29\" data-endline=\"30\">さて、このcredentials.yml.encですが、中身はファイル名の通り暗号化されており、同じく新規に追加された <code>config/master.key</code> あるいは <code>ENV[\"RAILS_MASTER_KEY\"]</code> （以下、複合キー） によって実行時に複合されます。<br />\nまた、当然、credentials.yml.encには秘匿情報が格納されている為、master.keyはGitによるバージョン管理はされません。</p>\n<p class=\"part\" data-startline=\"32\" data-endline=\"35\">そうなると、他の開発メンバーが加わった際は複合キーを共有する必要があります。しかし、開発メンバーのロールによってはこれらを共有する事ができないケースも考えられます。<br />\nでは、複合キーがない状態でRailsを走らせるとどうなるのでしょうか？実際に試してみると、普通に動かす事ができます。<br />\ncredentialsはsecretsとは違い、環境ごとに値を分ける事はできません。そもそも、秘匿情報の管理自体が本番環境でのみ必要となるので、環境ごとに分ける必要が無いと言うスタンスのようです。<br />\nこの為、開発環境では（複合キーがない場合は）単に <code>Rails::Application.credentials</code> の中身が空になるだけで、エラーにはなりません。</p>\n<p class=\"part\" data-startline=\"37\" data-endline=\"40\">さて、本番でしか使われない事がわかったcredentialsですが、それではsecret_key_baseはどうなってしまうのでしょうか？<br />\n答えは単純で、開発環境ではsecret_key_baseはプロジェクト毎に固定の値が使われるようになっています。<br />\n新しく追加された <code>Rails::Application.secret_key_base</code> によって取得が可能で、Applicationクラスの<a href=\"https://github.com/rails/rails/blob/a6e86dd2a86a89b7775e27a2f0e728cb6afd1513/railties/lib/rails/application.rb#L426\" target=\"_blank\" rel=\"noopener\">クラス名のmd5値</a>が使われます。Applicationクラス名が “MyBlog::Application” なら、 <code>fed42568a7c9da7d8f43ec1cd7e60b57</code> と言った具合です。<br />\n確かに、これであれば複合の必要自体がなくなります。また、開発環境のsecret_key_baseなんて漏れてもダメージはないのでこれで問題ありませんね。</p>\n<h2 id=\"Deviseでのsecret_key_baseの取扱\" class=\"part\" data-startline=\"42\" data-endline=\"42\">Deviseでのsecret_key_baseの取扱</h2>\n<p class=\"part\" data-startline=\"44\" data-endline=\"45\">話を冒頭に戻します。Deviseはデフォルトではsecret_key_baseの値を参照しますが、実装はどのようになっているのでしょうか？Devise（<br />\n執筆時点で最新の4.4.3の）のソースを見ると、 <code>Devise::SecretKeyFinder</code> がその役を担っており、実装は次のようになっています:</p>\n<pre class=\"part\" data-startline=\"47\" data-endline=\"57\"><code class=\"ruby hljs\"><span class=\"hljs-comment\"># https://github.com/plataformatec/devise/blob/v4.4.3/lib/devise/secret_key_finder.rb#L10-L15</span>\n \n<span class=\"hljs-keyword\">if</span> @application.respond_to?(<span class=\"hljs-symbol\">:credentials</span>) &amp;&amp; key_exists?(@application.credentials)\n  @application.credentials.secret_key_base\n<span class=\"hljs-keyword\">elsif</span> @application.respond_to?(<span class=\"hljs-symbol\">:secrets</span>) &amp;&amp; key_exists?(@application.secrets)\n  @application.secrets.secret_key_base\n<span class=\"hljs-keyword\">elsif</span> @application.config.respond_to?(<span class=\"hljs-symbol\">:secret_key_base</span>) &amp;&amp; key_exists?(@application.config)\n  @application.config.secret_key_base\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p class=\"part\" data-startline=\"59\" data-endline=\"60\"><code>@application.credentials</code> から <code>@application.secrets</code> 、<code>@application.config</code> と順番にsecret_key_baseのキーを検証し、最初に見つかったものを使うようになっている様です。しかし、先述したとおり、credentialsは開発環境では使いませんし、secretsも廃止済みなのでいずれも値は何もセットされません。<br />\nまた、configには普通は <code>secret_key_base</code> は格納しないと思うので、ここにも値は存在しません。</p>\n<p class=\"part\" data-startline=\"62\" data-endline=\"62\">本来であれば、全環境でsecret_key_baseを参照する場合、先述した <code>Rails::Application.secret_key_base</code> を使うべきなのですが、ご覧の通り実装のミスがあるようです。（このSecretKeyFinder自体4.4.3で追加された物であり、5.2で十分なテストをしていなかったのかもしれませんね）</p>\n<p class=\"part\" data-startline=\"64\" data-endline=\"64\">ただこの点については、既に<a href=\"https://github.com/plataformatec/devise/pull/4869\" target=\"_blank\" rel=\"noopener\">PR</a>があり、マージもされています。<a href=\"https://github.com/plataformatec/devise/pull/4869#issuecomment-411059289\" target=\"_blank\" rel=\"noopener\">PRのコメント</a>によれば、雰囲気的には次のバージョン4.4.4 (or 4.5.0) で解消されそうです。</p>\n<h2 id=\"444が出るまでの応急処置\" class=\"part\" data-startline=\"66\" data-endline=\"66\">次期バージョンが出るまでの応急処置</h2>\n<p class=\"part\" data-startline=\"68\" data-endline=\"68\">最初に書いた様にDeviseのsecret_keyには任意の値をセットできるので、config/initialzers/devise.rbで <code>Rails.application.secret_key_base</code> を明示的にセットしてあげれば良さそうです。</p>\n<pre class=\"part\" data-startline=\"70\" data-endline=\"81\"><code class=\"ruby hljs\">Devise.setup <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|config|</span>\n  <span class=\"hljs-comment\"># The secret key used by Devise. Devise uses this key to generate</span>\n  <span class=\"hljs-comment\"># random tokens. Changing this key will render invalid all existing</span>\n  <span class=\"hljs-comment\"># confirmation, reset password and unlock tokens in the database.</span>\n  <span class=\"hljs-comment\"># Devise will use the `secret_key_base` as its `secret_key`</span>\n  <span class=\"hljs-comment\"># by default. You can change it below and use your own secret key.</span>\n  config.secret_key = Rails.application.secret_key_base <span class=\"hljs-comment\"># 4.4.4が出るまでの応急処置</span>\n  \n  <span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p class=\"part\" data-startline=\"83\" data-endline=\"83\">最後に、Rails consoleできちんと設定されているか確認します:</p>\n<pre class=\"part\" data-startline=\"85\" data-endline=\"91\"><code>$ rails c\nRunning via Spring preloader in process 1167\nLoading development environment (Rails 5.2.0)\nirb(main):001:0&gt; Devise.secret_key\n=&gt; \"fed42568a7c9da7d8f43ec1cd7e60b57\"</code></pre>\n","dateObject":"2018-08-08T06:59:19.000Z","date":"August 08, 2018","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Devise","slug":"devise"},{"name":"Ruby on Rails","slug":"ruby-on-rails"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/08/devise-logo.png"},"wordpress_id":354}},"pageContext":{"id":"b1eac335-38de-5d5b-ab3b-fb930cc19ea5","nextPath":"/2018/07/25/article-1how-to-manage-aws-lambda-functions-with-serverless-framework/","nextTitle":"Article 1:How to manage AWS Lambda Functions with Serverless Framework","prevPath":"/2018/08/17/article-2-how-to-manage-aws-lambda-functions-with-serverless-framework/","prevTitle":"Article 2: How to manage AWS Lambda Functions with Serverless Framework"}}}