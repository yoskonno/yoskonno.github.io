{"componentChunkName":"component---src-templates-post-js","path":"/2018/08/17/article-2-how-to-manage-aws-lambda-functions-with-serverless-framework/","result":{"data":{"wordpressPost":{"id":"9f2abbb1-b92c-5ef6-b8e9-96f079ad49b2","title":"Article 2: How to manage AWS Lambda Functions with Serverless Framework","excerpt":"<p>Topics With the instruction in Article 1, maybe you could define how to create AWS Lambda function and trigger [&hellip;]</p>\n","slug":"article-2-how-to-manage-aws-lambda-functions-with-serverless-framework","content":"<h1>Topics</h1>\n<p><a href=\"https://stg-engineering-wp.mobalab.net/en/article-1-how-to-manage-aws-lambda-functions-with-serverless-framework/\">With the instruction in Article 1</a>, maybe you could define how to create AWS Lambda function and trigger event with using Serverless Framework.</p>\n<p>I will explain the following topics in more detail. These topics were not introduced in Article 1.</p>\n<ul>\n<li>Variables in serverless.yml</li>\n<li>External file</li>\n<li>stage</li>\n<li>serverless-external-s3-event plugin</li>\n<li>Tips and other etc.</li>\n</ul>\n<p><!--more--></p>\n<h1>Variables in serverless.yml</h1>\n<p>As you can use variables in Serverless.yml, you can write it in a simple and flexible way.</p>\n<p>For the details, please refer to the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/variables/\" target=\"_blank\" rel=\"noopener\">document</a>. I will explain the points that are difficult and are not written in the document.</p>\n<h2>Types of Variables</h2>\n<p>There are some types of variables which you can use in serveless.yml. Let’s take a look at them one by one.</p>\n<h3>Variables defined in serverless.yml</h3>\n<p>If you need to define the values that will be used many times in Serverless.yml, I recommend that you to define the values as the variables for easier modification in the future.<br />\nIf you want to define the variable, define them within the &#8216;custom&#8217; key section.</p>\n<pre><code>custom:\nbucket:\nmodule1: mycompany-module1\nmodule2: mycompany-module2\n</code></pre>\n<p>To use the defined value, you use the self-keyword as below.</p>\n<pre><code>${self:custom.bucket.module1}\n</code></pre>\n<h3>Environment Variable</h3>\n<p>You can refer to environment variables of the shell where &#8216;sls&#8217; (or &#8216;serverless&#8217;) command is executing as below.</p>\n<pre><code>${env:SOME_ENV}\n</code></pre>\n<h3>Command line arguments</h3>\n<p>You can also refer to the Command Line Arguments of &#8216;sls&#8217; command. The main usage of this will be when you switch the stage to development, production or staging.<br />\nThe Arguments that you can pass to the AWS Lambda Functions is written in below. (only for AWS)</p>\n<p><a href=\"https://serverless.com/framework/docs/providers/aws/cli-reference/deploy/\">Serverless Framework Commands &#8211; AWS Lambda &#8211; Deploy</a></p>\n<p>If it is stage arguments, an example is shown below.</p>\n<pre><code>${opt:stage}\n</code></pre>\n<h2>The default value for an undefined variable</h2>\n<p>If the variable is undefined, you may want to use the default value. In such case, please refer below.（from document:arguments/medication.）</p>\n<pre><code>custom:\nmyRegion: ${opt:region, 'us-west-1'}\n</code></pre>\n<h1>External file</h1>\n<h2>How to include an external file</h2>\n<p>You can read external files, YAML, from serverless.yml.<br />\nIf you want to define the same functions/name etc in serverless.yml many times, you can define them in the external YAML file. By reading the external file, you can refer to them in serverless.yml.</p>\n<p>Let’s say an external YAML file is like below.</p>\n<pre><code>foo:\n- foo1\n- foo2\nbar: something\n</code></pre>\n<p>There are a few ways to read the external file. Please refer below.</p>\n<pre><code># To refer to all of an external file\n${file(./external_file.yml)}\n# To refer to part of an external file\n${file(./external_file.yml):foo}\n</code></pre>\n<h2>External file and variables</h2>\n<p>The external file is readable and referable as well as serverless.yml. However, the variables which are defined in the external file don’t seem to be referable.</p>\n<p>Let’s say if there is a file like below.</p>\n<pre><code># serverless.yml\ncustom:\nfoo_in_parent: something\nfunctions:\nhandler: handler.foo\nname: foo_func\nevents: ${file(./events.yml)}\n</code></pre>\n<p>Here, events.yml will be read but it seems the values defined in serverless.yml is not readable.</p>\n<pre><code># events.yml\n- cloudwatchEvent:\nevent:\nsource: ${self:custom.foo_in_parent} # Not good.\n</code></pre>\n<h1>Stage</h1>\n<p>Serverless allows you to switch the environments such as production and staging.<br />\nIn this case, you need to design beforehand.</p>\n<h2>Method by recommend documents</h2>\n<p><a href=\"https://serverless.com/framework/docs/providers/aws/guide/workflow/\">Official documentation</a> says like below.</p>\n<ul>\n<li>At the very least, use a dev and production stage.</li>\n<li>Use different AWS accounts for stages.</li>\n<li>In larger teams, each member should use a separate AWS account and their own stage for development.</li>\n</ul>\n<p>I totally agree with the first one, but the second one can be a problem.</p>\n<p>The official documentation recommends to use different AWS account for dev and production and define the Lambda functions of the same name for both of them. However, you don&#8217;t want a different account if the project is small. I will explain more about this case later.</p>\n<p>If you use a different AWS account, it will not be so difficult. You can just use a profile which name is as same as the stage one as below.</p>\n<pre><code>provider:\nstage: ${opt:stage, 'dev'}\nprofile: ${self:provider.stage}\n</code></pre>\n<p>Please refer below in case if the stage name is different from the profile one:</p>\n<pre><code>custom:\nprofiles:\ndev: awsProfileForDev\nproduction: awsProfileForProduction\nprovider:\nstage: ${opt:stage, 'dev'}\nprofile: ${self:custom.profiles.${self:provider.stage}}\n</code></pre>\n<h2>To use one account</h2>\n<p>It is not recommended to use one AWS account for dev and production. But if you still want to use one account, I would like to explain tips for this.</p>\n<pre><code># serverless.yml\n# You have to define the necessary resources which are separate use for dev and production in the custom section.\ncustom:\nbucket:\ndev: example-bucket-dev\npro: example-bucket\n\nprovider:\n# Serverless create CloudFormation stack and it includes the stage name.、\n# So I suggest using the name that is clearly not for dev or production such as 'default' and common etc.\n\nfunctions:\n# Use dev_ prefix for function.\n# I will explain about other method later.\ndev_foo_func:\nhandler: handler.dev_foo_func\nname: dev_foo_func\nevents:\n# I will explain about existingS3 later. \n- existingS3:\nbucket: ${self:custom.bucket.dev}\n# I suggest to use external file for the common use in dev and production.\n# I skip explanation of s3_event_foo.yml\nevents: ${file(./yaml/s3_event_foo.yml):events}\nrules: ${file(./yaml/s3_event_foo.yml):rules}\npro_foo_func:\nhandler: handler.pro_foo_func\nname: dev_foo_func\nevents:\n- existingS3:\nbucket: ${self:custom.bucket.pro}\nevents: ${file(./yaml/s3_event_foo.yml):events}\nrules: ${file(./yaml/s3_event_foo.yml):rules}\n</code></pre>\n<p>For handler.py, you can set as below. For other languages, please apply the suitable name.</p>\n<pre><code>def dev_foo_func(event, context):\nfoo_func('dev', event, context)\n\ndef pro_foo_func(event, context):\nfoo_func('pro', event, context)\n\ndef foo_func(stage, event, context):\n# いろいろな処理\n</code></pre>\n<p>It is not considered a good idea to use prefix, dev_ and pro_, to define many functions.</p>\n<pre><code># various process\nfunctions:\n# Define one function.\nfoo_func:\n# Execute the entity with the stage options  to define many functions.\nhandler: handler.${self:provider.stage}_foo_func\nname: ${self:provider.stage}_foo_func\nevents:\n# I skip here.\n</code></pre>\n<p>As a result, this didn’t work.<br />\nIt is because a few plugins expect the entry key (foo_func) and the name in the name section (dev_foo_func or pro_foo_func) to be the same.<br />\n(A plugin, serverless-external-s3-event, I will explain one of them later.)</p>\n<h1>serverless-external-s3-event plugin</h1>\n<h2>How to enable the existing S3 bucket</h2>\n<p>Because of Serverless specification at this point, if you specify S3 in &#8216;events&#8217;, the bucket will be created with the name you specified. And if the same name bucket exists, an error will be returned.  (refer to  the document below for the details.)</p>\n<p><a href=\"https://serverless.com/framework/docs/providers/aws/events/s3/\">Serverless Framework &#8211; AWS Lambda Events &#8211; S3</a></p>\n<p>It will not cause any problems if you can manage all the infrastructures by yourself.<br />\nIn the actual case, you may want to set new Lambda function events for the existing system or S3 buckets and other infrastructures.<br />\nAs I mentioned already, Serverless cannot manage such a case at this point. Please refer to the issues below.<br />\nThere is a workaround for this issue.</p>\n<ul>\n<li><a href=\"https://github.com/serverless/serverless/issues/2154\">Can&#8217;t subscribe to events of existing S3 bucket · Issue #2154 · serverless/serverless</a></li>\n<li><a href=\"https://github.com/serverless/serverless/issues/4241\">Introduce a functionality which attach events to an existing resource · Issue #4241 · serverless/serverless</a></li>\n</ul>\n<p>There is a plugin, <a href=\"https://github.com/matt-filion/serverless-external-s3-event\">serverless-external-s3-event</a>, to handle this situation which is commented about in the first issue.</p>\n<h2>Install and set up</h2>\n<p>For installation, you have to use npm.<br />\nAs it is written below and in the document, it is better to run without -g, then commit package.json.</p>\n<pre><code>npm install serverless-external-s3-event\n</code></pre>\n<p>Settings of serverless.yml are as below.</p>\n<pre><code>events:\n- existingS3:\nbucket: a-bucket-that-already-exists\nevents:\n- s3:ObjectCreated:*\nrules:\n- prefix: path/to/some/dir/\n- suffix: .csv\n</code></pre>\n<p>Please refer to the document for the details.</p>\n<h1>Conclusion</h1>\n<p>This time, I explained the parts that I could not introduce in <a href=\"https://stg-engineering-wp.mobalab.net/2017/11/18/serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%861/\">the previous post</a>.</p>\n<p>Also, I will post in another article if I come up with other tips.</p>\n","dateObject":"2018-08-17T01:55:03.000Z","date":"August 17, 2018","categories":[{"name":"English","slug":"en"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"Lambda","slug":"lambda"},{"name":"Serverless","slug":"serverless"}],"author":{"name":"renn19","slug":"renn19"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=1024%2C441&ssl=1","height":441,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=768%2C331&ssl=1","height":331,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png"},"wordpress_id":364}},"pageContext":{"id":"9f2abbb1-b92c-5ef6-b8e9-96f079ad49b2","nextPath":"/2018/08/08/rails-2-5のcredentialsを使うとdeviseからエラーが発生する問題と応/","nextTitle":"Rails 5.2のcredentialsを使うとDeviseからエラーが発生する問題と応急処置","prevPath":"/2018/09/19/truffleとローカルのネットワーク/","prevTitle":"Truffleとローカルのネットワーク"}}}