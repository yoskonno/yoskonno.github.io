{"componentChunkName":"component---src-templates-post-js","path":"/2018/06/25/experiment-with-recently-released-amazon-eks/","result":{"data":{"wordpressPost":{"id":"cbe57eb1-c8cd-58b7-aa22-ca09f040a909","title":"Amazon EKSが一般公開されたので使ってみた","excerpt":"<p>皆さんこんにちは。先日、ついにAWSのAmazon EKSが一般公開されましたね。現時点ではまだオレゴンとバージニア北部でしか使えませんが、今回は検証の為、ユーザーズガイドに沿って実際にクラスタを作成し、ゲストブックアプ [&hellip;]</p>\n","slug":"experiment-with-recently-released-amazon-eks","content":"<p class=\"part\" data-startline=\"3\" data-endline=\"4\">皆さんこんにちは。先日、ついにAWSの<a href=\"https://aws.amazon.com/jp/eks/\" target=\"_blank\" rel=\"noopener\">Amazon EKS</a>が一般公開されましたね。現時点ではまだオレゴンとバージニア北部でしか使えませんが、今回は検証の為、<a href=\"https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/getting-started.html\" target=\"_blank\" rel=\"noopener\">ユーザーズガイド</a>に沿って実際にクラスタを作成し、<a href=\"https://github.com/kubernetes/examples/tree/master/guestbook\" target=\"_blank\" rel=\"noopener\">ゲストブック</a>アプリケーションをデプロイしてみたいと思います。<br />\n尚、各種作業におけるKubernetesと、AWSの従来のリソースについての詳細説明は省略していますのでご了承下さい。</p>\n<h2 id=\"準備\" class=\"part\" data-startline=\"6\" data-endline=\"6\">準備</h2>\n<h3 id=\"AWS-CLI\" class=\"part\" data-startline=\"8\" data-endline=\"8\">AWS CLI</h3>\n<p class=\"part\" data-startline=\"10\" data-endline=\"10\">ドキュメントではマネジメントコンソールを使っていますが、今回はCLIを使っていきたいと思います。基礎的な部分なのでインストール方法は省略します。（ドキュメントは<a href=\"https://aws.amazon.com/jp/cli/\" target=\"_blank\" rel=\"noopener\">こちら</a>）</p>\n<p class=\"part\" data-startline=\"12\" data-endline=\"12\">今回使ったバージョンは次の通りです:</p>\n<pre class=\"part\" data-startline=\"14\" data-endline=\"17\"><code>$ aws --version\naws-cli/1.15.42 Python/2.7.10 Darwin/17.6.0 botocore/1.10.42</code></pre>\n<p data-startline=\"19\" data-endline=\"19\">また、今回はずっとオレゴン（us-west-2）で作業するので、環境変数をセットしておきます。</p>\n<pre class=\"part\" data-startline=\"1\" data-endline=\"3\"><code>$ export AWS_DEFAULT_REGION=us-west-2</code></pre>\n<h3 id=\"kubectl\" class=\"part\" data-startline=\"19\" data-endline=\"19\">kubectl</h3>\n<p class=\"part\" data-startline=\"21\" data-endline=\"21\">今回は、Docker for Mac (<code>18.05.0-ce-mac67</code>, Channel: edge) に同梱されている物を使いました。バージョンは次の通りです:</p>\n<pre class=\"part\" data-startline=\"23\" data-endline=\"26\"><code>$ kubectl version --short --client\nClient Version: v1.10.3\n</code></pre>\n<h3 id=\"Heptio-Authenticator\" class=\"part\" data-startline=\"28\" data-endline=\"28\">Heptio Authenticator</h3>\n<p class=\"part\" data-startline=\"30\" data-endline=\"30\">Amazon EKSでは、クラスタとの認証にIAMを使うようですが、これには<a href=\"https://github.com/heptio/aws-iam-authenticator\" target=\"_blank\" rel=\"noopener\">Heptio Authenticator</a>と言うツールが必要なのでインストールします。</p>\n<p class=\"part\" data-startline=\"32\" data-endline=\"32\"><a href=\"https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/configure-kubectl.html\" target=\"_blank\" rel=\"noopener\">ドキュメント</a>ではいくつかのインストール方法が紹介されていますが、今回はシンプルにcurlでダウンロードし、実行権限を与えた上でPATHの効いてるディレクトリに放り込む事にしました:</p>\n<pre class=\"part\" data-startline=\"34\" data-endline=\"39\"><code>$ cd /tmp\n$ curl -o heptio-authenticator-aws https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/bin/darwin/amd64/heptio-authenticator-aws\n$ chmod +x heptio-authenticator-aws\n$ mv heptio-authenticator-aws /usr/local/bin\n</code></pre>\n<p class=\"part\" data-startline=\"41\" data-endline=\"41\">実際にコマンドを叩いてみます:</p>\n<pre class=\"part\" data-startline=\"43\" data-endline=\"64\"><code>$ heptio-authenticator-aws\n\nA tool to authenticate to Kubernetes using AWS IAM credentials\nUsage:\n  heptio-authenticator-aws [command]\n\nAvailable Commands:\n  help        Help about any command\n  init        Pre-generate certificate, private key, and kubeconfig files for the server.\n  server      Run a webhook validation server suitable that validates tokens using AWS IAM\n  token       Authenticate using AWS IAM and get token for Kubernetes\n  verify      Verify a token for debugging purpose\n\nFlags:\n  -i, --cluster-id ID     Specify the cluster ID, a unique-per-cluster identifier for your heptio-authenticator-aws installation.\n  -c, --config filename   Load configuration from filename\n  -h, --help              help for heptio-authenticator-aws\n\nUse \"heptio-authenticator-aws [command] --help\" for more information about a command.\n</code></pre>\n<p class=\"part\" data-startline=\"66\" data-endline=\"66\">usageが表示されました。</p>\n<h3 id=\"IAM-Role\" class=\"part\" data-startline=\"68\" data-endline=\"68\">IAM Role</h3>\n<p class=\"part\" data-startline=\"70\" data-endline=\"71\">EKSサービスがクラスタの操作時にAWSの他のサービスを操作できるように、予めEKSサービス用のRoleを作り、 <code>AmazonEKSClusterPolicy</code> と<code>AmazonEKSServicePolicy</code> をアタッチする必要があります。</p>\n<p data-startline=\"70\" data-endline=\"71\">CLIでさくっと作っていきます:</p>\n<pre class=\"part\" data-startline=\"1\" data-endline=\"29\"><code>$ aws iam create-role --role-name eks-role --assume-role-policy-document '{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"eks.amazonaws.com\"}}]}'\n{\n    \"Role\": {\n        \"AssumeRolePolicyDocument\": {\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [\n                {\n                    \"Action\": \"sts:AssumeRole\",\n                    \"Effect\": \"Allow\",\n                    \"Principal\": {\n                        \"Service\": \"eks.amazonaws.com\"\n                    }\n                }\n            ]\n        },\n        \"RoleId\": \"AROBILD2LKDSSJCCIADME\",\n        \"CreateDate\": \"2018-06-25T07:31:28.966Z\",\n        \"RoleName\": \"eks-service-role\",\n        \"Path\": \"/\",\n        \"Arn\": \"arn:aws:iam::000000000000:role/eks-service-role\"\n    }\n}\n\n$ aws iam attach-role-policy --role-name eks-service-role --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\n\n$ aws iam attach-role-policy --role-name eks-service-role --policy-arn arn:aws:iam::aws:policy/AmazonEKSServicePolicy\n</code></pre>\n<p data-startline=\"81\" data-endline=\"81\">今回は <code>eks-service-role</code> と言う名前を付ける事にしました。尚、RoleのARNは後ほど使うので控えておきます。</p>\n<h3 id=\"VPC\" class=\"part\" data-startline=\"81\" data-endline=\"81\">VPC</h3>\n<p class=\"part\" data-startline=\"83\" data-endline=\"83\">Kubernetesクラスタを展開するVPCを用意する必要がありますが、今回は面倒なのでアカウント作成時にデフォルトで作られている物を使用する事にしました。</p>\n<h2 id=\"EC2のキーペア\" class=\"part\" data-startline=\"85\" data-endline=\"85\">EC2のキーペア</h2>\n<p class=\"part\" data-startline=\"87\" data-endline=\"87\">KubernetesのWorkerノードとして動作するEC2インスタンス用のSSHキーペアを用意する必要がありますが、今回も適当な物を使う事にしたので作成方法については割愛します。</p>\n<h2 id=\"クラスターを作る\" class=\"part\" data-startline=\"89\" data-endline=\"89\">クラスタを作る</h2>\n<p class=\"part\" data-startline=\"91\" data-endline=\"91\">次にクラスタを作っていきます。因みに、クラスタは1個につき、1時間あたりUS$0.2<a href=\"https://aws.amazon.com/jp/eks/pricing/\" target=\"_blank\" rel=\"noopener\">課金されます</a>。残念ながら、GKEと違って無料じゃないようですね。</p>\n<p class=\"part\" data-startline=\"93\" data-endline=\"93\">クラスタの作成にもCLIを使って作っていきます。使用するインターフェースは<a href=\"https://docs.aws.amazon.com/cli/latest/reference/eks/create-cluster.html\" target=\"_blank\" rel=\"noopener\">eks create-cluster</a>です。<br />\n使い方をざっくり説明すると、</p>\n<ul class=\"part\" data-startline=\"99\" data-endline=\"105\">\n<li class=\"\" data-startline=\"93\" data-endline=\"93\"><code>--name</code>, <code>--role-arn</code>, <code>--resources-vpc-config</code> オプションは必須</li>\n<li class=\"\" data-startline=\"94\" data-endline=\"94\"><code>--name</code> にはクラスタ名を指定。ユニークである必要がある</li>\n<li class=\"\" data-startline=\"95\" data-endline=\"95\"><code>--role-arn</code> には先程作ったRole（<code>eks-service-role</code>）のARNを指定</li>\n<li class=\"\" data-startline=\"96\" data-endline=\"99\"><code>--resources-vpc-config</code> にはVPCのサブネットIDと、セキュリティグループのIDを指定（複数指定可）\n<ul>\n<li class=\"\" data-startline=\"97\" data-endline=\"97\">サブネットは最低2個以上指定する必要がある</li>\n<li class=\"\" data-startline=\"98\" data-endline=\"99\">今回はデフォルトVPCのus-west-2aと2bのサブネットと、VPCのデフォルトのセキュリティグループを使用した</li>\n</ul>\n</li>\n</ul>\n<p class=\"part\" data-startline=\"106\" data-endline=\"107\">その他、<code>--kubernetes-version</code> でKubernetesのバージョンを指定したりできますが、今回は必要最低限のオプションのみで実行しました。因みに、サブネットは <code>us-west-2a</code> と <code>us-west-2b</code> の物、セキュリティグループにはVPCのデフォルトの物を指定しました。<br />\n<small>（当たり前ですが、現時点で利用できない東京リージョン等を指定するとエンドポイントが無いと怒られます）</small></p>\n<p class=\"part\" data-startline=\"109\" data-endline=\"109\">実行すると、作成したクラスタの詳細が表示されます:</p>\n<pre class=\"part\" data-startline=\"111\" data-endline=\"138\"><code>$ aws eks create-cluster \\\n  --name my-cluster \\\n  --role-arn arn:aws:iam::000000000000:role/eks-service-role \\\n  --resources-vpc-config \"subnetIds=subnet-0164f46a,subnet-057c0a4c,securityGroupIds=sg-03ebe152\"\n{\n    \"cluster\": {\n        \"status\": \"CREATING\",\n        \"name\": \"my-cluster\",\n        \"certificateAuthority\": {},\n        \"roleArn\": \"arn:aws:iam::000000000000:role/eks-service-role\",\n        \"resourcesVpcConfig\": {\n            \"subnetIds\": [\n                \"subnet-0164f46a\",\n                \"subnet-057c0a4c\"\n            ],\n            \"vpcId\": \"vpc-013a2508\",\n            \"securityGroupIds\": [\n                \"sg-03ebe152\"\n            ]\n        },\n        \"version\": \"1.10\",\n        \"arn\": \"arn:aws:eks:us-west-2:000000000000:cluster/my-cluster\",\n        \"createdAt\": 1529826773.192\n    }\n}\n</code></pre>\n<p class=\"part\" data-startline=\"140\" data-endline=\"140\">この時点で結果のJSONを見ると、<code>cluster.status</code> は “CREATING” の状態だと言う事が分かります。これが “ACTIVE” になると、クラスタが利用できるようになります。（因みに結構時間かかります。現時点でのバージョンでは、通常10分未満で完了するようです）</p>\n<p class=\"part\" data-startline=\"142\" data-endline=\"142\">また、上のJSONと同様の物が<a href=\"https://docs.aws.amazon.com/cli/latest/reference/eks/describe-cluster.html\" target=\"_blank\" rel=\"noopener\">eks describe-cluster</a>で取得可能ですので、下記を実行して “ACTIVE” になるまで待ちましょう（<code>--name</code> に取得したいクラスタ名を指定します）:</p>\n<pre class=\"part\" data-startline=\"144\" data-endline=\"147\"><code>$ aws eks describe-cluster --name my-cluster --query cluster.status\n\"ACTIVE\"\n</code></pre>\n<p class=\"part\" data-startline=\"149\" data-endline=\"149\">ACTIVEになったら、後ほど必要になるKubernetes APIのエンドポイントURLと、認証用のCA証明書を控えておきます。これらも、describe-clusterで取得可能です:</p>\n<pre class=\"part\" data-startline=\"151\" data-endline=\"157\"><code>$ aws eks describe-cluster --name my-cluster --query cluster.endpoint --output text\nhttps://5C1485ACC29FAA5A16E7E77A4491F4E8.yl4.us-west-2.eks.amazonaws.com\n\n$ aws eks describe-cluster --name my-cluster --query cluster.certificateAuthority.data --output text\n(base64 message)...\n</code></pre>\n<p class=\"part\" data-startline=\"159\" data-endline=\"159\">続いて、クラスタの設定をします。ドキュメントに記載の通り、以下のYAMLの <code>&lt;endpoint-url&gt;</code> と <code>&lt;base64-encoded-ca-cert&gt;</code> の部分を先程控えておいた値に、 <code>&lt;cluster-name&gt;</code> をクラスタ名に置き換えて、 <code>~/.kube/config-my-eks-cluster</code> に保存します。</p>\n<pre class=\"part\" data-startline=\"161\" data-endline=\"188\"><code class=\"yaml hljs\"><span class=\"hljs-section\">apiVersion: v1</span>\n<span class=\"hljs-section\">clusters:</span>\n- cluster:\n    server: &lt;endpoint-url&gt;\n    certificate-authority-data: &lt;base64-encoded-ca-cert&gt;\n  name: kubernetes\n<span class=\"hljs-section\">contexts:</span>\n- context:\n    cluster: kubernetes\n    user: aws\n  name: aws\n<span class=\"hljs-section\">current-context: aws</span>\n<span class=\"hljs-section\">kind: Config</span>\n<span class=\"hljs-section\">preferences: {}</span>\n<span class=\"hljs-section\">users:</span>\n- name: aws\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1alpha1\n      command: heptio-authenticator-aws\n      args:\n        - <span class=\"hljs-string\">\"token\"</span>\n        - <span class=\"hljs-string\">\"-i\"</span>\n        - <span class=\"hljs-string\">\"&lt;cluster-name&gt;\"</span>\n        <span class=\"hljs-comment\"># - \"-r\"</span>\n        <span class=\"hljs-comment\"># - \"&lt;role-arn&gt;\"</span>\n</code></pre>\n<p class=\"part\" data-startline=\"190\" data-endline=\"190\">その後、<code>$KUBECONFIG</code> 環境変数に上記の設定ファイルを適用しておきます:</p>\n<pre class=\"part\" data-startline=\"192\" data-endline=\"194\"><code>$ export KUBECONFIG=$KUBECONFIG:~/.kube/config-my-eks-cluster\n</code></pre>\n<p class=\"part\" data-startline=\"196\" data-endline=\"196\">ここまでできたら、 <code>kubectl</code> を使ってクラスタとやり取りが行えます。試しにServiceの状態を確認してみましょう:</p>\n<pre class=\"part\" data-startline=\"198\" data-endline=\"202\"><code>$ kubectl get svc\nNAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nkubernetes   ClusterIP   10.100.0.1   &lt;none&gt;        443/TCP   3h\n</code></pre>\n<p class=\"part\" data-startline=\"204\" data-endline=\"204\">無事にクラスタとのやり取りができました。</p>\n<h2 id=\"Workerノードを起動・登録する\" class=\"part\" data-startline=\"206\" data-endline=\"206\">Workerノードを起動・登録する</h2>\n<p class=\"part\" data-startline=\"208\" data-endline=\"208\">クラスタが無事にできたので、次にWorkerノードを登録します。WorkerノードはEC2インスタンスとなりますので、インスタンスタイプに応じた課金が行われます。</p>\n<p class=\"part\" data-startline=\"210\" data-endline=\"211\">ドキュメントでは、CloudFormationを使ってノードのオートスケーリンググループ等のリソースを作成していたので、今回はそれを使っていきます。<br />\n<a href=\"https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/amazon-eks-nodegroup.yaml\" target=\"_blank\" rel=\"noopener\">https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/amazon-eks-nodegroup.yaml</a> をテンプレートとし、それぞれ以下のパラメータを設定します:</p>\n<ul class=\"part\" data-startline=\"213\" data-endline=\"224\">\n<li class=\"\" data-startline=\"213\" data-endline=\"213\"><strong>Stack name</strong>: CloudFormationのスタック名。適当な名前 (<code>eks-my-cluster-worker-nodes</code>) を設定</li>\n<li class=\"\" data-startline=\"214\" data-endline=\"214\"><strong>Cluster name</strong>: 今回作ったEKSクラスタの名前</li>\n<li class=\"\" data-startline=\"215\" data-endline=\"215\"><strong>ClusterControlPlaneSecurityGroup</strong>: クラスタ生成時に使ったセキュリティグループのID</li>\n<li class=\"\" data-startline=\"216\" data-endline=\"216\"><strong>NodeGroupName</strong>: オートスケーリンググループ関連のリソースのNameのプレフィックスとして使われる模様。これも適当な名前 (<code>eks-my-cluster-worker</code>) を設定</li>\n<li class=\"\" data-startline=\"217\" data-endline=\"217\"><strong>NodeAutoScalingGroupMinSize</strong>: オートスケーリングの最小数</li>\n<li class=\"\" data-startline=\"218\" data-endline=\"218\"><strong>NodeAutoScalingGroupMaxSize</strong>: オートスケーリングの最大数</li>\n<li class=\"\" data-startline=\"219\" data-endline=\"219\"><strong>NodeInstanceType</strong>: EC2インスタンスのインスタンスタイプ</li>\n<li class=\"\" data-startline=\"220\" data-endline=\"220\"><strong>NodeImageId</strong>: EC2インスタンスの起動イメージ, 今回はオレゴンなので <code>ami-73a6e20b</code> (バージニア北部は <code>ami-dea4d5a1</code>)</li>\n<li class=\"\" data-startline=\"221\" data-endline=\"221\"><strong>KeyName</strong>: EC2インスタンスへSSHログインする為のキーペア名。予め準備しておいた物を使う</li>\n<li class=\"\" data-startline=\"222\" data-endline=\"222\"><strong>VpcId</strong>: クラスタ作成時に指定したサブネットが属するVPCのID</li>\n<li class=\"\" data-startline=\"223\" data-endline=\"224\"><strong>Subnets</strong>: クラスタ作成時に指定したサブネットID</li>\n</ul>\n<p class=\"part\" data-startline=\"225\" data-endline=\"225\">ここでもCLIを使います。インターフェースは<a href=\"https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html\" target=\"_blank\" rel=\"noopener\">cloudformation create-stack</a>です:</p>\n<pre class=\"part\" data-startline=\"227\" data-endline=\"248\"><code>$ aws cloudformation create-stack \\\n  --template-body https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/amazon-eks-nodegroup.yaml \\\n  --stack-name eks-my-cluster-worker-nodes \\\n  --capabilities CAPABILITY_IAM \\\n  --parameters \\\n    ParameterKey=ClusterName,ParameterValue=my-cluster \\\n    ParameterKey=ClusterControlPlaneSecurityGroup,ParameterValue=sg-03ebe152 \\\n    ParameterKey=NodeGroupName,ParameterValue=eks-my-cluster-worker \\\n    ParameterKey=NodeAutoScalingGroupMinSize,ParameterValue=1 \\\n    ParameterKey=NodeAutoScalingGroupMaxSize,ParameterValue=2 \\\n    ParameterKey=NodeInstanceType,ParameterValue=t2.small \\\n    ParameterKey=NodeImageId,ParameterValue=ami-73a6e20b \\\n    ParameterKey=KeyName,ParameterValue=issei \\\n    ParameterKey=VpcId,ParameterValue=vpc-013a2508 \\\n    ParameterKey=Subnets,ParameterValue=\\\"subnet-0164f46a,subnet-057c0a4c\\\"\n{ \"StackId\": \"arn:aws:cloudformation:us-west-2:000000000000:stack/eks-my-cluster-worker-nodes/c7e20620-7822-11e8-bfa6-50a68a0e32ba\" } </code></pre>\n<p class=\"part\" data-startline=\"250\" data-endline=\"251\">作成されたスタックの、 <code>NodeInstanceRole</code> と言う論理IDが名付けられたリソースのIAM RoleのARNが後ほど必要になるので、控えておきます。これには<a href=\"https://docs.aws.amazon.com/cli/latest/reference/cloudformation/describe-stack-resources.html\" target=\"_blank\" rel=\"noopener\">cloudformation describe-stack-resources</a>と<a href=\"https://docs.aws.amazon.com/cli/latest/reference/iam/get-role.html\" target=\"_blank\" rel=\"noopener\">iam get-role</a>インターフェースを組み合わせると取得できます（<code>--stack-name</code><br />\nスタック名、<code>--logical-resource-id</code> に論理リソースIDを指定）:</p>\n<pre class=\"part\" data-startline=\"253\" data-endline=\"256\"><code>$ aws iam get-role --role-name $(aws cloudformation describe-stack-resources --stack-name eks-my-cluster-worker-nodes --logical-resource-id NodeInstanceRole --query \"StackResources[0].PhysicalResourceId\" --output text) --query Role.Arn --output text\narn:aws:iam::000000000000:role/eks-my-cluster-worker-nodes-NodeInstanceRole-CTP7DO7ST83A\n</code></pre>\n<p class=\"part\" data-startline=\"258\" data-endline=\"258\">起動したWorkerをクラスタに追加する為には、更にAWS AuthenticatorのConfigMapを設定する必要があります。まずはテンプレートをDLします:</p>\n<pre class=\"part\" data-startline=\"260\" data-endline=\"262\"><code>$ curl -O https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/aws-auth-cm.yaml\n</code></pre>\n<p class=\"part\" data-startline=\"264\" data-endline=\"264\">エディタでこのファイルを開き、 <code>&lt;ARN of instance role (not instance profile)&gt;</code> の部分を、先程のIAM RoleのARNで置き換えます。</p>\n<pre class=\"part\" data-startline=\"266\" data-endline=\"281\"><code class=\"yaml hljs\"><span class=\"hljs-comment\"># aws-auth-cm.yaml</span>\n\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-auth\n  namespace: kube-<span class=\"hljs-keyword\">system</span>\ndata:\n  mapRoles: |\n    - rolearn: &lt;ARN of instance role (<span class=\"hljs-keyword\">not</span> instance profile)&gt;\n      username: <span class=\"hljs-keyword\">system</span>:node:{<span class=\"hljs-string\">{EC2PrivateDNSName}</span>}\n      groups:\n        - <span class=\"hljs-keyword\">system</span>:bootstrappers\n        - <span class=\"hljs-keyword\">system</span>:nodes\n</code></pre>\n<p class=\"part\" data-startline=\"283\" data-endline=\"283\">その後、ConfigMapをクラスタに適用します:</p>\n<pre class=\"part\" data-startline=\"285\" data-endline=\"288\"><code>$ kubectl apply -f aws-auth-cm.yaml\nconfigmap \"aws-auth\" created\n</code></pre>\n<p class=\"part\" data-startline=\"290\" data-endline=\"290\">しばらくすると、WorkerノードのステータスがREADYになります:</p>\n<pre class=\"part\" data-startline=\"292\" data-endline=\"297\"><code>$ kubectl get nodes\nNAME                                         STATUS    ROLES     AGE       VERSION\nip-172-31-34-76.us-west-2.compute.internal   Ready     &lt;none&gt;    1m        v1.10.3\nip-172-31-43-90.us-west-2.compute.internal   Ready     &lt;none&gt;    1m        v1.10.3\n</code></pre>\n<h2 id=\"ゲストブックアプリケーションを作成する\" class=\"part\" data-startline=\"299\" data-endline=\"299\">ゲストブックアプリケーションを作成する</h2>\n<p class=\"part\" data-startline=\"301\" data-endline=\"302\">クラスタの準備が整ったので、いよいよアプリケーションをデプロイしてみます。<br />\nここからはちょっと駆け足でいきます。</p>\n<p class=\"part\" data-startline=\"304\" data-endline=\"304\">アプリケーションに必要なレプリケーションコントローラーやサービス等のオブジェクトを適用していきます。インターネット上に公開されている設定YAMLファイルを直接適用できる所がKubernetesの良い所です:</p>\n<pre class=\"part\" data-startline=\"306\" data-endline=\"327\"><code>$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/v1.10.3/examples/guestbook-go/redis-master-controller.json\nreplicationcontroller \"redis-master\" created\n\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/v1.10.3/examples/guestbook-go/redis-master-controller.json\nreplicationcontroller \"redis-master\" created\n\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/v1.10.3/examples/guestbook-go/redis-master-service.json\nservice \"redis-master\" created\n \n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/v1.10.3/examples/guestbook-go/redis-slave-controller.json\nreplicationcontroller \"redis-slave\" created\n\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/v1.10.3/examples/guestbook-go/redis-slave-service.json\nservice \"redis-slave\" created\n\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/v1.10.3/examples/guestbook-go/guestbook-controller.json\nreplicationcontroller \"guestbook\" created\n\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/v1.10.3/examples/guestbook-go/guestbook-service.json\nservice \"guestbook\" created\n</code></pre>\n<p class=\"part\" data-startline=\"329\" data-endline=\"329\">その後、<code>guestbook</code> サービスのEXTERNAL-IPが割り当てられるまで待ちます:</p>\n<pre class=\"part\" data-startline=\"331\" data-endline=\"338\"><code>$ kubectl get services -o wide\nNAME           TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)          AGE       SELECTOR\nguestbook      LoadBalancer   10.100.121.35    a6aa2e574778911e894530228d4e0b41-1287580158.us-west-2.elb.amazonaws.com   3000:32209/TCP   2m        app=guestbook\nkubernetes     ClusterIP      10.100.0.1       &lt;none&gt;                                                                    443/TCP          36m       &lt;none&gt;\nredis-master   ClusterIP      10.100.237.173   &lt;none&gt;                                                                    6379/TCP         2m        app=redis,role=master\nredis-slave    ClusterIP      10.100.168.148   &lt;none&gt;\n</code></pre>\n<p class=\"part\" data-startline=\"340\" data-endline=\"340\">割り当てられたら、アクセスが可能です。 <a href=\"http://a143abb3b782711e890be021a4e4ac58-425821813.us-west-2.elb.amazonaws.com:3000/\" target=\"_blank\" rel=\"noopener\">http://a143abb3b782711e890be021a4e4ac58-425821813.us-west-2.elb.amazonaws.com:3000/</a> を開いてみると、無事ゲストブックアプリケーションが開かれました。</p>\n<p class=\"part\" data-startline=\"342\" data-endline=\"342\"><img class=\"alignnone wp-image-242 size-full\" src=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/eks-guestbook.png?resize=1200%2C382&#038;ssl=1\" alt=\"\" width=\"1200\" height=\"382\" srcset=\"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/eks-guestbook.png?w=2036&amp;ssl=1 2036w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/eks-guestbook.png?resize=300%2C95&amp;ssl=1 300w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/eks-guestbook.png?resize=768%2C244&amp;ssl=1 768w, https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/eks-guestbook.png?resize=1024%2C326&amp;ssl=1 1024w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" data-recalc-dims=\"1\" /></p>\n<h2 id=\"クリーンナップ\" class=\"part\" data-startline=\"344\" data-endline=\"344\">クリーンナップ</h2>\n<p class=\"part\" data-startline=\"346\" data-endline=\"346\">無事にアプリケーションをデプロイできたので、作ったリソースを削除していきます。</p>\n<p class=\"part\" data-startline=\"348\" data-endline=\"348\">クラスタからゲストブックアプリケーションの為にデプロイしたオブジェクトを削除:</p>\n<pre class=\"part\" data-startline=\"350\" data-endline=\"358\"><code>$ kubectl delete \\\n  rc/redis-master \\\n  rc/redis-slave \\\n  rc/guestbook \\\n  svc/redis-master \\\n  svc/redis-slave \\\n  svc/guestbook\n</code></pre>\n<p class=\"part\" data-startline=\"360\" data-endline=\"360\">Workerノードのオートスケーリンググループを削除:</p>\n<pre class=\"part\" data-startline=\"362\" data-endline=\"366\"><code>$ aws cloudformation delete-stack --stack-name eks-my-cluster-worker-nodes\n</code></pre>\n<p class=\"part\" data-startline=\"368\" data-endline=\"368\">EKSクラスタを削除:</p>\n<pre class=\"part\" data-startline=\"370\" data-endline=\"372\"><code>$ aws eks delete-cluster --name my-cluster\n</code></pre>\n<h2 id=\"感想\" class=\"part\" data-startline=\"374\" data-endline=\"374\">感想</h2>\n<p>GKEに比べると、クラスタの構築は大変な印象がありました。また、GKEがクラスタの料金を無料としている一方で、EKSは少額なものの、課金されてしまう点も無視はできません。<br />\nそう言った意味でも、自社開発であるAmazon ECSの方が（クラスタ構築自体の）敷居は低いように思います。しかし、世の中の流れ的にKubernetesがデファクトとなっていますし、クラスタ構築後の手軽さや手堅さを考えると、今後も積極的にKubernetesを使いたいと思います。なのでAmazon EKSの今後の改善に期待。（と言うか早く東京に来てくれ）</p>\n","dateObject":"2018-06-25T12:26:47.000Z","date":"June 25, 2018","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"EKS","slug":"eks"},{"name":"Kubernetes","slug":"kubernetes"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/eks-logo.png?fit=768%2C219&ssl=1","height":219,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/eks-logo.png"},"wordpress_id":235}},"pageContext":{"id":"cbe57eb1-c8cd-58b7-aa22-ca09f040a909","nextPath":"/2018/06/12/ハイブリッドアプリの最新トレンド/","nextTitle":"ハイブリッドアプリの最新トレンド","prevPath":"/2018/07/14/try-2fa-using-1password/","prevTitle":"1Passwordの二要素認証機能を試してみる"}}}