{"componentChunkName":"component---src-templates-post-js","path":"/2018/06/06/build-node-native-module-using-docker-for-lambda/","result":{"data":{"wordpressPost":{"id":"98060c9e-f87c-5c1a-9cd6-bf08707b8134","title":"DockerでAWS Lambda用のNode.jsネイティブモジュールをビルドする","excerpt":"<p>先日、AWS LambdaのNode.jsでiconvを使うのが大変だった件と言う記事を書きましたが、その後すぐ、AWSがAmazon Linux用の公式Dockerイメージを公開している事を知りました。 そこで、前回は [&hellip;]</p>\n","slug":"build-node-native-module-using-docker-for-lambda","content":"<p>先日、<a href=\"https://stg-engineering-wp.mobalab.net/2018/05/17/aws-lambda%E3%81%AEnode-js%E3%81%A7iconv%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%8C%E5%A4%A7%E5%A4%89%E3%81%A0%E3%81%A3%E3%81%9F%E4%BB%B6/\">AWS LambdaのNode.jsでiconvを使うのが大変だった件</a>と言う記事を書きましたが、その後すぐ、AWSがAmazon Linux用の公式Dockerイメージを公開している事を知りました。<br />\nそこで、前回はEC2上のAmazon LinuxでNode.jsのネイティブモジュールをビルドしましたが、今回はDockerを使った方法にリファクタリングしてみたいと思います。</p>\n<p>尚、使用した環境はmacOS High Sierra (10.13.5) + Docker for Mac (18.05.0-ce-mac66, channel: edge)です。</p>\n<h2>Amazon Linuxイメージ</h2>\n<p>Docker Hubに公開されています。→ <a href=\"https://hub.docker.com/r/library/amazonlinux/\">https://hub.docker.com/r/library/amazonlinux/</a><br />\n<a href=\"https://hub.docker.com/r/library/amazonlinux/tags/\">タグの一覧</a>を見てみると、かなり細かくバージョンが切られているようです。</p>\n<p>尚、AWS Lambdaでは現在の所<a href=\"https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/current-supported-versions.html\">Amazon Linux (amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2) が使われている</a>ので、それに併せて今回はamazonlinux:2017.03.1.20170812を使っていきます。まずはイメージをPullしてきます:</p>\n<pre><code>$ docker pull amazonlinux:2017.03.1.20170812\n</code></pre>\n<h2>ネイティブモジュールをビルドする為のイメージを作成する</h2>\n<p>準備が整ったので早速作っていきます。まずは、先程のイメージを使ってコンテナを作成します:</p>\n<pre><code>$ docker run -it --name native-node amazonlinux:2017.03.1.20170812\nbash-4.2#\n</code></pre>\n<p>※デフォルトで /bin/bash が起動するよう設定されています。</p>\n<p>次にNode.jsをインストールします。今回はAWS Lambdaでv8.10のランタイムを使いたいので、それに併せて8系の物をインストールします。<br />\n<a href=\"https://nodejs.org/en/download/package-manager/#enterprise-linux-and-fedora\">公式ドキュメントのRHEL系でのインストール手順</a>に従い、まずrpmを取得します (rootなのでsudoは省略します) :</p>\n<pre><code>bash-4.2# curl -sL https://rpm.nodesource.com/setup_8.x | bash -\n...\n## Run `sudo yum install -y nodejs` to install Node.js 8.x LTS Carbon and npm.\n## You may also need development tools to build native addons:\nsudo yum install gcc-c++ make\n## To install the Yarn package manager, run:\ncurl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\nsudo yum install yarn\n</code></pre>\n<p>出力が上記のような形で終われば成功です。この後コメントの通り、yumを使ってNode.jsをインストールするのですが、 &#8220;You may also need development tools to build native addons: sudo yum install gcc-c++ make&#8221; にもある通り、まさしく今回はネイティブモジュールをビルドするので、これらも一緒にインストールする必要があります。従って、コマンドは次の通りになります:</p>\n<pre><code>bash-4.2# yum install -y nodejs gcc-c++ make\n...\n\nInstalled:\ngcc-c++.noarch 0:4.8.5-1.22.amzn1 nodejs.x86_64 2:8.11.2-1nodesource\n\nDependency Installed:\nbinutils.x86_64 0:2.25.1-31.base.66.amzn1 cpp48.x86_64 0:4.8.5-28.142.amzn1 gcc.noarch 0:4.8.5-1.22.amzn1\ngcc48.x86_64 0:4.8.5-28.142.amzn1 gcc48-c++.x86_64 0:4.8.5-28.142.amzn1 glibc-devel.x86_64 0:2.17-222.173.amzn1\nglibc-headers.x86_64 0:2.17-222.173.amzn1 kernel-headers.x86_64 0:4.14.42-52.37.amzn1 libgomp.x86_64 0:6.4.1-1.45.amzn1\nlibmpc.x86_64 0:1.0.1-3.3.amzn1 mpfr.x86_64 0:3.1.1-4.14.amzn1 python26.x86_64 0:2.6.9-2.89.amzn1\npython26-libs.x86_64 0:2.6.9-2.89.amzn1\n\nDependency Updated:\nglibc.x86_64 0:2.17-222.173.amzn1 glibc-common.x86_64 0:2.17-222.173.amzn1 libgcc48.x86_64 0:4.8.5-28.142.amzn1\nlibstdc++48.x86_64 0:4.8.5-28.142.amzn1 nss-softokn-freebl.x86_64 0:3.28.3-8.41.amzn1\n\nComplete!\n</code></pre>\n<p>無事インストールされました。Node.jsは8.11がインストールされましたが、おそらく問題ないでしょう。</p>\n<p>それでは、早速ネイティブモジュールのインストールをしてみたいと思います。<a href=\"https://stg-engineering-wp.mobalab.net/2018/05/17/aws-lambda%E3%81%AEnode-js%E3%81%A7iconv%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%8C%E5%A4%A7%E5%A4%89%E3%81%A0%E3%81%A3%E3%81%9F%E4%BB%B6/\">前回</a>と同様、iconvをインストールします。<br />\nテストなので、/tmpに移動してインストールします:</p>\n<pre><code>bash-4.2# cd /tmp\nbash-4.2# npm install iconv\n\n&gt; iconv@2.3.0 install /tmp/node_modules/iconv\n&gt; node-gyp rebuild\n\nmake: Entering directory `/tmp/node_modules/iconv/build'\nCXX(target) Release/obj.target/iconv/src/binding.o\nCC(target) Release/obj.target/iconv/deps/libiconv/lib/iconv.o\nCC(target) Release/obj.target/iconv/support/localcharset.o\nSOLINK_MODULE(target) Release/obj.target/iconv.node\nCOPY Release/iconv.node\nmake: Leaving directory `/tmp/node_modules/iconv/build'\nnpm WARN saveError ENOENT: no such file or directory, open '/tmp/package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open '/tmp/package.json'\nnpm WARN tmp No description\nnpm WARN tmp No repository field.\nnpm WARN tmp No README data\nnpm WARN tmp No license field.\n\n+ iconv@2.3.0\nadded 2 packages in 6.425s\n</code></pre>\n<p>無事インストールができたみたいです。iconvの場合、ビルド成果物はnode_modules/iconv/build/Release/iconv.node以下に配置されるのですが、きちんとできています。</p>\n<pre><code>bash-4.2# ls -la node_modules/iconv/build/Release/iconv.node\n-rwxr-xr-x 1 root root 1119920 Jun 5 05:53 node_modules/iconv/build/Release/iconv.node\n</code></pre>\n<p>問題は、これがLambdaで動くかどうかなのですが、前回、EC2上でビルドしたバイナリのmd5は <code>216d4e9181fc621c4500e1a6760f9e3f</code> でした。<br />\n今回のバイナリはどうでしょうか？ <code>md5sum</code> で検証してみましょう:</p>\n<pre><code>bash-4.2# md5sum node_modules/iconv/build/Release/iconv.node\n216d4e9181fc621c4500e1a6760f9e3f node_modules/iconv/build/Release/iconv.node\n</code></pre>\n<p>（当然ですが）一致しました！大成功です。因みに、詳細は省きますが実際にLambda上にデプロイしても動作しました👍</p>\n<h2>コンテナの再利用</h2>\n<p>さて、無事ミッションに成功した所で、コンテナを今後も再利用していく為に、イメージ化していきたい所です。 <code>docker commit</code> を使って現在のコンテナの状態をイメージに保存ができますが、折角なのでDockerfile化しておきました → <a href=\"https://github.com/issei-m/npm-for-lambda\">https://github.com/issei-m/npm-for-lambda</a></p>\n<p>Docker Hubには公開していないので、手動でリポジトリをcloneして <code>docker build</code>  する必要があります:</p>\n<pre><code>$ docker build -t npm-for-lambda .\n</code></pre>\n<p>その後、npmをインストールしたいディレクトリを <code>/root</code> にボリュームマウントした状態で実行します。<br />\n尚、 <code>npm</code> がENTRYPOINTとして登録されているので、以降のコマンドのみを記述すればOKです:</p>\n<pre><code>$ docker run -it --rm -v /tmp:/root npm-for-lambda install iconv\n\n&gt; iconv@2.3.0 install /root/node_modules/iconv\n&gt; node-gyp rebuild\n\nmake: Entering directory `/root/node_modules/iconv/build'\nCXX(target) Release/obj.target/iconv/src/binding.o\nCC(target) Release/obj.target/iconv/deps/libiconv/lib/iconv.o\nCC(target) Release/obj.target/iconv/support/localcharset.o\nSOLINK_MODULE(target) Release/obj.target/iconv.node\nCOPY Release/iconv.node\nmake: Leaving directory `/root/node_modules/iconv/build'\nnpm WARN saveError ENOENT: no such file or directory, open '/root/package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open '/root/package.json'\nnpm WARN root No description\nnpm WARN root No repository field.\nnpm WARN root No README data\nnpm WARN root No license field.\n\n+ iconv@2.3.0\nadded 2 packages in 10.784s\n</code></pre>\n<p>無事作られました。チェックサムもばっちりです:</p>\n<pre><code>$ md5 /tmp/node_modules/iconv/build/Release/iconv.node\nMD5 (/tmp/node_modules/iconv/build/Release/iconv.node) = 216d4e9181fc621c4500e1a6760f9e3f\n</code></pre>\n<h2>おわりに</h2>\n<p>いかがでしたでしょうか。今回は、（今更ながら）Dockerがアプリケーションの実行環境だけでなく、特定の環境に向けてのコンパイル環境としても有用と言う事が分かりました。<br />\n今後も是非活用していきたいと思います。</p>\n","dateObject":"2018-06-06T03:19:26.000Z","date":"June 06, 2018","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"Docker","slug":"docker"},{"name":"Lambda","slug":"lambda"},{"name":"Node.js","slug":"node-js"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":null}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/06/docker-node.png"},"wordpress_id":186}},"pageContext":{"id":"98060c9e-f87c-5c1a-9cd6-bf08707b8134","nextPath":"/2018/05/17/aws-lambdaのnode-jsでiconvを使うのが大変だった件/","nextTitle":"AWS LambdaのNode.jsでiconvを使うのが大変だった件","prevPath":"/2018/06/12/ハイブリッドアプリの最新トレンド/","prevTitle":"ハイブリッドアプリの最新トレンド"}}}