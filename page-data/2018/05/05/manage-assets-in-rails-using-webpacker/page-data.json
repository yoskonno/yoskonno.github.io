{"componentChunkName":"component---src-templates-post-js","path":"/2018/05/05/manage-assets-in-rails-using-webpacker/","result":{"data":{"wordpressPost":{"id":"6696f543-6440-57ee-abf7-7a62efcbf906","title":"Rails アプリのアセットを Webpacker で管理する","excerpt":"<p>世間では GW ですが、皆さんいかがお過ごしでしょうか。こちらは仕事も落ち着いてきたため、直近のプロジェクトでそこそこ時間を使う羽目になった Webpacker についてのブログ記事を書くことにしました。 はじめに Ru [&hellip;]</p>\n","slug":"manage-assets-in-rails-using-webpacker","content":"<p>世間では GW ですが、皆さんいかがお過ごしでしょうか。こちらは仕事も落ち着いてきたため、直近のプロジェクトでそこそこ時間を使う羽目になった Webpacker についてのブログ記事を書くことにしました。</p>\n<h1>はじめに</h1>\n<p>Ruby on Rails では Sprockets というモジュール（？）によって、JavaScript, CSS, 画像などのアセットを管理する事が出来ます。これは Rails 独自の仕組みであり、それによる問題点なども目立つようになったため、フロントエンド界隈で広く使われている Webpack を使いたいという要望は以前からあったようです。（その辺りの経緯などは、検索すれば色々出てくるので、ここでは記載しません。）</p>\n<p>そうした要望に応えるものが Webpacker で、簡単に言うと Webpack の機能を Rails に組み込んだもので、使う側からすると主に以下の2つの機能が提供されています。</p>\n<ul>\n<li><code>rails</code> コマンドに、Webpacker 関連のサブコマンドの追加</li>\n<li>Sprockets と同様に、pack 済みのアセットを読み込むためのタグ（ヘルパー）</li>\n</ul>\n<p>本記事では、</p>\n<ul>\n<li>Webpacker の設定方法、使い方</li>\n<li>Sprockets との併用方法</li>\n<li>実際に起こった細かい問題とその解決方法</li>\n</ul>\n<p>について説明します。</p>\n<p>なお、私自身はフロントエンドエンジニアでもなければ、Rails にも特別詳しいわけでは無いため、不正確な記述があるかもしれませんので、その際にはご指摘頂ければ幸いです。</p>\n<p>環境は、特別断りがない限り、弊社のプロジェクトで使用した以下のバージョンのものです。</p>\n<ul>\n<li>Rails 5.1</li>\n<li>Webpacker 3.4.3</li>\n</ul>\n<p><!--more--></p>\n<h1>Webpacker とは</h1>\n<h2>主な用途</h2>\n<p>Webpacker の README.md の冒頭に、以下のような記述があります。</p>\n<blockquote><p>\n  Webpacker makes it easy to use the JavaScript pre-processor and bundler webpack 4.x.x+ to manage application-like JavaScript in Rails. It coexists with the asset pipeline, as the primary purpose for webpack is app-like JavaScript, not images, CSS, or even JavaScript Sprinkles (that all continues to live in app/assets).</p>\n<p>  However, it is possible to use Webpacker for CSS, images and fonts assets as well, in which case you may not even need the asset pipeline. This is mostly relevant when exclusively using component-based JavaScript frameworks.\n</p></blockquote>\n<p>簡単に要約するとこんな感じです。</p>\n<ul>\n<li>Webpacker は webpack 4.x.x を Rails で管理するためのもの</li>\n<li>asset pipeline (Sprockets) と共存できる</li>\n<li>webpack の主な用途は、&#8221;app-like&#8221; JavaScript のため\n<ul>\n<li>画像、CSS、あるいは JavaScript &#8220;Sprinkles&#8221; のためのものではない（※）\n<ul>\n<li>ただし、Webpacker をそれらの用途に使うことも出来る</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>※ ページ単位で必要となる、小さな JavaScript の事を指しているようです</p>\n<p>ただし、<a href=\"https://webpack.js.org/\">webpack の web サイト</a>を見る限り、Webpacker チームの（？） webpack に対するこの理解は正しくないように思えます。現に、webpack のトップページには以下のような画像が掲載されているのですが、画像、CSS が JS と同列に扱われていることは明らかです。</p>\n<p><img src=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/webpack-outline.png?resize=680%2C303&#038;ssl=1\" alt=\"\" width=\"680\" height=\"303\" class=\"alignnone size-large wp-image-143\" srcset=\"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/webpack-outline.png?resize=1024%2C457&amp;ssl=1 1024w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/webpack-outline.png?resize=300%2C134&amp;ssl=1 300w, https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/webpack-outline.png?resize=768%2C343&amp;ssl=1 768w\" sizes=\"(max-width: 680px) 100vw, 680px\" data-recalc-dims=\"1\" /></p>\n<h2>Sprockets との使い分け</h2>\n<p>Webpacker と Sprockets という、似たようなことをするものが2つあるのですが、これらをどう使い分ければ良いのでしょうか。ネット上には色々意見があるので、参考になるかと思います。個人的には、以下の2つのページが参考になりました。</p>\n<ul>\n<li><a href=\"http://techlife.cookpad.com/entry/2017/03/27/161706\">Webpackerを使ったRailsでのJavaScript開発 &#8211; クックパッド開発者ブログ</a></li>\n<li><a href=\"https://blog.tai2.net/webpacker3.html\">Webpacker 3ではじめるRailsエンジニアのためのモダンフロントエンド入門 〜Sprocketsを使わないRailsプロジェクト試案〜 | blog.tai2.net</a></li>\n</ul>\n<p>色々な意見があることは承知の上で、自分なりの結論を書くなら、以下の通りです。</p>\n<ul>\n<li>新規プロジェクトでは、Webpacker を基本とする\n<ul>\n<li>Sprockets に依存する gem などが必要な場合は、Sprockets を併用する</li>\n</ul>\n</li>\n<li>既存プロジェクトの移行の場合は、新規モジュールなどから徐々に Webpacker ベースに移行する</li>\n</ul>\n<h2>まだまだ開発中</h2>\n<p>Webpacker は、積極的に開発されている途中で、API も頻繁に変わります。プロジェクトで使用したときは 3.4.3 が最新だったのですが、既に 3.5 がリリースされているようです。</p>\n<p>また、Webpacker の情報を扱った web ページは、情報が古いものが多いので注意が必要です。本ページの内容もすぐに古くなってしまう可能性もありますので、ご注意下さい。</p>\n<h1>Webpacker のインストール、設定方法</h1>\n<h2>インストール</h2>\n<p>基本的にはドキュメントに従えば良いので、気をつける点などを中心に記載します。</p>\n<p>Gemfile に以下を追加し、</p>\n<pre><code>gem 'webpacker', '~&gt; 3.5'\n</code></pre>\n<p>以下のコマンドを実行します。</p>\n<pre><code>bundle\nbundle exec rails webpacker:install\n</code></pre>\n<h2>ディレクトリ構成</h2>\n<p>変更することも出来ますが、デフォルトでは <code>app/javascript</code> 以下が Webpacker で管理するアセットを置く場所です。CSS などもこの <code>app/javascript</code> ディレクトリに入れることになるので、名前が気に入らない方は変更した方が良いと思います。</p>\n<p>そのディレクトリ配下の構成ですが、README に記載のものを少し修正しつつ説明します。あくまで一例ですので、「こうした方が良いよ」とかのご意見があれば、コメント等でお願いいたします。</p>\n<pre><code>app/javascript:\n  ├── packs:\n  │   # エントリーポイント\n  │   └── application.js\n  └── src:\n      └── application.css\n      └── js\n      │   └── foo.js # 自分たちで開発した JS\n      └── scss\n      │   └── style.scss # 他の SCSS をここから読み込む\n      │       └── mixins\n      │           └── _bar.scss\n      │       └── ：\n      └── images: # README だと javascript 直下ですが、 src の下に含めるようにしました\n          └── logo.svg\n</code></pre>\n<p>packs ディレクトリにあるものがエントリーポイントとなり、複数のエントリーポイントを用意することも出来ますが、本プロジェクトでは application.js を唯一のエントリーポイントとしました。なお、application.JS という名前ですが、このファイルから CSS などの各種アセットを import します。詳しくは、webpack の以下のドキュメントなどを参照して下さい。</p>\n<p><a href=\"https://webpack.js.org/guides/asset-management/\">Asset Management</a></p>\n<h2>エントリーポイント</h2>\n<p>今回作成した application.js は以下のようになります。</p>\n<pre><code class=\"javascript\">import \"jquery\"\nglobal.$ = require('jquery')\n\n// JS ----------\n// yarn 経由でインストールしたもの\nimport 'popper.js/dist/umd/popper';\nimport 'bootstrap/dist/js/bootstrap';\nimport 'slick-carousel/slick/slick';\nimport '@fengyuanchen/datepicker/dist/datepicker';\n// 自前の\nimport 'src/js/foo';\n\n// CSS ----------\n// yarn 経由でインストールしたもの\nimport 'slick-carousel/slick/slick.css';\nimport '@fengyuanchen/datepicker/dist/datepicker.css';\n// 自前の\nimport 'src/scss/style'\n\n// 後述\nimport Rails from 'rails-ujs'\nRails.start()\n</code></pre>\n<p>エントリーポイントはこのような形式です。<code>yarn</code> （あるいは <code>npm</code>）でインストールしたモジュールの JS, SCSS、自前の JS, SCSS をこのエントリーポイントから import します。</p>\n<p>Rails には ajax 周りの処理を楽にしてくれる jquery-ujs というものがあったのですが、Rails 5.1 からは、jQuery への依存がなくなって、 <code>rails-ujs</code> という名前に変わり、Rails 本体に取り込まれるようになりました。エントリーポイントで rails-ujs を読み込んで <code>Rails.start()</code> を実行しておくと、今までと同様の処理が出来るのだと思います。（ここは自信なし）</p>\n<h2>各種モジュールのインストール</h2>\n<p>webpack で使用できる CommonJS や UMD 形式に対応したモジュールは、Webpacker で管理できます。そうしたモジュールのインストール方法としては</p>\n<ul>\n<li>yarn を使う</li>\n<li>（yarn でインストール出来ないものは）ダウンロードしてきて、ソースツリーに加える</li>\n</ul>\n<p>という方法になります。</p>\n<p>その上で、上述のエントリーポイント（application.js）でそうしたモジュールを import する必要があります。詳しくは、各モジュールのドキュメントか webpack のドキュメントを参照して下さい。</p>\n<h1>基本的な使い方</h1>\n<h2>アセットのコンパイル</h2>\n<p>コンパイルの仕方は主に2通りあります。</p>\n<p>1つは事前に全てコンパイルする方法で、以下のコマンドを実行します。</p>\n<pre><code>bundle exec rails webpacker:compile\n</code></pre>\n<p>もう1つは、ファイルの更新を watch しておき、変更があったら随時コンパイルをする方法です。やり方は何通りかあるのですが、一番単純なのは、1つターミナルを開いておき、以下のコマンドを実行して立ち上げっぱなしにしておくことです。</p>\n<pre><code>./bin/webpack --watch --colors --progress\n</code></pre>\n<p>なお、今回は開発環境に Vagrant を使っていたのですが、Vagrant box 内で上のコマンドを実行しても、ホスト上でのファイルの変更が検知できないという問題がありました。これについては、後述します。</p>\n<h2>アセットの読み込み</h2>\n<p>Sprockets と大体同じだと思いますが、以下のタグで JS, CSS を読み込みます。</p>\n<pre><code class=\"erb\">    &lt;%# CSS の読み込み。\"application\" は、エントリーポイントの名前 %&gt;\n    &lt;%= stylesheet_pack_tag 'application' %&gt;\n\n    &lt;%# JS の読み込み。\"application\" は、エントリーポイントの名前 %&gt;\n    &lt;%= javascript_pack_tag 'application' %&gt;\n</code></pre>\n<h1>Sprockets の併用</h1>\n<p>最初の方に書いた通り</p>\n<ul>\n<li>既存の Rails アプリに Webpacker を導入する</li>\n<li>Sprockets に依存する gem を使う</li>\n</ul>\n<p>といった場合に、Sprockets と Webpacker を併用する必要があります。以下で具体的な方法をいくつか記載します。</p>\n<h2>アプリケーション全体では使わないようにする</h2>\n<p>例えば、Rails アプリを作成した直後は、Sprockets 用の以下ようなファイルが存在すると思います。</p>\n<pre><code class=\"javascript\">// app/assets/javascripts/application.js\n//= require turbolinks\n</code></pre>\n<pre><code class=\"css\">/*\n * app/assets/stylesheets/application.css\n *= require_tree .\n *= require_self\n */\n</code></pre>\n<p>そして、それらを、一般的には layout 内で以下のように読み込むと思います。</p>\n<pre><code class=\"erb\">&lt;%= stylesheet_link_tag \"application\", media: \"all\" %&gt;\n&lt;%= javascript_include_tag \"application\" %&gt;\n</code></pre>\n<p>まずは、このタグを消して、基本的には Sprockets のアセットは読み込まず、ページ（あるいは Controller ）単位で必要に応じて読み込むようにします。</p>\n<p>弊社のプロジェクトでは、controller 単位で JS を作って、それを読み込むようにしました。（次項）</p>\n<h3>コントローラー単位で JS を作成</h3>\n<p>今回は、 <code>app/assets/javascripts</code> 配下に、各コントローラー毎の JS を作成し、それを読み込むことにしました。</p>\n<p>今までは <code>config/initializers/assets.rb</code> の <code>Rails.application.config.assets.precompile</code> に precompile する JS を書いていくというのが一般的だったようですが、最近は manifest ファイルを使うのが推奨されているっぽいので、まずは、<code>config/initializers/assets.rb</code> に以下のように記載します。</p>\n<pre><code class=\"ruby\">Rails.application.config.assets.precompile += %w[manifest.js]\n</code></pre>\n<p><code>app/assets/config/manifest.js</code> は、以下のように書きました。</p>\n<pre><code class=\"javascript\">//= link_tree ../images\n//= link_tree ../javascripts .js\n// ES6 は、デフォルトでは使えない。詳細は後述\n//= link_tree ../javascripts .es6\n//= link_directory ../stylesheets .css\n</code></pre>\n<p>そして、layout に以下のタグを追記し、コントローラー単位の JS を読み込みます。</p>\n<pre><code class=\"erb\">    &lt;%= javascript_include_tag params[:controller] %&gt;\n</code></pre>\n<h2>Webpacker 管理の JS モジュールを Sprockets 管理の JS から使用する</h2>\n<p>Webpacker 管理の JavaScript のモジュールは、global 空間を汚染せず、他のモジュールからは import して使用します。全ての JS が Webpacker 管理の場合は、特に問題にならないと思いますが、Sprockets を併用する場合、Webpacker で管理されている JS モジュールの機能を Sprockets 管理の JS から使用したい場合もあると思います。</p>\n<p>その場合の手順としては、大雑把に以下の通りです。</p>\n<ol>\n<li>各モジュールで、外部に晒したいものを export する</li>\n<li>エントリーポイント（application.js）で、export する</li>\n<li>Webpacker の設定で、&#8221;output&#8221; の対象とする</li>\n<li>Sprockets 管理の JS で使用する</li>\n</ol>\n<p>（Webpack に詳しくないので、もしかしたらもっと良い方法があるかもしれません。）</p>\n<p>以下に、各手順を説明します。</p>\n<h3>1. 各モジュールで、外部に晒したいものを export する</h3>\n<p><code>app/javascript/src/js/foo.js</code> で、以下のようにします。</p>\n<pre><code class=\"javascript\">function foo_func() {\n  console.log('foo! foo!');\n}\n\nexport default foo_func\n</code></pre>\n<p>これで、<code>foo_func</code> は、Webpacker 管理の他の JS で import 出来るようになります。</p>\n<h3>2. エントリーポイント（application.js）で、export する</h3>\n<p>1で export したものを、エントリーポイントの <code>app/javascript/packs/application.js</code> 内で読み込んで export します。</p>\n<pre><code class=\"javascript\">export { default as foo } from 'src/js/foo';\n</code></pre>\n<h3>3. Webpacker の設定で、&#8221;output&#8221; の対象とする</h3>\n<p><code>config/webpack/environment.js</code> で、以下の設定を追加します。</p>\n<pre><code class=\"javascript\">environment.config.set('output.library', ['Packs', '[name]'])\n</code></pre>\n<p><code>[name]</code> というのはプレースホルダーですので、<code>app/javascript/packs/application.js</code> の内容は、 <code>Packs.application</code> として出力されます。</p>\n<p>詳しくは、webpack の以下のドキュメントを参照して下さい。<br />\n<a href=\"https://webpack.js.org/configuration/output/#output-library\">Output</a></p>\n<h3>4. Sprockets 管理の JS で使用する</h3>\n<p>3 で output された JS は、Sprockets 管理の JS から、以下のように使用できます。</p>\n<pre><code class=\"javascript\">Packs.application.foo()\n</code></pre>\n<h1>細かい問題と解決方法</h1>\n<p>色々問題があったので、解決方法も含めて記載します。一部、Sprockets の話も含まれます（別エントリーに分けるのが面倒なので）。</p>\n<h2>jQuery を使う（あまり自身無し）</h2>\n<p>jQuery を Webpacker のバンドルに含めて使えるようにするのは、色々試して以下のようになっています。</p>\n<p><code>app/javascript/packs/application.js</code></p>\n<pre><code class=\"javascript\">import \"jquery\"\nglobal.$ = require('jquery')\n</code></pre>\n<p><code>config/webpack/environment.js</code></p>\n<pre><code class=\"javascript\">environment.plugins.prepend('Provide', new webpack.ProvidePlugin({\n  $: 'jquery',\n  jQuery: 'jquery',\n  \"Tether\": 'tether',\n  Popper: ['popper.js', 'default']\n}))\n</code></pre>\n<p>正直なところ、この設定が正しいのかどうかもちょっと分からないですし、無駄な設定などがあるかもしれません。</p>\n<h2>Vagrant 環境での watch の問題</h2>\n<p>webpack に限らず、Vagrant box とファイル変更の監視系の処理は相性が悪いです。webpack の設定で、polling をするように修正しました。具体的には、<code>config/webpack/development.js</code> に以下を追記します。</p>\n<pre><code class=\"javascript\">environment.config.merge({\n    devServer: {\n        watchOptions: {\n            poll: 5000\n        }\n    },\n    watchOptions: {\n        poll: 5000\n    }\n})\n</code></pre>\n<h2>Compass を使う</h2>\n<p>最初にも書きましたが、私はフロントエンドエンジニアでは無いので詳しくは分かりませんが、以前は <a href=\"https://github.com/Compass/compass\">Compass</a> ってのがそこそこ使われていたようですが、現在は開発が止まっていてサポートされていないようです。</p>\n<p>が、今回のプロジェクトでは、別の会社の方が作成した HTML, CSS で Compass を使っていたので、使わざるを得ませんでした。</p>\n<p>色々検索したり試したところ、<a href=\"https://github.com/Igosuki/compass-mixins\">compass-mixins</a> というのが Compass を Bower レポジトリ用に使えるようにしたものらしく、これを yarn 経由でもインストールすることが出来ました。</p>\n<p>compass-mixins をインストールすると、<code>node_modules/compass-mixins/</code> 配下にファイルが色々置かれますが、それらのファイルの中で、さらに以下のように別のファイルを import しています。</p>\n<pre><code class=\"javascript\">@import \"compass/functions\";\n</code></pre>\n<p>そのため、それがうまくいくように、<code>config/webpacker.yml</code> で、以下の記述を追加しました。</p>\n<pre><code class=\"yml\">  resolved_paths: ['node_modules/compass-mixins/lib']\n</code></pre>\n<h2>IE でエラーになる</h2>\n<p>詳細は省きますが、Webpacker では、babel という transpiler を使って、ECMA Script 6 (以下 ES6) とかも、IE で認識できる通常の JS に変換をすることが出来るはずなのですが、現状はバグがあってうまくいきません。問題の詳細は以下のリンクを参照して下さい。</p>\n<p><a href=\"https://github.com/rails/webpacker/issues/1235\">webpacker 3.2.1 hardcodes uglifyOptions: { ecma: 8 } which ignores Babel target options and breaks IE11 compatibility · Issue #1235 · rails/webpacker</a></p>\n<p>解決方法は、同 issue に記載されているものか、あるいは以下の issue に記載の方法を行います。（どちらも、本質的には一緒です。）</p>\n<p><a href=\"https://github.com/rails/webpacker/issues/1336\">webpacker:compile doesnt seem to be loading babelrc · Issue #1336 · rails/webpacker</a></p>\n<h2>Sprockets で ES6 を使う</h2>\n<p>検索するといくつかの方法があるのですが、今回は <a href=\"https://github.com/TannerRogalsky/sprockets-es6\"><code>sprockets-es6</code></a> を使いました。使い方は、README を見て下さい。</p>\n<p>その他の方法としては、以下のようなものがあります。</p>\n<ul>\n<li>Sprockets 4 を使う → 新しいバージョンは怖い・・・</li>\n<li><code>sprockets-commoner</code> を使う → 試したもののうまくいきませんでした（詳細は省略）</li>\n</ul>\n<h1>まとめ</h1>\n<p>Webpacker を使うと、JS、CSS のアセットを webpack で管理しつつ、違和感なく Rails から使うことが出来ます。</p>\n<p>ネットの古い情報だと、以前の Webpacker はもっと使いづらかったようですが、私が Webpacker を使った2018年初頭では、大分こなれてきた感じがします。私は、ガチフロントエンド勢では無いので、現状でも（設定方法が分かってしまえば）あまり不便は感じなかったのですが、もっと細かいことをやりたい場合には、素の webpack を使った方が良いケースがあるかもしれません。</p>\n<p>Sprockets と Webpacker の関係ですが、今後の新規 Rails プロジェクトであれば、Sprokets は基本的には使わず、使いたい gem が Sprockets に依存しているときのみ使う、という感じにするのが良いと思います。</p>\n","dateObject":"2018-05-05T06:51:54.000Z","date":"May 05, 2018","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"frontend","slug":"frontend"},{"name":"JavaScript","slug":"javascript"},{"name":"Ruby on Rails","slug":"ruby-on-rails"},{"name":"Webpacker","slug":"webpacker"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/files-1614223_960.jpg?fit=1024%2C800&ssl=1","height":800,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/files-1614223_960.jpg?fit=768%2C600&ssl=1","height":600,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/files-1614223_960.jpg"},"wordpress_id":142}},"pageContext":{"id":"6696f543-6440-57ee-abf7-7a62efcbf906","nextPath":"/2018/01/14/how-to-deploy-python-based-lambda-function-that-uses-packages/","nextTitle":"Serverless で Python のパッケージを使った Lambda 関数をデプロイ","prevPath":"/2018/05/17/aws-lambdaのnode-jsでiconvを使うのが大変だった件/","prevTitle":"AWS LambdaのNode.jsでiconvを使うのが大変だった件"}}}