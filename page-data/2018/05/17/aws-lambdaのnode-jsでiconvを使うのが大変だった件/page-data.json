{"componentChunkName":"component---src-templates-post-js","path":"/2018/05/17/aws-lambdaのnode-jsでiconvを使うのが大変だった件/","result":{"data":{"wordpressPost":{"id":"832198ec-890e-543e-b301-89c1cb2dcd6a","title":"AWS LambdaのNode.jsでiconvを使うのが大変だった件","excerpt":"<p>皆さんこんにちは。関東地方では梅雨入りもまだと言うのに、暑い日が続いていますがいかがおすごしでしょうか。 私は暑いのが苦手なので、ついに先日、今年初の冷房を使い始めました。笑 さて、最近、AWS Lambdaでiconv [&hellip;]</p>\n","slug":"aws-lambda%e3%81%aenode-js%e3%81%a7iconv%e3%82%92%e4%bd%bf%e3%81%86%e3%81%ae%e3%81%8c%e5%a4%a7%e5%a4%89%e3%81%a0%e3%81%a3%e3%81%9f%e4%bb%b6","content":"<p>皆さんこんにちは。関東地方では梅雨入りもまだと言うのに、暑い日が続いていますがいかがおすごしでしょうか。<br />\n私は暑いのが苦手なので、ついに先日、今年初の冷房を使い始めました。笑</p>\n<p>さて、最近、AWS Lambdaで<a href=\"https://www.npmjs.com/package/node-iconv\">iconv</a>を使う必要があったのですが、これが思った以上に大変だったのと、恐らく今後も何回か同様の作業をする事になりそうなので、備忘録を兼ねて解決策を紹介します。</p>\n<h2>Lambdaでネイティブモジュールを使うのは大変</h2>\n<p>前提として、node-iconvのようなコンパイル済みのバイナリに依存しているnpm packageでは、npm install時にnode-gypと言うツールで、実行環境（インストールを行った環境）に適したバイナリをコンパイルします。node-iconvでは同梱しているlibiconvがコンパイルされますが、当然ながら開発環境と実行環境でCPUやOSのアーキテクチャに差異があると正しく動作しません。</p>\n<p>今回、開発環境ではmacOSを使いましたが、実行環境であるAWS LambdaではAmazon Linuxが使われている為、そのままデプロイを行っても動作しないので、実行環境用にnode-iconvのバイナリを予め作っておく必要があります。</p>\n<h2>コンパイル環境の準備</h2>\n<p>まず初めに、AWS Lambdaが実行環境として使っているAmazon Linuxのバージョンを特定する必要がありますが、これは<a href=\"https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html\">ドキュメント</a>に書いてあります。2018年5月17日時点だと、 <code>amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2</code> が使われている事が分かるので、まずはこのAMIを使ってEC2インスタンスを立ち上げます。（EC2インスタンスの起動については割愛します）</p>\n<p>起動されたら、SSHでログインし、パッケージマネージャーの更新とNode.js、それとコンパイルに必要なgcc等をインストールしていきます。<br />\n尚、今回Lambdaで使ったNode.jsのバージョンがv8.10だったので、8のrpmを使用します:</p>\n<pre><code>$ sudo yum update\n...\n$ curl -sL https://rpm.nodesource.com/setup_8.x | sudo bash -\n...\n$ sudo yum install -y nodejs gcc44 gcc-c++ libgcc44 cmake\n...\n$ node -v\nv8.11.2\n</code></pre>\n<p>8.11.2がインストールされましたが、マイナーバージョンのみの違いなのでこれを使います。</p>\n<h2>コンパイルの実行、バイナリのダウンロード</h2>\n<p>準備がととのったのでコンパイルします。適当なディレクトリ上で、npm installをするだけです:</p>\n<pre><code>$ npm install iconv\n&gt; iconv@2.3.0 install /home/ec2-user/node_modules/iconv\n&gt; node-gyp rebuild\n\nmake: Entering directory `/home/ec2-user/node_modules/iconv/build'\nCXX(target) Release/obj.target/iconv/src/binding.o\nCC(target) Release/obj.target/iconv/deps/libiconv/lib/iconv.o\nCC(target) Release/obj.target/iconv/support/localcharset.o\nSOLINK_MODULE(target) Release/obj.target/iconv.node\nCOPY Release/iconv.node\nmake: Leaving directory `/home/ec2-user/node_modules/iconv/build'\nnpm WARN saveError ENOENT: no such file or directory, open '/home/ec2-user/package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open '/home/ec2-user/package.json'\nnpm WARN ec2-user No description\nnpm WARN ec2-user No repository field.\nnpm WARN ec2-user No README data\nnpm WARN ec2-user No license field.\n\n+ iconv@2.3.0\nadded 2 packages in 5.524s\n</code></pre>\n<p>無事コンパイルされ、インストールされました。<br />\n※実際には、node-iconvは開発で使用している物とバージョンを併せる必要があるので、npm install時のバージョン指定は各自行って下さい。</p>\n<p>今回欲しいファイルは <code>node_modules/iconv/build/Release/iconv.node</code> なので、このファイルをSCP等で開発マシンにダウンロードして置き換えますが、勿論今度は開発マシン側が正常に動作しなくなるので、実際にはLambdaへのデプロイ時のみ、都度バイナリが置き換わる仕組みを用意した方が良さそうです。</p>\n<h2>おまけ</h2>\n<p>https://github.com/ashtuchkin/iconv-lite/issues/60 が解決されればそもそもこの作業はいらない</p>\n<h2>参考</h2>\n<p>https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html<br />\nhttps://qiita.com/mobilebiz/items/17bb278894948016df40</p>\n<div class=\"oceanwp-oembed-wrap clr\"><iframe title=\"node-gypを使ったネイティブモジュールの作成\" src=\"https://www.slideshare.net/slideshow/embed_code/key/wUXTSgmbvhgqDq\" width=\"427\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> </p>\n<div style=\"margin-bottom:5px\"> <strong> <a href=\"https://www.slideshare.net/shigeki_ohtsu/nodegakuen5-ohtsu\" title=\"node-gypを使ったネイティブモジュールの作成\" target=\"_blank\">node-gypを使ったネイティブモジュールの作成</a> </strong> from <strong><a href=\"https://www.slideshare.net/shigeki_ohtsu\" target=\"_blank\">shigeki_ohtsu</a></strong> </div>\n</div>\n","dateObject":"2018-05-17T09:42:29.000Z","date":"May 17, 2018","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"iconv","slug":"iconv"},{"name":"Lambda","slug":"lambda"},{"name":"Node.js","slug":"node-js"}],"author":{"name":"issei_m","slug":"issei"},"featured_media":{"media_details":{"sizes":{"large":null,"medium_large":{"source_url":"https://i0.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/e307a1f39537bf408a805bf49921fe19-png.png?fit=768%2C768&ssl=1","height":768,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/05/e307a1f39537bf408a805bf49921fe19-png.png"},"wordpress_id":158}},"pageContext":{"id":"832198ec-890e-543e-b301-89c1cb2dcd6a","nextPath":"/2018/05/05/manage-assets-in-rails-using-webpacker/","nextTitle":"Rails アプリのアセットを Webpacker で管理する","prevPath":"/2018/06/06/build-node-native-module-using-docker-for-lambda/","prevTitle":"DockerでAWS Lambda用のNode.jsネイティブモジュールをビルドする"}}}