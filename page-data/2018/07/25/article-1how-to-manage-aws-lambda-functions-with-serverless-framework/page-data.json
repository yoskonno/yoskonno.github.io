{"componentChunkName":"component---src-templates-post-js","path":"/2018/07/25/article-1how-to-manage-aws-lambda-functions-with-serverless-framework/","result":{"data":{"wordpressPost":{"id":"5d52a935-dee7-5a99-a1f7-3d51142e8c05","title":"Article 1:How to manage AWS Lambda Functions with Serverless Framework","excerpt":"<p>Introduction Article 1:How to manage AWS Lambda Functions with Serverless Framework You can use AWS Lambda for [&hellip;]</p>\n","slug":"article-1how-to-manage-aws-lambda-functions-with-serverless-framework","content":"<h1>Introduction</h1>\n<h2>Article 1:How to manage AWS Lambda Functions with Serverless Framework</h2>\n<p>You can use AWS Lambda for various purposes. It is a common way to connect their services with event triggers.</p>\n<p>AWS Lambda doesn’t require provisioning and managing of servers. You can also edit functions in the online editor inside the AWS Management Console, so it&#8217;s easy to get started. On the other hand, you may face difficulties if you don’t manage them carefully.</p>\n<p>In this article, I will explain how to manage AWS Lamdba Functions with Serverless Framework.<br />\nAWS Lambda functions and its configuration can be complicated but Serverless Framework helps to manage them simply.</p>\n<p><!--more--></p>\n<h2>Other methods</h2>\n<p>（Skip here for the main contents.）</p>\n<p>As Lambda is one of the AWS services, you can control it via the AWS CLI. Also, you can write shell scripts that use it.</p>\n<p>If you want to go with the AWS Way, you will be using AWS CodePipeline, AWS CodeBuild, AWS CloudFormation, <a href=\"http://docs.aws.amazon.com/ja_jp/lambda/latest/dg/automating-deployment.html\" target=\"_blank\" rel=\"noopener\">as this page explains</a>.</p>\n<p>Still, there wouldn’t be people saying “This seems easy. Let’s try.”</p>\n<p>So I searched and found tools to make the process easier. They are called <a href=\"https://dev.classmethod.jp/cloud/aws/sugano-026-lamvery/\" target=\"_blank\" rel=\"noopener\">Lamvery</a> and <a href=\"https://github.com/apex/apex\" target=\"_blank\" rel=\"noopener\">Apex</a>(the maker of Lamvery rivaled Apex but gave up at the end).</p>\n<p>I tried both. Still, those two had some problems such as less flexibility or lack of some features.</p>\n<h1>What is Serverless Framework</h1>\n<p><a href=\"https://serverless.com/framework/docs/\" target=\"_blank\" rel=\"noopener\">Serverless Framework</a> (I will say “Serverless” after here) allows you to manage AWS Lambda, Azure and GCP easily via CLI.</p>\n<p>I often use AWS, but I see many customers use Azure, so Serverless is helpful in that it allows me to manage various infrastructures in the same way.</p>\n<p>Unless I don’t specify, the topics from here are limited about AWS.</p>\n<h2>What you can do</h2>\n<p>You can manage the settings below with the configuration in YAML.</p>\n<ul>\n<li>Configurations of Lambda functions (you need to write code for function body).</li>\n<li>Triggers of AWS Lambda Functions</li>\n<li>Resources for AWS Lambda Functions\n<ul>\n<li>S3</li>\n<li>DynamoDB</li>\n<li>SNS Topic</li>\n<li>Other</li>\n</ul>\n</li>\n<li>IAM role</li>\n</ul>\n<p>Serverless uses CloudFormation under the hood.<br />\nSince creating and updating the Stack is transparent, you don’t have to be aware of them.</p>\n<h1>Install Serverless</h1>\n<h2>Installation</h2>\n<p>You need npm installed. Installation guide of npm is below.</p>\n<ul>\n<li>Use the <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">package</a>f or Window</li>\n<li>Use <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> for Mac</li>\n</ul>\n<p>Hit npm command to install .</p>\n<pre><code>npm install -g serverless\n</code></pre>\n<h2>Create IAM group</h2>\n<p>Permission is required to deploy AWS Lambda Functions or to create and manage resources with Serverless.</p>\n<p>I created an exclusive IAM group and put the necessary permissions in it. Regarding what&#8217;s necessary, there are various discussions in this <a href=\"https://github.com/serverless/serverless/issues/1439\">issue</a>, so you can refer to this if you want to implement fine graind permissions.</p>\n<p>Below is what I did for one of our projects.</p>\n<p>I attached the following AWS managed policies to the group:</p>\n<ul>\n<li>AWSLambdaFullAccess</li>\n<li>AmazonS3FullAccess</li>\n<li>AWSCloudFormationReadOnlyAccess</li>\n</ul>\n<p>And created custom policies that allow the following actions, then attached them to the group:</p>\n<ul>\n<li>cloudformation:ValidateTemplate</li>\n<li>cloudformation:Describe*</li>\n<li>cloudformation:List*</li>\n<li>cloudformation:Get*</li>\n<li>cloudformation:PreviewStackUpdate</li>\n<li>cloudformation:CreateStack</li>\n<li>cloudformation:DeleteStack</li>\n<li>cloudformation:UpdateStack</li>\n</ul>\n<p>After this steps, add IAM users in the IAM group.</p>\n<h2>Install and set up the AWS CLI</h2>\n<p>Other than this, you have to install and configure AWS CLI in your local developing machine. For the detail, refer <a href=\"http://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-tutorial-cli-installation.html\">this page</a>.</p>\n<h1>Definition of Service</h1>\n<h2>What is “Service”</h2>\n<p>The Serverless documentation says it is like a “Project”. At first, you can create one Service without thinking about the details. Then after you get used to it, you can divide it into different services as necessary.</p>\n<h2>Structure of a Service</h2>\n<p>The minimum settings are …</p>\n<ul>\n<li>myService/ directory</li>\n<li>serverless.yml</li>\n<li>Lambda Functions program</li>\n</ul>\n<p>You have to specify necessary settings on serverless.yml.</p>\n<h2>Create Service</h2>\n<p>Hit the command below to create Service.</p>\n<pre><code>sls create --template --path myService\n</code></pre>\n<p>This time, I used “aws-python3” as a template. For other templates, refer <a href=\"https://serverless.com/framework/docs/providers/aws/guide/services/\">this page</a>.</p>\n<h1>Various settings</h1>\n<p>Here, I will explain about various configurations in serverless.yml.</p>\n<p>I wrote already what you can manage by Serverless(see below). I will explain about each one.</p>\n<ul>\n<li>Configuration of Lambda Functions(Program as usual in the contents of Functions )</li>\n<li>Triggers of AWS Lambda Functions</li>\n<li>Every resource that Lambda Functions use</li>\n<li>IAM Role</li>\n</ul>\n<p>All available properties for serverless.yml are covered in [this page].(https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/)<br />\nPlease refer this page for better understanding.</p>\n<h2>General settings</h2>\n<p>Specify general information in the service and provider section.</p>\n<pre><code class=\"language-yaml\">service:\nname: myService\n\nprovider:\nname: aws\nruntime: python3.6\nregion: ap-northeast-1\nrole: arn:aws:iam::nnnnnnnnnnnn:role/Foo_role\nstage: ${opt:stage, 'dev'}\n\ndeploymentBucket:\n# Packages created by Serverless will be placed in this bucket.\n# If you don’t specify the name, the bucket can be automatically generated with a random name. (Not sure）\nname: my-project-lambda-deployment\nserverSideEncryption: AES256 # when using server-side encryption\n</code></pre>\n<p>“stage” is one of the categories such as development, staging, and production. I will describe it later.</p>\n<h2>Function: Settings of AWS Lambda Functions</h2>\n<p>Settings of Lambda Functions have to be written in function section. So here, I define only function name and other settings. I write actual program code in the other file.</p>\n<pre><code>functions:\nmy_awesome_function: # key\nhandler: handler.my_awesome_function\nname: my_awesome_function # name\nevents:\n- xxx\n</code></pre>\n<p>I will explain a few points here.</p>\n<p>About handler section, I mentioned that “write actual program code in the other file”, but the function specified on hander section will be called.</p>\n<p>For example, I specified “my_awesome_function” in the handler section. In this case, You need to create the handler.py file and define a function name my_awesome_function in the file. The filename doesn’t have to be “hander.extention”.</p>\n<p>You don’t have to write anything in the name section. In such case, key value will be used. Still, I recommend you to specify the name.</p>\n<p>On the reference page of serverless.yaml, as an example, “name” includes Stage name, 「${self:provider.stage}-lambdaName」. As we try in this way &#8211; Stage name include Function name, we faced problems. Instead, we decided to use the same name as a key name which I will explain later.</p>\n<p>I will explain the events in the next chapter.</p>\n<h2>Event: Triggers of Lambda Functions</h2>\n<p>Triggers of Lambda functions must be defined in the events sub-section in the function section. Serverless allows you to configure Lambda Functions to be triggered by events from various AWS services.</p>\n<p>For the details, refer to <a href=\"https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/\">serverless.yml</a> reference page.</p>\n<p>In our project, uploading files to S3 is the trigger. Here is one thing to be considered. Because S3 bucket is under the management of Serverless, even if you specify “S3” in the event section, you cannot use existing S3 bucket.</p>\n<p>This seems to be by design (for the detail, refer to this <a href=\"https://github.com/serverless/serverless/issues/2154\">issue</a>) but to avoid this inconvenience, there are <a href=\"https://github.com/matt-filion/serverless-external-s3-event\">plugins</a> to enable existing S3 bucket. I will write about this later.</p>\n<h2>Resource: Resources for Lambda Functions</h2>\n<p>You have to specify resources for AWS Lambda Functions in resources section such as S3 bucket and Dynamo DB. Here, you may need to follow the syntax of CloudFormation Template. Please refer to AWS reference.</p>\n<p><a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\">AWS Resource Types Reference &#8211; AWS CloudFormation</a></p>\n<h1>Edit Lambda Functions</h1>\n<p>Just edit program then mostly finished.</p>\n<pre><code class=\"language-python\"># handler.py\n\n# Just execute “import “\nimport boto3\n# pip install required\nimport requests\n\n# Lambda Functions\ndef my_awesome_function(event, context):\ngreet(\"hello world!\")\n\n# You can also define the different Lambda Functions in the same file.\ndef my_great_function(event, context):\ngreet(\"hello world!!!\")\n\n# It is better to create Functions for common use.\ndef greet(str)\nprint(str)\n</code></pre>\n<p>You can use libraries with “import” statement. Some libraries may not installed. In such cases, you need to execute “pip install”.</p>\n<h1>Packaging and Deployment</h1>\n<h2>Install the necessary python package</h2>\n<p>As I mentioned before, you need to install non-default Python packages by executing &#8220;pip install&#8221;. Note that they need to be located in the service directory or one of its subdirectories. The easiest way is to place it in the same directory as handler.py. Below is the command:</p>\n<p>This is how to write.</p>\n<pre><code>cd /path/to/myService\npip install (package name) -t.\n</code></pre>\n<p>Postscript: I posted a better way as a separate article.</p>\n<p><a href=\"https://stg-engineering-wp.mobalab.net/2018/01/14/how-to-deploy-python-based-lambda-function-that-uses-packages/\">Serverless で Python のパッケージを使った Lambda 関数をデプロイ | もばらぶエンジニアブログ</a></p>\n<h2>Deploy</h2>\n<p>This is how to deploy.</p>\n<pre><code>sls deploy\n</code></pre>\n<p>Hit this command to create packages of Python program and configuration, and they will be uploaded to S3 bucket. Then it is deployed through CloudFormation.</p>\n<h1>Other topics</h1>\n<p>Since the post is getting longer, I will post other topics below in a different article.</p>\n<ul>\n<li>Variables on serverless.yml</li>\n<li>About stage</li>\n<li>serverless-external-s3-event plugin</li>\n<li>Other、tips etc</li>\n</ul>\n<p>A postscript. I post the second article.</p>\n<p><a href=\"https://stg-engineering-wp.mobalab.net/2017/12/12/serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%862/\">Serverless Framework による AWS Lambda 関数の管理2 | もばらぶエンジニアブログ</a></p>\n<h1>Conclusion</h1>\n<p>Serverless Framework allows you to manage AWS Lambda Function and other resources with the simple configuration and program code. I recommend this way because it is so much easier compared to the official(?)AWS method.</p>\n<p>About the image on the top</p>\n<p>The image on the top of the page is licensed under the MIT license.</p>\n","dateObject":"2018-07-25T04:01:27.000Z","date":"July 25, 2018","categories":[{"name":"English","slug":"en"}],"tags":[{"name":"AWS","slug":"aws"},{"name":"Lambda","slug":"lambda"},{"name":"Serverless","slug":"serverless"}],"author":{"name":"renn19","slug":"renn19"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=1024%2C441&ssl=1","height":441,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=768%2C331&ssl=1","height":331,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png"},"wordpress_id":340}},"pageContext":{"id":"5d52a935-dee7-5a99-a1f7-3d51142e8c05","nextPath":"/2018/07/23/testing-spark-dataframe/","nextTitle":"Spark の DataFrame のテスト","prevPath":"/2018/08/08/rails-2-5のcredentialsを使うとdeviseからエラーが発生する問題と応/","prevTitle":"Rails 5.2のcredentialsを使うとDeviseからエラーが発生する問題と応急処置"}}}