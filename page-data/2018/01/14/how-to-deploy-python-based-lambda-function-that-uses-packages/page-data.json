{"componentChunkName":"component---src-templates-post-js","path":"/2018/01/14/how-to-deploy-python-based-lambda-function-that-uses-packages/","result":{"data":{"wordpressPost":{"id":"187649b5-03ee-58cc-991f-4e2e445789f7","title":"Serverless で Python のパッケージを使った Lambda 関数をデプロイ","excerpt":"<p>Python パッケージを使う、原始的な方法 過去に2回、Serverless Framework を使った Lambda 関数の管理について書きました。 Serverless Framework による AWS Lam [&hellip;]</p>\n","slug":"how-to-deploy-python-based-lambda-function-that-uses-packages","content":"<h1>Python パッケージを使う、原始的な方法</h1>\n<p>過去に2回、Serverless Framework を使った Lambda 関数の管理について書きました。</p>\n<ul>\n<li><a href=\"https://stg-engineering-wp.mobalab.net/2017/11/18/serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%861/\">Serverless Framework による AWS Lambda 関数の管理1 | もばらぶエンジニアブログ</a></li>\n<li><a href=\"https://stg-engineering-wp.mobalab.net/2017/12/12/serverless-framework-%e3%81%ab%e3%82%88%e3%82%8b-aws-lambda-%e9%96%a2%e6%95%b0%e3%81%ae%e7%ae%a1%e7%90%862/\">Serverless Framework による AWS Lambda 関数の管理2 | もばらぶエンジニアブログ</a></li>\n</ul>\n<p>1回目の投稿の際、Python のパッケージを使いたい場合は、以下の通り、Lambda 関数の Python ファイルと同じディレクトリにパッケージをインストールして、それを <code>sls deploy</code> でパッケージ化＆デプロイする方法を紹介しました。</p>\n<pre><code>pip install パッケージ名 -t .\n</code></pre>\n<h1>「原始的な方法」の問題点</h1>\n<p>上に挙げた方法には2つの問題があります。</p>\n<ol>\n<li>ディレクトリが汚れる</li>\n<li>pure Python ではないモジュール（コンパイルが必要なモジュール）を使う際に問題がある</li>\n</ol>\n<p>それぞれについて簡単に説明します。</p>\n<p><!--more--></p>\n<h2>ディレクトリが汚れる</h2>\n<p>例えば、<code>requests</code> パッケージをインストールすると、<code>requests</code> が依存している他のパッケージも同じディレクトリにインストールされます。使用するパッケージが増えてくると、ディレクトリが沢山出来て汚いです。</p>\n<p>また、Serverless で Lambda 関数を管理するという事は、当然ソースコードも管理しているかと思いますが、それらの Python パッケージはソースコード管理に加える事は望ましくないため、 <code>.gitignore</code> に入れるなどの方法を取る事になります。パッケージが増えてくると、都度 <code>.gitignore</code> に追加するのも面倒になってきます。</p>\n<h2>pure Python ではないモジュールを使う際に問題がある</h2>\n<p>例えば、Mac で Serverless を使っているとします。<code>pip install</code> で pure Python でない、コンパイルが必要なモジュールをインストールすると、当然ながら Mac 上でコンパイルされ、Mac 用のバイナリが出来ます。これをそのまま <code>sls deploy</code> でデプロイしても、Lambda は裏側では Amazon Linux 上で動いているので、バイナリの互換性が無いためエラーになります。</p>\n<h1>serverless-python-requirements を使った解決方法</h1>\n<p>上の問題を解決するのが <a href=\"https://github.com/UnitedIncome/serverless-python-requirements\">serverless-python-requirements</a> というプラグインです。</p>\n<p>具体的な使い方は、実は Serverless のブログサイトに記事があるので、それを読んでもらうと良いかもしれませんが、若干冗長なのと英語なので、本記事でも簡単にまとめます。</p>\n<p><a href=\"https://serverless.com/blog/serverless-python-packaging/\">How to Handle your Python packaging in Lambda with Serverless plugins</a></p>\n<h2>インストール・事前準備</h2>\n<p>以下の通り serverless-python-requirements をインストールします。</p>\n<pre><code>npm install --save serverless-python-requirements\n# この後、package.json はコミットしておく\n</code></pre>\n<p>Serverless のプラグインは、それを必要とするプロジェクトでのみインストールすべきだと思うので、<code>-g</code> はつけない方が良いと思います。</p>\n<p>また、同プラグインは内部で Docker を使うため、Docker もインストールしておきます。</p>\n<h2>設定</h2>\n<p>serverless.yml に以下の通り記述します。</p>\n<pre><code><br />plugins:\n  - serverless-python-requirements\n\ncustom:\n  pythonRequirements:\n    dockerizePip: true\n</code></pre>\n<h2>使い方</h2>\n<p><code>requirements.txt</code> に使いたいパッケージを記載します。例えば以下の通りです。通常の <code>requirements.txt</code> と同じなので、詳しい説明はしません。</p>\n<pre><code>requests==2.18.4\nparamiko\n</code></pre>\n<p>後は、<code>sls deploy</code> をすれば、よしなにやってくれます。</p>\n<p>たったこれだけです。</p>\n<h1>補足</h1>\n<h2>requirements.py</h2>\n<p>ネットを見ると <code>import requirements</code> が必要であると書いているページがいくつかありましたが、（昔は必要だったようですが）今は必要ないようです。</p>\n<p>以下のようなページです。</p>\n<ul>\n<li><a href=\"https://dev.classmethod.jp/cloud/aws/managing-external-modules-with-serverless-framework-plugin/\">Serverless Frameworkのプラグインを利用した外部モジュールの管理 ｜ Developers.IO</a></li>\n<li><a href=\"https://qiita.com/mkisono/items/f04297775275c6b50774\">Serverless Python Requirements で楽をする &#8211; Qiita</a></li>\n</ul>\n<h2>内部の動作</h2>\n<p>実際にどうやって動作しているのかは、上述の Classmethod さんのページで細かく解説しているので、そちらを参考にすると良いと思います。</p>\n<p>ただ、若干現在の動作と異なるようなので、その部分だけ説明します。</p>\n<p>現在は、<code>sys.path</code> をいじることはしていません。その代わり、<code>sls deploy</code> の時にローカルの <code>.serverless</code> に必要なファイルを全て集め、それらをパッケージングしています。</p>\n<p>作成された zip ファイルの中身を見てみると、以下のようになっています。</p>\n<pre><code>$ unzip -l .serverless/my-lambda-function.zip | awk '{print $4}'\n# 出力結果は適当に省略します\nName\n----\n.libs_cffi_backend/libffi-d7bb31a0.so.6.0.4 # &lt;- バイナリ\n(snip)\nmy-lamda-function.py # &lt;- 自分で作成したファイル\n(snip)\nrequests-2.18.4.dist-info/DESCRIPTION.rst # &lt;- パッケージに含まれるドキュメント\n(snip)\nrequests/__init__.py # &lt;- パッケージ内の Python ファイル\n(snip)\nrequirements.txt # &lt;- 自分で作成したファイル\n</code></pre>\n<h1>まとめ</h1>\n<p>Serverless を使うと、Lambda 関数が簡単に管理できますが、Serverless 単体だと Python の外部パッケージを使う際にいくつかの問題がありました。serverless-python-requirements プラグインを使う事でその問題は解決できるため、Python で Lambda 関数を開発する人にとっては必須のプラグインと言えるでしょう。</p>\n","dateObject":"2018-01-14T11:38:15.000Z","date":"January 14, 2018","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Serverless","slug":"serverless"},{"name":"serverless-python-requirements","slug":"serverless-python-requirements"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=1024%2C441&ssl=1","height":441,"width":1024},"medium_large":{"source_url":"https://i1.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png?fit=768%2C331&ssl=1","height":331,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2017/11/serverless-framework-e1515487705166.png"},"wordpress_id":117}},"pageContext":{"id":"187649b5-03ee-58cc-991f-4e2e445789f7","nextPath":"/2018/01/10/terraform-によるインフラ構築/","nextTitle":"Terraform によるインフラ構築","prevPath":"/2018/05/05/manage-assets-in-rails-using-webpacker/","prevTitle":"Rails アプリのアセットを Webpacker で管理する"}}}