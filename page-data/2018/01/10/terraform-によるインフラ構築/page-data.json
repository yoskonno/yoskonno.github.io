{"componentChunkName":"component---src-templates-post-js","path":"/2018/01/10/terraform-によるインフラ構築/","result":{"data":{"wordpressPost":{"id":"b16ee9df-ee82-5a65-902f-38966857934e","title":"Terraform によるインフラ構築","excerpt":"<p>概要 Terraform は、いわゆる Infrastructure as Code のためのツールですが、似たようなツールが色々ある中で、なぜ Terraform を使う必要があるのか分からない人もいると思います。本記 [&hellip;]</p>\n","slug":"terraform-%e3%81%ab%e3%82%88%e3%82%8b%e3%82%a4%e3%83%b3%e3%83%95%e3%83%a9%e6%a7%8b%e7%af%89","content":"<h1>概要</h1>\n<p>Terraform は、いわゆる Infrastructure as Code のためのツールですが、似たようなツールが色々ある中で、なぜ Terraform を使う必要があるのか分からない人もいると思います。本記事では、</p>\n<ul>\n<li>Terraform 自体の説明</li>\n<li>なぜ Terraform が必要か</li>\n<li>Terraform を使ったインフラ構築の方法</li>\n<li>他のツールとの使い分け</li>\n</ul>\n<p>について説明していきます。</p>\n<h1>Terraform とは</h1>\n<h2>概要</h2>\n<p>Terraform とは、前述の通り Infrastructure as Code （以下 IaC）のためのツールで、Vagrant などで有名な HashiCorp によって開発されています。</p>\n<p>Terraform では、AWS, Azure, GCP のようなクラウドプラットフォームや、OpenStack などを使ったインフラを管理する事が出来ます。</p>\n<p>Terraform を使うと、インフラの設定内容がコード化されるため、</p>\n<ul>\n<li>バージョン管理ツールなどで過去の修正が把握できる</li>\n<li>インフラ構築作業が簡単に再現可能</li>\n</ul>\n<p>といった、IaC の利点は当然享受できます。（IaC 自体の話はここでは深入りしません。）</p>\n<p>また、以下のような Terraform 特有の利点もいくつか挙げられます。</p>\n<ul>\n<li>各リソースの依存関係を内部で管理している</li>\n<li>インフラの現在の状態を保持している</li>\n<li>主要なクラウドプラットフォームに対応</li>\n</ul>\n<p>次項から、Terraform 特有の利点について見ていきます。</p>\n<p><!--more--></p>\n<h2>各リソースの依存関係を内部で管理</h2>\n<p>それなりの規模のインフラを管理していると、多数の構成要素を触る必要が出てきます。例えば、AWS で複数台のサーバーを運用しているだけのシンプルな場合ですら、</p>\n<ul>\n<li>VPC\n<ul>\n<li>subnet</li>\n<li>ルーティング</li>\n</ul>\n</li>\n<li>EC2\n<ul>\n<li>インスタンス</li>\n<li>IP アドレス</li>\n<li>セキュリティグループ</li>\n</ul>\n</li>\n</ul>\n<p>といったものが出てきます。</p>\n<p>構成要素が多い場合、それらのどれか1つの設定変更をした時に、他のどの部分に影響を及ぼすかを把握するのは困難になってきます。</p>\n<p>Terraform では、各リソースの依存関係を把握しているため、あるリソースの設定を変更したときに、どこにどういう影響を及ぼすのか（再起動が必要となる、リソースの再作成が必要となる、等）というのが、事前に把握できます。</p>\n<h2>インフラの現在の状態を保持している</h2>\n<p>Terraform では、インフラの現在の状態を保持しています。</p>\n<p>他のツールですと、設定ファイルの内容が現在のインフラに適用されているのか分からないという事もありますが、Terraform では、&#8221;State&#8221; をファイルとして保持しています。そして、インフラに何らかの変更を加える際などは、現在の State と比較して、必要な変更のみを加えるような動作をします。</p>\n<p>State に関しての詳細は、以下のページを参照して下さい。</p>\n<p><a href=\"https://www.terraform.io/docs/state/purpose.html\">State &#8211; Terraform by HashiCorp</a></p>\n<h2>主要なクラウドプラットフォームに対応</h2>\n<p>Terraform では、AWS, Azure, GCP といった主要なクラウドプラットフォームに対応しています。それだけでしたら他のツールも同様だと思いますが、Terraform では、インフラの実体が何であろうと、割と同じような設定で書けますので、ベンダーの移行や複数ベンダーをまたぐインフラの構築なども比較的やりやすいと思います。</p>\n<h1>なぜ Terraform が必要か</h1>\n<p>世の中には似たような（あるいは似ているように見える）ツールが沢山ありますが、それらでは無くて Terraform を使う必要はなぜでしょうか。Terraform の以下のドキュメントにも記載がありますので、それを元に書いてみます。</p>\n<p><a href=\"https://www.terraform.io/intro/vs/index.html\">Terraform vs. Other Software &#8211; Terraform by HashiCorp</a></p>\n<h2>Chef, Puppet etc.</h2>\n<p>Chef, Puppet などは構成管理ツールです。あるマシンに対してソフトウェアをインストールしたり設定を変更するのに適しています。</p>\n<p>個人的には Chef は無駄に複雑だと思うので使うのを止めてしまいましたし、実際に最近は Chef の人気も下火のように思えます。Puppet は使った事がありません。</p>\n<p>Ansible は、web サイトに 「App deployment, configuration management and orchestration &#8211; all from one system」と書いてありますが、構成管理ツールとして使われる事が一番多いと思いますので、Chef, Puppet と同じカテゴリーに入れて良いと思います。</p>\n<h2>CloudFormation, Heat etc.</h2>\n<p>CloudFormation や Heat は、出来る事は Terraform と似ています。最大の違いとしては、CloudFormatino は AWS のみ、Heat は OpenStack のみに対応しているのに対し、Terraform では複数のクラウドプラットフォームに対応しています。</p>\n<p>CloudFormation は少し使った事があるのですが、機能は十分ですが、覚えるのが大変という印象があります。また、AWS でしか使えないのは大きなマイナスです。</p>\n<p>それに対して、Terraform は比較的シンプルかつ、AWS 以外にも対応していますので、覚えるのであれば Terraform の方が良いでしょう。</p>\n<h1>Terraform を使ったインフラ構築の方法</h1>\n<h2>基本的な流れ</h2>\n<p>ここからが本題です。インストール自体は済んでいる前提です。</p>\n<p>Terraform の使い方は、以下のページとその後続のページである程度概要が載っています。</p>\n<p><a href=\"https://www.terraform.io/intro/getting-started/build.html\">Build Infrastructure &#8211; Terraform by HashiCorp</a></p>\n<p>基本的な流れとしては以下の通りです。</p>\n<ul>\n<li><code>*.tf</code> というファイルを作成する</li>\n<li><code>terraform init</code> でいろいろ初期化</li>\n<li><code>terraform apply</code> で設定内容をインフラに反映</li>\n<li><code>*.tf</code> を修正したら、都度 <code>terraform apply</code> を実行</li>\n</ul>\n<h2>State 及び Remote State</h2>\n<p><code>terraform apply</code> をした時点で、<code>terraform.tfstate</code> というファイルが作成されたと思いますが、これが State を保持するファイルです。大事なファイルなので消さないようにしましょう。</p>\n<p>さて、1人のプロジェクトとかであれば、このファイルをローカルに保存しておけば良いと思いますが、複数人がインフラに関わる環境（通常はそうだと思います）であれば、Remote State という仕組みを使って、このファイルを S3 などに置いて共有する事をお勧めします。<br />\nまた、Stateは認証情報なども含まれているので、一人で運用する場合でもgit管理はしないようにしましょう。</p>\n<p>Remote State の使い方は以下のページに記載があるのですが、これだけだと分かりにくいと思います。（実際に、私もこれだけだとよく分かりませんでした。）</p>\n<p><a href=\"https://www.terraform.io/docs/state/remote.html\">State: Remote Storage &#8211; Terraform by HashiCorp</a></p>\n<p>ということで、設定方法を簡単に説明します。</p>\n<p>まずは、以下のファイルを拡張し <code>.tf</code> の任意のファイル名で保存します。例えば <code>s3-backend.tf</code> などです。</p>\n<pre><code>terraform {\n  backend \"s3\" {\n    bucket  = \"a-bucket-for-provisioning\"\n    key     = \"terraform.tfstate\"\n    region  = \"ap-northeast-1\"\n  }\n}\n</code></pre>\n<p>その上で、<code>terraform init</code> コマンドを実行します。これで、<code>*.tfstate</code> ファイルが S3 上に保存されます。</p>\n<h2>Workspace</h2>\n<p>Terraform には、&#8221;workspace&#8221; という概念があります。典型的な使い方としては、<code>development</code>, <code>staging</code>, <code>production</code> といった Workspace を用意して、それを切り替えて使うというものです。</p>\n<p>これは、内部的には state ファイルなどを workspace 毎のディレクトリに格納するという形になっています。</p>\n<p>workspace を使うには、次のようなコマンドを使います</p>\n<pre><code># foo という名前の workspace を作成し、そちらに切り替え\nterraform workspace new foo\n# bar という名前の workspace を作成し、そちらに切り替え\nterraform workspace new bar\n# foo という名前の workspace に切り替え\nterraform workspace select foo\n</code></pre>\n<p>設定ファイルの中では workspace 名を使用する事が出来るため、インスタンスの名前に workspace 名を入れたり出来ます。以下の設定例は、公式サイトからの引用です。</p>\n<pre><code>resource \"aws_instance\" \"example\" {\n  tags {\n    Name = \"web - ${terraform.workspace}\"\n  }\n\n  # ... other arguments\n}\n</code></pre>\n<p>ここまでで、Terraform を使ったインフラ構築の基本的なタスクは網羅できたと思います。</p>\n<h1>他のツールとの使い分け</h1>\n<p>上の方で他のツールとの違いについて記述しましたが、ここでは他のツールとの使い分けについて書きます。</p>\n<p>個人的な使い分けとしては以下の通りです。以下、AWS の例ですが、他のクラウドベンダーの場合も似たような感じになるかと思います。</p>\n<ul>\n<li>AWS のインフラ定義（EC2, ELB, VPC, RDS, etc）は、Terraform メインで</li>\n<li>EC2 へのソフトのインストールとかは Ansible</li>\n<li>Lambda や、Lambda が使用するリソースの定義は Serverless</li>\n</ul>\n<p>本当であれば、AWS のインフラ定義は全て Terrform を使いたいのですが、Terraform で Lambda 関数を定義するのは結構面倒だったので、Lambda の場合は、以前紹介した Serverless を使うのが良いと思います。</p>\n<p>また、EC2 を使うケースは段々減ってきているので、多分近いうちに Ansible は要らなくなって、コンテナ周りで Kubernetes を使う事になるかと思います。</p>\n<p>昨年の終わり頃に流れてきた以下のスライドが色々と良い内容が書いてありました。</p>\n<p><a href=\"https://speakerdeck.com/opelab/20171212-automation\">運用自動化、不都合な真実 /20171212-automation // Speaker Deck</a></p>\n<p>ここに書いてあったのですが、自動化関連のツールの流行り廃りは早いので、1つのツールで全てやろうとするのはあまり良い考えでは無いと思います。従って、Terraform が苦手な部分は、他のツールを併用するのが良いと思います。</p>\n<h1>まとめ</h1>\n<p>IaC のツールは色々ありますが、Terraform は、主要なクラウドプラットフォームに対応したインフラの構成管理ツールで、インフラ自体の定義・構築に適しています。</p>\n<p>ただ、Terraform だけで出来ない部分もあるので、その辺りは他のツールと併用するのが良いと思います。</p>\n","dateObject":"2018-01-10T02:34:36.000Z","date":"January 10, 2018","categories":[{"name":"Uncategorized","slug":"uncategorized"}],"tags":[{"name":"Terraform","slug":"terraform"}],"author":{"name":"中の人（管理者）","slug":"engineering_8qmk0b"},"featured_media":{"media_details":{"sizes":{"large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/01/datacenter.jpg?fit=1024%2C768&ssl=1","height":768,"width":1024},"medium_large":{"source_url":"https://i2.wp.com/stg-engineering-wp.mobalab.net/wp-content/uploads/2018/01/datacenter.jpg?fit=768%2C576&ssl=1","height":576,"width":768}}},"source_url":"https://stg-engineering-wp.mobalab.net/wp-content/uploads/2018/01/datacenter.jpg"},"wordpress_id":56}},"pageContext":{"id":"b16ee9df-ee82-5a65-902f-38966857934e","nextPath":"/2017/12/12/serverless-framework-による-aws-lambda-関数の管理2/","nextTitle":"Serverless Framework による AWS Lambda 関数の管理2","prevPath":"/2018/01/14/how-to-deploy-python-based-lambda-function-that-uses-packages/","prevTitle":"Serverless で Python のパッケージを使った Lambda 関数をデプロイ"}}}