{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./src/components/PostList.js"],"names":["Tag","props","data","pageContext","allWordpressPost","posts","edges","totalCount","siteTitle","site","siteMetadata","title","tag","name","pageQuery","IndexPage","render","this","path","className","undefined","map","post","node","date","Date","dateObject","pathFromDate","getPathFromDate","decodeURIComponent","slug","thumbnailSrc","ratio","featured_media","media_details","sizes","medium","source_url","height","width","error","backgroundImageStyle","backgroundImage","backgroundSize","key","id","to","style","author","dangerouslySetInnerHTML","__html","excerpt","replace","React","Component"],"mappings":"6NAuBeA,UAjBH,SAAAC,GAAU,IACZC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YADK,EAEkBD,EAAKE,iBAA3BC,EAFI,EAEXC,MAAcC,EAFH,EAEGA,WACPC,EAAcN,EAAKO,KAAKC,aAA/BC,MACMC,EAAQT,EAAdU,KACFF,EAAWJ,EAAN,SACM,IAAfA,EAAmB,GAAK,KADf,iBAEMK,EAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQD,MAAUC,EAAL,MAAcJ,IAC3B,kBAAC,IAAD,CAAUH,MAAOA,EAAOM,MAAOA,MAO9B,IAAMG,EAAS,a,6ICpBDC,E,gLACnBC,OAAA,WAAU,IAAD,EACwBC,KAAKhB,MAA5BI,EADD,EACCA,MAAOa,EADR,EACQA,KAAMP,EADd,EACcA,MAErB,OACE,6BAASQ,UAAU,WACN,MAATD,QAA0BE,IAAVT,GAChB,uBAAGQ,UAAU,4BAA6BR,GAE5C,yBAAKQ,UAAU,aACZd,EAAMgB,KAAI,YAAqB,IAAZC,EAAW,EAAjBC,KACNC,EAAO,IAAIC,KAAKH,EAAKI,YACrBC,EAAY,IAAOC,0BAAgBJ,GAAvB,IAAgCK,mBAAmBP,EAAKQ,MAAxD,IAEdC,EAAe,wBACfC,EAAQ,EAEZ,IACED,EAAeT,EAAKW,eAAeC,cAAcC,MAAMC,OAAOC,WAD5D,MAGwBf,EAAKW,eAAeC,cAAcC,MAAMC,OAA1DE,EAHN,EAGMA,OACRN,EAJE,EAGcO,MACAD,EAChB,MAAME,IAGR,IAAMC,EAAuB,CAC3BC,gBAAgB,OAAQX,EAAT,IACfY,eAAgBX,EAAQ,EAAI,UAAY,SAG1C,OACE,yBAAKb,UAAU,2BACb,kBAAC,IAAD,CACEA,UAAU,kBACVyB,IAAKtB,EAAKuB,GACVC,GAAInB,GAEJ,yBAAKR,UAAU,uBAAuB4B,MAAON,IAC7C,yBAAKtB,UAAU,wBACb,wBAAIA,UAAU,oBACXG,EAAKX,OAER,uBAAGQ,UAAU,oBACVG,EAAKE,MAER,uBAAGL,UAAU,oBAAb,YAEG,IACD,kBAAC,IAAD,CAAM2B,GAAE,WAAaxB,EAAK0B,OAAOlB,MAC9BR,EAAK0B,OAAOnC,OAGjB,yBACEM,UAAU,qBACV8B,wBAAyB,CACvBC,OAAQ5B,EAAK6B,QAAQC,QAAQ,wBAAyB,IAAIA,QAAQ,aAAc,UAGpF,yBAAKjC,UAAU,0BACb,kBAAC,IAAD,CACEA,UAAU,uBACV2B,GAAInB,GAFN,qB,GA3DiB0B,IAAMC","file":"component---src-templates-tag-js-28e85cb989fb8ce86070.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport PostList from '../components/PostList'\n\nconst Tag = props => {\n  const { data, pageContext } = props\n  const { edges: posts, totalCount } = data.allWordpressPost\n  const { title: siteTitle } = data.site.siteMetadata\n  const { name: tag } = pageContext\n  const title = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } with the tag ${tag}`\n\n  return (\n    <Layout>\n      <Helmet title={`${tag} - ${siteTitle}`} />\n      <PostList posts={posts} title={title} />\n    </Layout>\n  )\n}\n\nexport default Tag\n\nexport const pageQuery = graphql`\n  query TagPage($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allWordpressPost(filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      totalCount\n      edges {\n        node {\n          ...PostListFields\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport { getPathFromDate } from '../lib/helper/TimeHelper'\n\nexport default class IndexPage extends React.Component {\n  render() {\n    const { posts, path, title } = this.props\n\n    return (\n      <section className=\"section\">\n        { path !== '/' && title !== undefined && (\n          <p className=\"post-list__section-title\">{ title }</p>\n        )}\n        <div className=\"post-list\">\n          {posts.map(({ node: post }) => {\n            const date = new Date(post.dateObject)\n            const pathFromDate = `/${getPathFromDate(date)}/${decodeURIComponent(post.slug)}/`\n\n            let thumbnailSrc = \"/img/mobalab-logo.jpg\"\n            let ratio = 0\n\n            try {\n              thumbnailSrc = post.featured_media.media_details.sizes.medium.source_url\n\n              const { height, width } = post.featured_media.media_details.sizes.medium\n              ratio = width / height\n            } catch(error) {\n              // console.log(error)\n            }\n            const backgroundImageStyle = {\n              backgroundImage: `url(${thumbnailSrc})`,\n              backgroundSize: ratio > 2 ? 'contain' : 'cover'\n            }\n\n            return (\n              <div className=\"post-list__item-wrapper\">\n                <Link\n                  className=\"post-list__item\"\n                  key={post.id}\n                  to={pathFromDate}\n                >\n                  <div className=\"post-list__thumbnail\" style={backgroundImageStyle} />\n                  <div className=\"post-list__main-area\">\n                    <h4 className=\"post-list__title\">\n                      {post.title}\n                    </h4>\n                    <p className=\"post-list__small\">\n                      {post.date}\n                    </p>\n                    <p className=\"post-list__small\">\n                      posted by\n                      {' '}\n                      <Link to={`/author/${post.author.slug}`}>\n                        {post.author.name}\n                      </Link>\n                    </p>\n                    <div\n                      className=\"post-list__excerpt\"\n                      dangerouslySetInnerHTML={{\n                        __html: post.excerpt.replace(/<p class=\"link-more.*/, '').replace('[&hellip;]', '...'),\n                      }}\n                    />\n                    <div className=\"post-list__button-area\">\n                      <Link\n                        className=\"button button--small\"\n                        to={pathFromDate}\n                      >\n                        続きを読む →\n                      </Link>\n                    </div>\n                  </div>\n                </Link>\n              </div>\n            )}\n          )}\n        </div>\n      </section>\n    )\n  }\n}\n\nIndexPage.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string,\n}\n\nexport const pageQuery = graphql`\n  fragment PostListFields on wordpress__POST {\n    id\n    title\n    excerpt\n    author {\n      name\n      slug\n      avatar_urls {\n        wordpress_48\n      }\n    }\n    dateObject: date\n    date(formatString: \"MMMM DD, YYYY\")\n    slug\n    featured_media {\n      media_details {\n        sizes {\n          medium {\n            source_url\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}